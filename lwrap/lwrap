#!/usr/bin/env bash
# Lutris Wine wrapper for Runimage container

RED='\033[1;91m'
BLUE='\033[1;94m'
GREEN='\033[1;92m'
YELLOW='\033[1;33m'
RESETCOLOR='\033[1;00m'
SYS_LWSRC="/usr/bin/lutris-wine"
LW_DIR="$HOME/.local/share/LutrisWine"
HOME_LWSRC="$LW_DIR/lutris-wine"

[ ! -n "$(tty|grep -v 'not a'|grep -Eo 'tty|pts')" ] && \
    NOT_TERM=1

error_msg() {
    echo -e "${RED}[ ERROR ][$(date +"%Y.%m.%d %T")]: $@ $RESETCOLOR"
    if [ "$NOT_TERM" == 1 ]
        then
            notify-send -a 'RunImage Error' "$@" 2>/dev/null &
    fi
}

info_msg() {
    if [ "$QUIET_MODE" != 1 ]
        then
            echo -e "${GREEN}[ INFO ][$(date +"%Y.%m.%d %T")]: $@ $RESETCOLOR"
            if [[ "$NOT_TERM" == 1 && "$DONT_NOTIFY" != 1 ]]
                then
                    notify-send -a 'RunImage Info' "$@" 2>/dev/null &
            fi
    fi
}

warn_msg() {
    if [ "$QUIET_MODE" != 1 ]
        then
            echo -e "${YELLOW}[ WARNING ][$(date +"%Y.%m.%d %T")]: $@ $RESETCOLOR"
            if [[ "$NOT_TERM" == 1 && "$DONT_NOTIFY" != 1 ]]
                then
                    notify-send -a 'RunImage Warning' "$@" 2>/dev/null &
            fi
    fi
}

make_install() {
    DESKEXEC="$(([[ "$RUNSRC" =~ "lwrun" ]] && echo "$RUNSRC")||\
               ([ -x "$HOME_LWSRC" ] && echo "$HOME_LWSRC")||\
               ([ -x "$SYS_LWSRC" ] && echo "$SYS_LWSRC"))"
    install -Dm755 lutris-wine "$HOME_LWSRC"
    install -Dm644 LutrisWine.menu "$HOME/.config/menus/applications-merged/LutrisWine.menu"
    install -Dm644 LutrisWineService.desktop "$HOME/.local/share/kservices5/ServiceMenus/LutrisWineService.desktop"
    install -Dm644 LICENSE "$LW_DIR/LICENSE"
    (IFS=$'\n'
    if [ -n "$DESKEXEC" ]
        then
            for DESKFL in $(grep -rm1 '^Exec=".*"' ./*|cut -d ':' -f1)
                do sed -i "s|^Exec=\".*\"|Exec=\"$DESKEXEC\"|g" "$DESKFL"
            done
    fi
    for DESKFL in $(grep -rm1 'Icon=/.*/lutris-wine/icons/.*.png$' ./*|cut -d ':' -f1)
        do sed -i "s|Icon=/.*/lutris-wine/icons/|Icon=$LW_DIR/icons/|g" "$DESKFL"
    done
    for APP in $(ls -1 applications)
        do install -Dm644 "applications/$APP" "$HOME/.local/share/applications/LutrisWine/$APP"
    done
    for DIR in $(ls -1 directories)
        do install -Dm644 "directories/$DIR" "$HOME/.local/share/desktop-directories/$DIR"
    done
    for ICON in $(ls -1 icons)
        do install -Dm644 "icons/$ICON" "$LW_DIR/icons/$ICON"
    done
    for GIF in $(ls -1 gif)
        do install -Dm644 "gif/$GIF" "$LW_DIR/gif/$GIF"
    done
    for THEME in $(ls -1 themes)
        do install -Dm644 "themes/$THEME" "$LW_DIR/themes/$THEME"
    done
    for DB in $(ls -1 db)
        do install -Dm644 "db/$DB" "$LW_DIR/db/$DB"
    done)
    [ -f "$HOME/.bashrc" ] && ! grep -om1 '/.local/bin' "$HOME/.bashrc" &>/dev/null && \
        echo -e '\nexport PATH="$HOME/.local/bin:$PATH"' >> "$HOME/.bashrc"
    [ -f "$HOME/.zshrc" ] && ! grep -om1 '/.local/bin' "$HOME/.zshrc" &>/dev/null && \
        echo -e '\nexport PATH="$HOME/.local/bin:$PATH"' >> "$HOME/.zshrc"
}

uninstall_lw() {
    info_msg "Removing Lutris Wine..."
    rm -rf "$HOME/.config/menus/applications-merged/LutrisWine.menu"
    rm -rf "$HOME/.local/share/applications/LutrisWine"
    rm -rf "$HOME/.local/share/desktop-directories/LutrisWine"*
    rm -rf "$HOME/.local/share/kservices5/ServiceMenus/LutrisWine"*
    if [ "$1" == "all" ]
        then
            rm -rf "$LW_DIR"
            rm -rf "$HOME/LutrisWine"
        else
            rm -rf "$LW_DIR/icons"
            rm -rf "$LW_DIR/gif"
            rm -rf "$LW_DIR/themes"
            rm -rf "$LW_DIR/db"
            rm -rf "$LW_DIR/LICENSE"
            rm -rf "$LW_DIR/lutris-wine"
            rm -rf "$LW_DIR/.lwcfgchksum"
    fi
    info_msg "Lutris Wine removed!"
}

get_lw_version() {
    if [ -n "$1" ]
        then grep -m1 'LW_VERSION' "$1" 2>/dev/null|grep -Po '\d+'|sed ':a;/$/N;s/\n//;ta'
        else grep -m1 'LW_VERSION'|grep -Po '\d+'|sed ':a;/$/N;s/\n//;ta'
    fi
}

is_net_conn() {
    nc -zw1 github.com 443 &>/dev/null && \
        return 0||return 1
}

install_lw() {
    TMP_LW="/tmp/lutris-wine.$RANDOM"
    info_msg "Installing Lutris Wine..."
    if curl -sL "https://github.com/VHSgunzo/lutris-wine/archive/refs/heads/main.zip" \
        -o "$TMP_LW.zip" 2>/dev/null
        then
            (unzip "$TMP_LW.zip" -d "$TMP_LW" &>/dev/null && \
            cd "$TMP_LW/lutris-wine-main" && \
            make_install
            [ -d "$TMP_LW" ] && \
                rm -rf "$TMP_LW"*)
    elif [ -d "/opt/lwrap" ]
        then
            (cp -rf "/opt/lwrap" "$TMP_LW" && \
            cd "$TMP_LW" && \
            make_install
            [ -d "$TMP_LW" ] && \
                rm -rf "$TMP_LW"*)
    elif [[ -d "/usr/share/lutris-wine" && -x "$SYS_LWSRC" ]]
        then
            warn_msg "Fallback to system installed Lutris Wine!"
    else
        error_msg "Failed to install Lutris Wine!"
        exit 1
    fi
    [ -x "$HOME_LWSRC" ] && \
        info_msg "Lutris Wine installed!"
}

update_lw() {
    if [ -x "$HOME_LWSRC" ]
        then
            info_msg "Checking the Lutris Wine update..."
            GIT_LW_VERSION="$(curl -s "https://raw.githubusercontent.com/VHSgunzo/lutris-wine/main/lutris-wine" 2>/dev/null|get_lw_version)"
            LW_VERSION="$(get_lw_version "$HOME_LWSRC")"
            if [[ -n "$GIT_LW_VERSION" && -n "$LW_VERSION" ]]
                then
                    if [ "$(get_lw_version "$HOME_LWSRC")" -lt "$GIT_LW_VERSION" ]
                        then
                            info_msg "Lutris Wine update..."
                            uninstall_lw
                            install_lw
                        else
                            info_msg "The latest version is already installed!"
                            touch "$HOME_LWSRC"
                    fi
                else
                    error_msg "Failed to check for updates!"
                    return 1
            fi
        else
            error_msg "Lutris Wine is not installed!"
            exit 1
    fi
}

lw_wrapper() {
    if [ ! -x "$HOME_LWSRC" ]
        then
            install_lw
    elif [ ! -x "$(find "$HOME_LWSRC" -mtime -3 -print 2>/dev/null)" ] && is_net_conn
        then
            update_lw
    fi

    [[ "$RUNSRC" =~ "lwrun" && "$(realpath "$HOME/.local/bin/lwrun" 2>/dev/null)" != "$RUNSRC" ]] && \
        mkdir -p "$HOME/.local/bin" && ln -sf "$(realpath "$RUNSRC")" "$HOME/.local/bin/lwrun"

    if [ -x "$HOME_LWSRC" ]
        then
            LWRUN="$HOME_LWSRC"
    elif [ -x "$SYS_LWSRC" ]
        then
            LWRUN="$SYS_LWSRC"
    else
        error_msg "lutris-wine not found!"
        exit 1
    fi

    "$LWRUN" "$@"
}

case $1 in
    --install) uninstall_lw "$2" ; install_lw ;;
    --update) update_lw ;;
    --uninstall) uninstall_lw "$2" ;;
    *) lw_wrapper "$@" ;;
esac
