#!/usr/bin/env bash
# Lutris Wine wrapper for Runimage container

RED='\033[1;91m'
BLUE='\033[1;94m'
GREEN='\033[1;92m'
YELLOW='\033[1;33m'
RESETCOLOR='\033[1;00m'
LW_DIR="$HOME/.local/share/LutrisWine"
LWBIN_DIR="$LW_DIR/bin"
LWSRC="$LWBIN_DIR/lutris-wine"
GIT_LWSRC="https://raw.githubusercontent.com/VHSgunzo/lutris-wine/main/lutris-wine"
GIT_LWRUN="https://github.com/VHSgunzo/runimage/releases"
HOME_DESK_APP="$HOME/.local/share/applications"
HOME_DESK_DIR="$HOME/.local/share/desktop-directories"
RUNSRCRPTH="$(realpath "$RUNSRC" 2>/dev/null)"
F_RC="$HOME/.config/fish/config.fish"
B_RC="$HOME/.bashrc"
Z_RC="$HOME/.zshrc"
HBIN_DIR="$HOME/.local/bin"
LWRUN_LN="$HBIN_DIR/lwrun"
LWRAP="$LWBIN_DIR/lwrap"
LWBASH="$LWBIN_DIR/bash"
LWRUN="$LWBIN_DIR/lwrun"
RUNIMAGE_LN="$LWBIN_DIR/runimage"

[ ! -n "$(tty|grep -v 'not a'|grep -Eo 'tty|pts')" ] && \
    NOT_TERM=1

error_msg() {
    echo -e "${RED}[ ERROR ][$(date +"%Y.%m.%d %T")]: $@ $RESETCOLOR"
    if [ "$NOT_TERM" == 1 ]
        then
            notify-send -a 'Lutris Wine Error' "$@" 2>/dev/null &
    fi
}

info_msg() {
    if [ "$QUIET_MODE" != 1 ]
        then
            echo -e "${GREEN}[ INFO ][$(date +"%Y.%m.%d %T")]: $@ $RESETCOLOR"
            if [[ "$NOT_TERM" == 1 && "$NO_NOTIFY" != 1 ]]
                then
                    notify-send -a 'Lutris Wine Info' "$@" 2>/dev/null &
            fi
    fi
}

warn_msg() {
    if [ "$QUIET_MODE" != 1 ]
        then
            echo -e "${YELLOW}[ WARNING ][$(date +"%Y.%m.%d %T")]: $@ $RESETCOLOR"
            if [[ "$NOT_TERM" == 1 && "$NO_NOTIFY" != 1 ]]
                then
                    notify-send -a 'Lutris Wine Warning' "$@" 2>/dev/null &
            fi
    fi
}

check_path() { [ -f "$1" ] && ! grep -om1 '^export PATH=.*/.local/bin' "$1" &>/dev/null ; }

add_path() { check_path "$1" && echo -e '\nexport PATH="$HOME/.local/bin:$PATH"' >> "$1" ; }

make_install() {
    if [ "$1" == "force" ]
        then QUIET_MODE=1 uninstall_lw force
        else QUIET_MODE=1 uninstall_lw update
    fi
    (IFS=$'\n'
    for DESKFL in $(grep -rm1 '^Exec=".*"' ./*|cut -d ':' -f1)
        do sed -i "s|^Exec=\".*\"|Exec=\"$LWRAP\"|g" "$DESKFL"
    done
    for DESKFL in $(grep -rm1 'Icon=/.*/lutris-wine/icons/.*.png$' ./*|cut -d ':' -f1)
        do sed -i "s|Icon=/.*/lutris-wine/icons/|Icon=$LW_DIR/icons/|g" "$DESKFL"
    done)
    if [ -x "$RUNSTATIC/bash" ]
        then
            sed -i "1 s|^.*$|#!$LWBASH|" lwrap/lwrap
            install -Dm755 "$RUNSTATIC/bash" "$LWBASH"
    fi
    install -Dm755 lutris-wine "$LWSRC"
    install -Dm755 lwrap/lwrap "$LWRAP"
    install -Dm644 LutrisWine.menu "$HOME/.config/menus/applications-merged/LutrisWine.menu"
    install -Dm644 LutrisWineService.desktop "$HOME/.local/share/kservices5/ServiceMenus/LutrisWineService.desktop"
    install -Dm755 applications/LutrisWine.desktop "$HOME/Desktop/LutrisWine.desktop"
    mkdir -p "$HOME_DESK_APP"
    mkdir -p "$HOME_DESK_DIR"
    cp -rf applications "$HOME_DESK_APP/LutrisWine"
    cp -rf directories/* "$HOME_DESK_DIR/"
    cp -rf LICENSE "$LW_DIR/"
    cp -rf themes "$LW_DIR/"
    cp -rf icons "$LW_DIR/"
    cp -rf gif "$LW_DIR/"
    cp -rf db "$LW_DIR/"
    add_path "$B_RC"
    add_path "$Z_RC"
    check_path "$F_RC" && echo -e \
        '\nset -U fish_user_paths "$HOME/.local/bin"' >> "$F_RC"
    update-desktop-database -q "$HOME_DESK_APP" &>/dev/null
    [[ -x "$RUNSRCRPTH" && ! -x "$LWRUN" ]] && \
        mv -f "$RUNSRCRPTH" "$LWRUN" && \
        chmod u+x "$LWRUN"
}

uninstall_lw() {
    if [ "$1" == "force" ] || is_lw_installed
        then
            info_msg "Removing Lutris Wine..."
            rm -rf "$HOME_DESK_APP/LutrisWine"
            rm -rf "$HOME_DESK_DIR/LutrisWine"*
            rm -rf "$HOME/Desktop/LutrisWine.desktop"
            rm -rf "$HOME/.config/menus/applications-merged/LutrisWine.menu"
            rm -rf "$HOME/.local/share/kservices5/ServiceMenus/LutrisWine"*
            if [ "$1" == "update" ]
                then
                    rm -rf "$LWSRC"
                    rm -rf "$LWRAP"
                    rm -rf "$LWBASH"
                    rm -rf "$LW_DIR/icons"
                    rm -rf "$LW_DIR/gif"
                    rm -rf "$LW_DIR/themes"
                    rm -rf "$LW_DIR/db"
                    rm -rf "$LW_DIR/LICENSE"
                    rm -rf "$LW_DIR/.lwcfgchksum"
                else
                    rm -rf "$LW_DIR"
                    rm -rf "$LWRUN_LN"
                    rm -rf "$HOME/LutrisWine"
                    rm -rf "$HBIN_DIR/runimage-lw"
                    rm -rf "$HOME_DESK_APP/LutrisWine"*
            fi
    fi
    info_msg "Lutris Wine removed!"
}

get_lw_version() {
    if [ -n "$1" ]
        then grep -m1 'LW_VERSION' "$1" 2>/dev/null|grep -Po '\d+'|sed ':a;/$/N;s/\n//;ta'
        else grep -m1 'LW_VERSION'|grep -Po '\d+'|sed ':a;/$/N;s/\n//;ta'
    fi
}

is_net_conn() {
    if is_bin_exist nc
        then nc -zw1 github.com 443 &>/dev/null
    elif is_bin_exist ping
        then ping -c 1 github.com &>/dev/null
    elif is_bin_exist curl
        then curl -Ifs github.com &>/dev/null
    elif is_bin_exist wget
        then wget --spider --quiet github.com &>/dev/null
    else return 1
    fi
}

is_lw_installed() { [[ -x "$LWSRC" && -x "$LWRUN" && -x "$LWRAP" ]] ; }

install_lw() {
    TMP_LW="/tmp/lutris-wine.$RANDOM"
    info_msg "Installing Lutris Wine..."
    if [ "$1" != "local" ] && try_dl \
        "https://github.com/VHSgunzo/lutris-wine/archive/refs/heads/main.zip" \
            "$TMP_LW.zip"
        then
            (unzip "$TMP_LW.zip" -d "$TMP_LW" &>/dev/null && \
            cd "$TMP_LW/lutris-wine-main" && \
            make_install "$1"
            [ -d "$TMP_LW" ] && \
                rm -rf "$TMP_LW"*)
    elif [ -d "/opt/lwrap" ]
        then
            (cp -rf "/opt/lwrap" "$TMP_LW" && \
            cd "$TMP_LW" && \
            make_install "$1"
            [ -d "$TMP_LW" ] && \
                rm -rf "$TMP_LW"*)
    fi
    [ ! -x "$LWRUN" ] && \
        try_dl_lwrun
    if is_lw_installed
        then
            RUNSRCRPTH="$LWRUN"
            ln_lwrun
            info_msg "Lutris Wine installed!"
        else
            error_msg "Failed to install Lutris Wine!"
            exit 1
    fi
}

update_lw() {
    if is_lw_installed
        then
            info_msg "Checking the Lutris Wine update..."
            GIT_LW_VERSION="$(NO_ARIA2C=1 try_dl "$GIT_LWSRC" \
                            /dev/stdout|& get_lw_version)"
            LW_VERSION="$(get_lw_version "$LWSRC")"
            if [[ -n "$GIT_LW_VERSION" && -n "$LW_VERSION" ]]
                then
                    if [ "$(get_lw_version "$LWSRC")" -lt "$GIT_LW_VERSION" ]
                        then
                            info_msg "Lutris Wine update..."
                            install_lw
                        else
                            info_msg "The latest version is already installed!"
                            touch "$LWSRC"
                    fi
                else
                    error_msg "Failed to check for updates!"
                    return 1
            fi
        else
            error_msg "Lutris Wine is not installed!"
            exit 1
    fi
}

ln_lwrun() {
    if [ -x "$RUNSRCRPTH" ]
        then
            if [ "$(realpath "$LWRUN_LN" 2>/dev/null)" != "$RUNSRCRPTH" ]
                then
                    info_msg "Update lwrun link..."
                    mkdir -p "$HBIN_DIR"
                    ln -sf "$RUNSRCRPTH" "$LWRUN_LN"
            fi
            if [[ -x "$LWRUN" && "$(realpath "$RUNIMAGE_LN" 2>/dev/null)" != "$LWRUN" ]]
                then
                    info_msg "Update runimage link..."
                    mkdir -p "$LWBIN_DIR"
                    ln -sfr "$LWRUN" "$RUNIMAGE_LN"
                    ln -sfr "$LWRUN" "$HBIN_DIR/runimage-lw"
            fi
    fi
}

is_bin_exist() { command -v "$@" &>/dev/null ; }

which_bin() { command -v "$@" ; }

try_dl() {
    if [ -n "$1" ]
        then
            if [ -n "$2" ]
                then
                    local FILEDIR="$(dirname "$2")"
                    local FILENAME="$(basename "$2")"
                else
                    local FILEDIR="."
                    local FILENAME="$(basename "$1")"
            fi
            [ ! -d "$FILEDIR" ] && \
                mkdir -p "$FILEDIR"
            if [ "$NO_ARIA2C" != 1 ] && is_bin_exist aria2c &>/dev/null
                then
                    aria2c -x 13 -s 13 --allow-overwrite -d "$FILEDIR" -o "$FILENAME" "$1"
            elif is_bin_exist wget &>/dev/null
                then
                    wget -q --show-progress --no-check-certificate --content-disposition \
                        -t 3 -T 5 -w 0.5 "$1" -O "$FILEDIR/$FILENAME"
            elif is_bin_exist curl &>/dev/null
                then
                    curl --insecure --fail -L "$1" -o "$FILEDIR/$FILENAME"
            else
                error_msg "Downloader not found!"
                exit 1
            fi
            return $?
    fi
    return 1
}

try_dl_lwrun() {
    info_msg "Downloading lwrun..."
    GIT_LWRUN_VERSION="$(NO_ARIA2C=1 try_dl "$GIT_LWRUN/latest" \
            /dev/stdout|& grep -m1 "Release v.*"|awk '{print$2}')"
    if [ -n "$GIT_LWRUN_VERSION" ] && try_dl \
        "$GIT_LWRUN/download/$GIT_LWRUN_VERSION/runimage.superlite" \
            "$LWRUN"
        then
            info_msg "lwrun downloaded!"
            chmod u+x "$LWRUN"
        else
            error_msg "Failed to download lwrun!"
            [ -f "$LWRUN" ] && \
                rm -rf "$LWRUN"*
            exit 1
    fi
}

case $1 in
    --uninstall) uninstall_lw "$2"
                 exit ;;
    --install) install_lw "$2"
               exit ;;
    --update) update_lw
              exit ;;
esac

if [[ "$RUNSRC" =~ "lwrun" ]]
    then
        if ! is_lw_installed
            then
                install_lw
        elif [ ! -x "$(find "$LWSRC" -mtime -3 \
            -print 2>/dev/null)" ] && is_net_conn
            then
                update_lw
        fi
        ln_lwrun
        if [ -x "$LWSRC" ]
            then
                RUN_LW="$LWSRC"
            else
                error_msg "lutris-wine not found!"
                exit 1
        fi
        "$RUN_LW" "$@"
    else
        if [ -x "$LWRUN_LN" ]
            then
                "$LWRUN_LN" "$@"
        elif [ -x "$LWRUN" ]
            then
                "$LWRUN" "$@"
        elif [ -x "$(which_bin lwrun)" ]
            then
                "$(which_bin lwrun)" "$@"
        else
            if is_net_conn
                then
                    try_dl_lwrun
                    ! is_lw_installed && \
                        install_lw
                    "$LWRUN" "$@"
                else
                    error_msg "lwrun not found, download and install it first!"
                    exit 1
            fi
        fi
fi
exit $?
