#!/bin/bash
export ENVKEY=$RANDOM
export > /tmp/envbackup$ENVKEY
export LW_DEVELOPERS="VHSgunzo"
export LW_VERSION="0.65"

export BLUE='\033[1;94m'
export RED='\033[1;91m'
export GREEN='\033[1;92m'
export YELLOW='\033[1;33m'
export RESETCOLOR='\033[1;00m'

export LW_DIR="$HOME/.local/share/LutrisWine"
export LU_DIR="$HOME/.local/share/lutris"
export THEMES_DIR="/usr/share/lutris-wine/themes"
export LW_WINE_DIR="$LW_DIR/runners/wine"
export LW_RUNTIME_DIR="$LW_DIR/runtime"
export MENU_APP_DIR="$HOME/.local/share/applications"
export LW_APP_DIR="$MENU_APP_DIR/LutrisWineApp"
export WTRX_DIR="$LW_RUNTIME_DIR/winetricks"
export LW_DB_DIR="/usr/share/lutris-wine/db"
export LU_DB="$LU_DIR/pga.db"
export LW_DEF_CFG="$LW_DIR/luwine.wcfg"
export LW_CFG="$LW_DEF_CFG"
export VKBASALT_CONFIG_FILE="$LW_DIR/vkBasalt.conf"
export RESHADE_DIR="/usr/share/reshade"
export DEF_ICO="/usr/share/lutris-wine/icon/default_icon.png"
export DEF_LOAD_GIF="/usr/share/lutris-wine/gif/default_loading.gif"
export DEF_WINEPFX="$LW_DIR/winepfx"
export DEF_CACHE="$LW_DIR/cache"
export LW_APPCFG_DIR="$LW_DIR/appcfg"
export VLK_ICD_DIR="/usr/share/vulkan/icd.d"

export LWNAME="$(basename "$BASH_SOURCE")"
export SYS_WINE="$(which -a wine 2>/dev/null|grep -v "$(basename "$LW_DIR")"|head -1)"
export SYS_LU="$(which lutris 2>/dev/null)"

init_def_config() {
    if [ -z "$LOADBAR" ]
        then
            export LOADBAR=1
    fi
    if [ -z "$LOADBARGIF" ]
        then
            export LOADBARGIF="$DEF_LOAD_GIF"
    fi
    if [ -z "$CHK_UPDATE" ]
        then
            export CHK_UPDATE="7"
    fi
    if [ -z "$WINEARCH" ]
        then
            export WINEARCH="win64"
    fi
    if [ -z "$WINEPREFIX" ]
        then
            export WINEPREFIX="$DEF_WINEPFX"
    fi
    if [ -z "$VKICDFILES" ]
        then
            export VKICDFILES="AUTO"
    fi
    if [ -z "$ESYNC" ]
        then
            export ESYNC=1
    fi
    if [ -z "$FSYNC" ]
        then
            export FSYNC=1
    fi
    if [ -z "$FAKE_CUR_RES" ]
        then
            export FAKE_CUR_RES="Disabled"
    fi
    if [ -z "$VSYNC" ]
        then
            export VSYNC="Default"
    fi
    if [ -z "$FSR" ]
        then
            export FSR="2"
    fi
    if [ -z "$PULSE_LTCY" ]
        then
            export PULSE_LTCY=1
    fi
    if [ -z "$VKBASALT" ]
        then
            export VKBASALT=1
    fi
    if [ -z "$WIN_VER" ]
        then
            export WIN_VER="10"
    fi
    if [ -z "$VKD3DCFG" ]
        then
            export VKD3DCFG="force_bindless_texel_buffer,multi_queue"
    fi
    if [ -z "$DXR" ]
        then
            export DXR="1.1"
    fi
    if [ -z "$DXVKASYNC" ]
        then
            export DXVKASYNC=1
    fi
    if [ -z "$LARGE_ADDRESS" ]
        then
            export LARGE_ADDRESS=1
    fi
    if [ -z "$SHARED_MEMORY" ]
        then
            export SHARED_MEMORY=1
    fi
    if [ -z "$DIS_LAYER_AMD" ]
        then
            export DIS_LAYER_AMD=1
    fi
    if [ -z "$US_LAYOUT" ]
        then
            export US_LAYOUT=1
    fi
    if [ -z "$WMONOVER" ]
        then
            export WMONOVER="Microsoft.Xna.Framework.*,Gac=n"
    fi
    if [ -z "$WDLLOVER" ]
        then
            export WDLLOVER='steam_api,steam_api64,steamclient,steamclient64=n;lsteamclient,winemenubuilder.exe='
    fi
    if [ -z "$WINE_THEME" ]
        then
            export WINE_THEME='Breeze Dark'
    fi
    if [ -z "$LWMANGOHUD" ]
        then
            export LWMANGOHUD='OpenGL'
    fi
    if [ -z "$FPS_LIMIT" ]
        then
            export FPS_LIMIT="75"
    fi
    if [ -z "$GAMEMODE" ]
        then
            export GAMEMODE=1
    fi
    if [ -z "$GSTREAMER" ]
        then
            export GSTREAMER=1
    fi
    if [ -z "$WD3DMODE" ]
        then
            export WD3DMODE='DXVK+NVAPI+VKD3D'
    fi
    if [ -z "$WINE_SANDBOX" ]
        then
            export WINE_SANDBOX=1
    fi
    if [ -z "$D3D_EXTRAS" ]
        then
            export D3D_EXTRAS=1
    fi
    if [ -z "$DGVOODOO2" ]
        then
            export DGVOODOO2=1
    fi
    if [ -z "$BATTLEYE" ]
        then
            export BATTLEYE=1
    fi
    if [ -z "$GL_THRD_OPTI" ]
        then
            export GL_THRD_OPTI=1
    fi
    if [ -z "$MUST_HAVE_DLL" ]
        then
            #export MUST_HAVE_DLL='Disabled'
            export MUST_HAVE_DLL='mfc42 vcrun2019'
            #export MUST_HAVE_DLL='dotnet46 xna40 dotnet20 mfc120 mfc42 msvcirt vcrun2010 vcrun2012 vcrun2013 vcrun2019 vcrun6 vcrun6sp6'
    fi
    if [[ -z "$VKBASALT_EFFECTS" && -d "$RESHADE_DIR" ]]
        then
            export VKBASALT_EFFECTS="cas:Colourfulness:Tonemap"
    elif [[ -z "$VKBASALT_EFFECTS" && ! -d "$RESHADE_DIR" ]]
        then
            export VKBASALT_EFFECTS="cas"
    fi
    if [ -z "$VKBASALT_FFX_CAS" ]
        then
            export VKBASALT_FFX_CAS="0.6"
    fi
    if [ -z "$DXVK_GIT_RELEASE_URL" ]
        then
            export DXVK_GIT_RELEASE_URL="https://github.com/doitsujin/dxvk/releases"
    fi
    if [ -z "$VKD3D_GIT_RELEASE_URL" ]
        then
            export VKD3D_GIT_RELEASE_URL="https://github.com/lutris/vkd3d/releases"
    fi
    if [ -z "$NVAPI_GIT_RELEASE_URL" ]
        then
            export NVAPI_GIT_RELEASE_URL="https://github.com/VHSgunzo/nvapi/releases"
    fi
    if [ -z "$D3D_GIT_RELEASE_URL" ]
        then
            export D3D_GIT_RELEASE_URL="https://github.com/lutris/d3d_extras/releases"
    fi
    if [ -z "$DGVO_GIT_RELEASE_URL" ]
        then
            export DGVO_GIT_RELEASE_URL="https://github.com/lutris/dgvoodoo2/releases"
    fi
    if [ -z "$WTRX_GIT_RELEASE_URL" ]
        then
            export WTRX_GIT_RELEASE_URL="https://github.com/lutris/winetricks/releases"
    fi
    if [ -z "$BUILD_GIT_RELEASE_URL" ]
        then
            export BUILD_GIT_RELEASE_URL="https://github.com/lutris/buildbot/releases"
    fi
    if [ -z "$DXVK_VERSION" ]
        then
            export DXVK_VERSION="latest"
    fi
    if [ -z "$VKD3D_VERSION" ]
        then
            export VKD3D_VERSION="latest"
    fi
    if [ -z "$DXVK_NVAPI_VERSION" ]
        then
            export DXVK_NVAPI_VERSION="latest"
    fi
    if [ -z "$D3D_EXTRAS_VERSION" ]
        then
            export D3D_EXTRAS_VERSION="latest"
    fi
    if [ -z "$DGVOODOO2_VERSION" ]
        then
            export DGVOODOO2_VERSION="latest"
    fi
}

print_var() {
    for varp in $@
        do
            echo -e "[VAR] $varp=\"${!varp}\""
    done
}

print_error() {
    if [[ "$1" == "yad" && ! -z "$2" && ! -z "$3" ]]
        then
            echo -e "${RED}ERROR: $3 $RESETCOLOR"
    elif [[ "$1" == "yad" && ! -z "$2" && -z "$3" ]]
        then
            echo -e "${RED}ERROR: $2 $RESETCOLOR"
    else
        echo -e "${RED}ERROR: $1 $RESETCOLOR"
    fi
    if [[ "$1" == "yad" && ! -z "$2" && ! -z "$3" ]]
        then
            yad --window-icon="$DEF_ICO" --image="dialog-error" --button="OK:0" --title="$2" --text="$3" --center --on-top --fixed --timeout="15" --timeout-indicator="top"
    elif [[ "$1" == "yad" && ! -z "$2" && -z "$3" ]]
        then
            yad --window-icon="$DEF_ICO" --image="dialog-error" --button="OK:0" --title="Error" --text="$2" --center --on-top --fixed --timeout="15" --timeout-indicator="top"
    fi
}

print_info() {
    if [[ "$1" == "yad" && ! -z "$2" && ! -z "$3" ]] || [[ "$1" == "notify" && ! -z "$2" && ! -z "$3" ]]
        then
            echo -e "${GREEN}INFO: $3 $RESETCOLOR"
    elif [[ "$1" == "yad" && ! -z "$2" && -z "$3" ]] || [[ "$1" == "notify" && ! -z "$2" && -z "$3" ]]
        then
            echo -e "${GREEN}INFO: $2 $RESETCOLOR"
    else
        echo -e "${GREEN}INFO: $1 $RESETCOLOR"
    fi
    if [[ "$1" == "yad" && ! -z "$2" && ! -z "$3" ]]
        then
            yad --window-icon="$DEF_ICO" --image="dialog-information" --button="OK:0" --title="$2" --text="$3" --center --on-top --fixed --timeout="15" --timeout-indicator="top"
    elif [[ "$1" == "yad" && ! -z "$2" && -z "$3" ]]
        then
            yad --window-icon="$DEF_ICO" --image="dialog-information" --button="OK:0" --title="Info" --text="$2" --center --on-top --fixed --timeout="15" --timeout-indicator="top"
    elif [[ "$1" == "notify" && ! -z "$2" && ! -z "$3" ]]
        then
            notify-send -i "$DEF_ICO" -a 'Lutris Wine' "$2" "$3"
    elif [[ "$1" == "notify" && ! -z "$2" && -z "$3" ]]
        then
            notify-send -i "$DEF_ICO" -a 'Lutris Wine' "$2"
    fi
}

print_question() {
    if [[ ! -z "$1" && ! -z "$2" ]]
        then
            yad --window-icon="$DEF_ICO" --image="dialog-question" --button="NO:1" --button="YES:0" --title="$1" --text="$2" --center --on-top --fixed
    elif [[ ! -z "$1" && -z "$2" ]]
        then
            yad --window-icon="$DEF_ICO" --image="dialog-question" --button="NO:1" --button="YES:0" --title="Question" --text="$1" --center --on-top --fixed
    fi
}

print_input() {
    if [[ ! -z "$1" && ! -z "$2" ]]
        then
            yad --window-icon="$DEF_ICO" --entry --button="EXIT:1" --button="OK:0" --title="$1" --text="$2" --center --on-top --fixed
    elif [[ ! -z "$1" && -z "$2" ]]
        then
            yad --window-icon="$DEF_ICO" --entry --button="EXIT:1" --button="OK:0" --title="Input" --text="$1" --center --on-top --fixed
    fi
}

check_lupid() {
    unset LU_PID
    export LU_PID="$(pgrep -fa python|grep lutris|awk '{print$1}')"
}

check_tray() {
    unset TRAY_PID FORCE_TRAY CHK_TRAY_PID CHK_FORCE_TRAY
    CHK_TRAY_PID="$(pgrep -fa yad|grep "\-\-notification"|grep -iF "Lutris Wine"|awk '{print $1}')"
    CHK_FORCE_TRAY="$(pgrep -fa "$LWNAME"|grep -o "noclose")"
    if [ ! -z "$CHK_TRAY_PID" ]
        then
            export TRAY_PID="$CHK_TRAY_PID"
    fi
    if [ ! -z "$CHK_FORCE_TRAY" ]
        then
            export FORCE_TRAY="$CHK_FORCE_TRAY"
    fi
}

check_wine_pids() {
    unset WINE_PIDS CHK_WINE_PIDS
    if [[ "$WINE_VERSION" == "System" || "$OLD_WINE_VERSION" == "System" ]] && [[ "$NEW_WINE_VERSION" != "System" ]]
        then
            export CHK_WINE_PIDS="$(ls -l /proc/*/exe 2>/dev/null|grep -ie "$(dirname "$SYS_WINE")"|grep -E 'wine(64)?-preloader|wineserver'|awk -F/ '{print $3}')"
    elif [[ ! -z "$OLD_WINE_VERSION" && "$OLD_WINE_VERSION" != "System" ]]
        then
            export CHK_WINE_PIDS="$(ls -l /proc/*/exe 2>/dev/null|grep -ie "$OLD_WINE_VERSION"|grep -E 'wine(64)?-preloader|wineserver'|awk -F/ '{print $3}')"
    else
        export CHK_WINE_PIDS="$(ls -l /proc/*/exe 2>/dev/null|grep -ie "$WINE_IN_USE"|grep -E 'wine(64)?-preloader|wineserver'|awk -F/ '{print $3}')"
    fi
    if [ ! -z "$CHK_WINE_PIDS" ]
        then
            export WINE_PIDS="$CHK_WINE_PIDS"
    fi
}

check_luwine_pid() {
    unset LU_WINE_PID CHK_LU_WINE_PID
    CHK_LU_WINE_PID="$(pgrep "$LWNAME")"
    if [ ! -z "$CHK_LU_WINE_PID" ]
        then
            export LU_WINE_PID="$CHK_LU_WINE_PID"
    fi
}

check_luwine_sh_pid() {
    unset LW_SH_PID CHK_LW_SH_PID CHK_LW_SH_PIDS
    export CHK_LW_SH_PIDS="$(pgrep -fa "$LWNAME"|grep "\-shell"|awk '{print$1}' 2>/dev/null)"
    for lwshpid in $CHK_LW_SH_PIDS
        do
            export CHK_LW_SH_PID="$(pgrep -faP "$lwshpid"|grep "$(echo "$TERM_APP"|awk '{print$1}')"|awk '{print$1}' 2>/dev/null)"
            if [ ! -z "$CHK_LW_SH_PID" ]
                then
                    export LW_SH_PID="$CHK_LW_SH_PID"
            fi
    done
}

check_exes() {
    unset EXE_PIDS CHK_EXES RUN_EXES RUN_EXE
    CHK_EXES="$(ps -ef|grep "$(ps -eo args|grep -iF ".exe"|rev|cut -d"\\" -f1|rev)" 2>/dev/null|grep -v 'windows'|grep -v "$LWNAME"|grep -v 'grep'|grep -v 'yad')"
    if [ ! -z "$CHK_EXES" ]
        then
            export EXE_PIDS="$(echo "$CHK_EXES"|awk '{print$2}')"
            export RUN_EXES="$(while read exepid ; do ps -p $exepid -o args|cut -d":" -f2|sed '/COMMAND/d'|sed 'y#\\#/#' ; done <<< "$EXE_PIDS")"
            export RUN_EXE=$(echo "$RUN_EXES"|grep -e "$EXE_DIR" -e "$EXE_NAME.exe" 2>/dev/null)
        else
            unset RUN_EXE
    fi
}

noclosetray() {
    if [[ ! -z "$FORCE_TRAY" ]]
        then
            while : ; do sleep 1 ; done
    fi
}

check_compositor() {
    if [[ "$DESKTOP_SESSION" == "plasma" ]]
        then
            export CMPSTR_PLASMA="qdbus org.kde.KWin /Compositor active"
            export CMPSTR_ON="qdbus org.kde.KWin /Compositor resume"
            export CMPSTR_OFF="qdbus org.kde.KWin /Compositor suspend"
            export CMPSTR_PLASMA_CHECK="$(eval $CMPSTR_PLASMA)"
    elif [[ "$DESKTOP_SESSION" == "mate" ]]
        then
            export CMPSTR_MATE="gsettings get org.mate.Marco.general compositing-manager"
            export CMPSTR_ON="gsettings set org.mate.Marco.general compositing-manager true"
            export CMPSTR_OFF="gsettings set org.mate.Marco.general compositing-manager false"
            export CMPSTR_MATE_CHECK="$(eval $CMPSTR_MATE)"
    elif [[ "$DESKTOP_SESSION" == "xfce" ]]
        then
            export CMPSTR_XFCE="xfconf-query --channel=xfwm4 --property=/general/use_compositing"
            export CMPSTR_ON="xfconf-query --channel=xfwm4 --property=/general/use_compositing --set=true"
            export CMPSTR_OFF="xfconf-query --channel=xfwm4 --property=/general/use_compositing --set=false"
            export CMPSTR_XFCE_CHECK="$(eval $CMPSTR_XFCE)"
    elif [[ "$DESKTOP_SESSION" == "deepin" ]]
        then
            export CMPSTR_ON="dbus-send --session --dest=com.deepin.WMSwitcher --type=method_call /com/deepin/WMSwitcher com.deepin.WMSwitcher.RequestSwitchWM"
            export CMPSTR_OFF="$CMPSTR_ON"
            export CMPSTR_DEEPIN="dbus-send --session --dest=com.deepin.WMSwitcher --type=method_call --print-reply=literal /com/deepin/WMSwitcher com.deepin.WMSwitcher.CurrentWM"
            export CMPSTR_DEEPIN_CHECK="$(eval $CMPSTR_DEEPIN|grep -o "wm")"
    else
        export CMPSTR_NULL=""
    fi
}

check_mono_gecko() {
    if [ "$WINE_VERSION" != "System" ]
        then
            try_mkdir "$LW_RUNTIME_DIR/gecko"
            try_mkdir "$LW_RUNTIME_DIR/mono"
            for mono_gecko in "mono" "gecko"
                do
                    if [ ! -d "$WINEDIR/share/wine/$mono_gecko" ]
                        then
                            try_ln "$LW_RUNTIME_DIR/$mono_gecko" "$WINEDIR/share/wine/"
                    elif ! check_symlink "$WINEDIR/share/wine/$mono_gecko" && [[ -d "$WINEDIR/share/wine/$mono_gecko" ]]
                        then
                            if try_cp "$WINEDIR/share/wine/$mono_gecko" "$LW_RUNTIME_DIR/"
                                then
                                    try_rm "$WINEDIR/share/wine/$mono_gecko"
                                    try_ln "$LW_RUNTIME_DIR/$mono_gecko" "$WINEDIR/share/wine/"
                            fi
                    fi
            done
    fi
    if [ "$DIS_NETCORE" == 1 ]
        then
            export WMONOVER="Disabled"
            wdllover_upd "mscoree,mshtml="
            print_info notify "MONO (.NET Core) is disabled!"
    fi
}

check_git_release() {
    if [[ "$2" == "latest" || -z "$2" ]]
        then
            CHECKDLLVERS="head -1"
            LATESTVERS=1
        else
            dll_version="$(echo $2|sed 's/^v//g')"
            CHECKDLLVERS="grep -iE '($dll_version\.tar\.xz$|$dll_version\.tar\.gz$|$dll_version\.tar\.zst$)'"
    fi
    if [ -z "$GIT_RELEASE_URL" ]
        then
            GIT_RELEASE_DEFURL="https://github.com/lutris/$1/releases"
            GREPARCHURL="grep -iE '(.tar.gz|.tar.xz|.tar.zst)'|grep -v 'tags'|grep 'href'|sed 's/.*releases//g'|cut -d'\"' -f1|awk '{print \"$GIT_RELEASE_DEFURL\" \$0}'|grep '$1'"
            GIT_RELEASE_CHK="$(curl -s "$GIT_RELEASE_DEFURL"|eval "$GREPARCHURL"|eval "$CHECKDLLVERS")"
            if [ ! -z "$GIT_RELEASE_CHK" ]
                then
                    dll_version="$(basename "$GIT_RELEASE_CHK"|sed "s/$1//"|sed -r 's/^[^0-9]+//'|sed 's/.tar.gz//'|sed 's/.tar.xz//'|sed 's/.tar.zst//')"
                    GIT_RELEASE="$GIT_RELEASE_CHK"
                    unset GIT_RELEASE_CHK
                    if [ "$1" == "dxvk-nvapi" ]
                        then
                            if [ -z "$(grep -o "DXVK_NVAPI_VERSION" "$LW_CFG")" ]
                                then
                                    echo "export DXVK_NVAPI_VERSION='v$dll_version'" >> "$LW_CFG"
                                    import_luwine_conf
                                else
                                    sed -i "s/export DXVK_NVAPI_VERSION.*/export DXVK_NVAPI_VERSION='v$dll_version'/" "$LW_CFG"
                                    import_luwine_conf
                            fi
                        else
                            if [ -z "$(grep -io "$1_version" "$LW_CFG")" ]
                                then
                                    echo "export $(echo "$1_version"|tr [:lower:] [:upper:])='v$dll_version'" >> "$LW_CFG"
                                    import_luwine_conf
                                else
                                    sed -i "s/export $(echo "$1_version"|tr [:lower:] [:upper:]).*/export $(echo "$1_version"|tr [:lower:] [:upper:])='v$dll_version'/" "$LW_CFG"
                                    import_luwine_conf
                            fi
                    fi
                    return 0
                else
                    print_error yad "$1 $2 GIT release not found! Try to Install latest Lutris release."
                    check_git_release $1
            fi
        else
            GREPARCHURL="grep -iE '(.tar.gz|.tar.xz|.tar.zst)'|grep -v 'tags'|grep 'href'|sed 's/.*releases//g'|cut -d'\"' -f1|awk '{print \"$GIT_RELEASE_URL\" \$0}'|grep '$1'"
            GIT_RELEASE_CHK="$(curl -s "$GIT_RELEASE_URL"|eval "$GREPARCHURL"|eval "$CHECKDLLVERS")"
            if [ -z "$GIT_RELEASE_CHK" ]
                then
                    if [[ ! -z "$(echo "$GIT_RELEASE_URL"|grep -o "lutris")" && "$1" == "dxvk" ]]
                        then
                            GIT_RELEASE_URL="https://github.com/doitsujin/dxvk/releases"
                            print_error yad "$1 $2 GIT release not found in Lutris repository! Try found $1 in doitsujin repository..."
                            check_git_release $1 $2
                    elif [[ ! -z "$(echo "$GIT_RELEASE_URL"|grep -o "doitsujin")" && "$1" == "dxvk" ]]
                        then
                            unset GIT_RELEASE_URL
                            print_error yad "$1 $2 GIT release not found in doitsujin repository! Try found $1 in Lutris repository..."
                            check_git_release $1 $2
                    elif [[ ! -z "$(echo "$GIT_RELEASE_URL"|grep -o "lutris")" && "$1" == "vkd3d" ]]
                        then
                            GIT_RELEASE_URL="https://github.com/HansKristian-Work/vkd3d-proton/releases"
                            print_error yad "$1 $2 GIT release not found in Lutris repository! Try found $1 in custom repository..."
                            check_git_release $1 $2
                    elif [[ ! -z "$(echo "$GIT_RELEASE_URL"|grep -o "HansKristian-Work")" && "$1" == "vkd3d" ]]
                        then
                            unset GIT_RELEASE_URL
                            print_error yad "$1 $2 GIT release not found in HansKristian-Work repository! Try found $1 in Lutris repository..."
                            check_git_release $1 $2
                    elif [[ ! ! -z "$(echo "$GIT_RELEASE_URL"|grep -o "buildbot")" && "$1" != "winetricks" ]]
                        then
                            unset GIT_RELEASE_URL
                            print_error yad "$1 $2 GIT release not found in custom repository! Try found $1 in Lutris repository..."
                            check_git_release $1 $2
                    else
                        print_error yad "Unable to check $1 GIT release!"
                        return 1
                    fi
                else
                    GIT_RELEASE="$GIT_RELEASE_CHK"
                    if [[ -z "$(echo "$GIT_RELEASE_URL"|grep -o "buildbot")" && "$1" != "winetricks" ]]
                        then
                            dll_version="$(basename "$GIT_RELEASE_CHK"|sed "s/$1//"|sed -r 's/^[^0-9]+//'|sed 's/.tar.gz//'|sed 's/.tar.xz//'|sed 's/.tar.zst//')"
                            unset GIT_RELEASE_CHK
                            if [ "$1" == "dxvk-nvapi" ]
                                then
                                    if [ -z "$(grep -o "DXVK_NVAPI_VERSION" "$LW_CFG")" ]
                                        then
                                            echo "export DXVK_NVAPI_VERSION='v$dll_version'" >> "$LW_CFG"
                                            import_luwine_conf
                                        else
                                            sed -i "s/export DXVK_NVAPI_VERSION.*/export DXVK_NVAPI_VERSION='v$dll_version'/" "$LW_CFG"
                                            import_luwine_conf
                                    fi
                                else
                                    if [ -z "$(grep -io "$1_version" "$LW_CFG")" ]
                                        then
                                            echo "export $(echo "$1_version"|tr [:lower:] [:upper:])='v$dll_version'" >> "$LW_CFG"
                                            import_luwine_conf
                                        else
                                            sed -i "s/export $(echo "$1_version"|tr [:lower:] [:upper:]).*/export $(echo "$1_version"|tr [:lower:] [:upper:])='v$dll_version'/" "$LW_CFG"
                                            import_luwine_conf
                                    fi
                            fi
                            return 0
                    fi
                    return 0
            fi
    fi
}

check_network_status() {
    curl -Is "http://www.github.com" &>/dev/null && export NETSTATUS=1 || export NETSTATUS=0
}

dll_manager() {
    check_all_dlls() {
        check_dlls_slk="$all_dlls"
        if [ ! -z "$NEEDCHKDLL" ]
            then
                check_dll_symlink $1 $2
        fi
    }
    if [ -z "$all_dlls" ]
        then
            if [[ -f "$LW_RUNTIME_DIR/$1/$2/.all_dlls" || -f "$LW_RUNTIME_DIR/$1/v$2/.all_dlls" ]]
                then
                    if [ -f "$LW_RUNTIME_DIR/$1/$2/.all_dlls" ]
                        then
                            all_dlls="$(cat "$LW_RUNTIME_DIR"/$1/$2/.all_dlls 2>/dev/null)"
                    elif [ -f "$LW_RUNTIME_DIR/$1/v$2/.all_dlls" ]
                        then
                            all_dlls="$(cat "$LW_RUNTIME_DIR"/$1/v$2/.all_dlls 2>/dev/null)"
                    fi
                else
                    for dlls_arch in "x32" "x86" "x64"
                        do
                            if [ -d "$LW_RUNTIME_DIR/$1/$2/$dlls_arch" ]
                                then
                                    all_dlls="$(ls "$LW_RUNTIME_DIR"/$1/$2/$dlls_arch/*.dll 2>/dev/null|awk -F"/" '{print $NF}' 2>/dev/null)\n$all_dlls"
                            fi
                            if [ -d "$LW_RUNTIME_DIR/$1/v$2/$dlls_arch" ]
                                then
                                    all_dlls="$(ls "$LW_RUNTIME_DIR"/$1/v$2/$dlls_arch/*.dll 2>/dev/null|awk -F"/" '{print $NF}' 2>/dev/null)\n$all_dlls"
                            fi
                    done
                    all_dlls="$(echo -en "$all_dlls"|sort -u)"
                    if [[ -d "$LW_RUNTIME_DIR/$1/$2" && ! -z "$all_dlls" ]]
                        then
                            echo "$all_dlls" > "$LW_RUNTIME_DIR"/$1/$2/.all_dlls
                    elif [[ -d "$LW_RUNTIME_DIR/$1/v$2" && ! -z "$all_dlls" ]]
                        then
                            echo "$all_dlls" > "$LW_RUNTIME_DIR"/$1/v$2/.all_dlls
                    fi
            fi
    fi
    if [[ ! -z "$all_dlls" && ! -z "$(find "$LW_RUNTIME_DIR/$1" -type d -name "$2" -mtime -$CHK_UPDATE -print 2>/dev/null)" ]]
        then
            check_all_dlls $1 $2
    elif [[ ! -z "$all_dlls" && "$CHK_UPDATE" == 0 ]]
        then
            check_all_dlls $1 $2
    elif [[ ! -z "$all_dlls" && "$NETSTATUS" == 0 ]]
        then
            check_all_dlls $1 $2
    elif [[ -z "$all_dlls" && "$NETSTATUS" != 0 ]]
        then
            export NEEDCHKDLL=1
            if ! download_dll_release $1 $2
                then
                    return 1
            fi
    elif [[ -z "$all_dlls" && "$NETSTATUS" == 0 ]]
        then
            print_error yad "DLL Manager" "No internet connection, it is not possible to download $1 $2"
            return 1
    elif [[ ! -z "$all_dlls" && ! -z "$CHK_UPDATE" && "$CHK_UPDATE" != 0 && "$NETSTATUS" != 0 && -z "$(find "$LW_RUNTIME_DIR/$1" -type d -name "$2" -mtime -$CHK_UPDATE -print 2>/dev/null)" ]] || [ ! -z "$FORCE_DLL_UPDATE" ]
        then
            export NEEDCHKDLL=1
            if download_dll_release $1 latest
                then
                    if [ -d "$LW_RUNTIME_DIR/$1/$2" ]
                        then
                            touch "$LW_RUNTIME_DIR/$1/$2"
                    elif [ -d "$LW_RUNTIME_DIR/$1/v$2" ]
                        then
                            touch "$LW_RUNTIME_DIR/$1/v$2"
                    fi
                else
                    return 1
            fi
    fi
    unset all_dlls
}

download_dll_release() {
    if check_git_release $1 $2
        then
            if [[ ! -z "$LATESTVERS" && -d "$LW_RUNTIME_DIR/$1/v$dll_version" ]]
                then
                    print_info notify "Latest $1 v$dll_version dlls already installed!" &
                    touch "$(find "$LW_RUNTIME_DIR/$1" -type d -name "v$dll_version" -print 2>/dev/null)"
                    unset LATESTVERS FORCE_DLL_UPDATE
                    dll_manager $1 v$dll_version
            elif [ ! -d "$LW_RUNTIME_DIR/$1/v$dll_version" ]
                then
                    print_info notify "Download and install $1 v$dll_version dlls..."
                    if try_download "$GIT_RELEASE" "$LW_RUNTIME_DIR/"
                        then
                            for archive_type in "gz" "xz" "zst"
                                do
                                    dll_archive="$LW_RUNTIME_DIR/$(ls $LW_RUNTIME_DIR/|grep "$dll_version.tar.${archive_type}$")"
                                    if [ -f "$dll_archive" ]
                                        then
                                            if unpack_tar_${archive_type} "$dll_archive" "$LW_RUNTIME_DIR/$1/tmp/"
                                                then
                                                    if [ "$(ls -1 "$LW_RUNTIME_DIR/$1/tmp/"|wc -l)" == 1 ]
                                                        then
                                                            try_mv "$LW_RUNTIME_DIR/$1/tmp/$(ls $LW_RUNTIME_DIR/$1/tmp/|grep "$dll_version$")" "$LW_RUNTIME_DIR/$1/v$dll_version"
                                                            try_rm "$LW_RUNTIME_DIR/$1/tmp"
                                                    elif [ "$(ls -1 "$LW_RUNTIME_DIR/$1/tmp/"|wc -l)" -ge 2 ]
                                                        then
                                                            try_mv "$LW_RUNTIME_DIR/$1/tmp" "$LW_RUNTIME_DIR/$1/v$dll_version"
                                                    fi
                                                    try_rm "$dll_archive"*
                                                    touch "$(find "$LW_RUNTIME_DIR/$1" -type d -name "v$dll_version" -print 2>/dev/null)"
                                                    unset LATESTVERS FORCE_DLL_UPDATE
                                                    dll_manager $1 v$dll_version 2>/dev/null
                                                else
                                                    try_rm "$dll_archive"*
                                                    try_rm "$LW_RUNTIME_DIR/$1/$(ls $LW_RUNTIME_DIR/$1/|grep "$dll_version$")"
                                                    download_error && dll_manager $1 v$dll_version 2>/dev/null
                                            fi
                                    fi
                            done
                        else
                            download_error && dll_manager $1 v$dll_version 2>/dev/null
                    fi
            elif [ -d "$LW_RUNTIME_DIR/$1/v$dll_version" ]
                then
                    print_info notify "$1 v$dll_version dlls already installed!" &
                    touch "$(find "$LW_RUNTIME_DIR/$1" -type d -name "v$dll_version" -print 2>/dev/null)"
                    unset LATESTVERS FORCE_DLL_UPDATE
                    dll_manager $1 v$dll_version
            fi
        else
            unset LATESTVERS FORCE_DLL_UPDATE
            return 1
    fi
}

check_dll_symlink() {
    for dll_check in $check_dlls_slk
        do
            PFX_DLL32_VER="$(readlink -f "$PFX_DLL32_PTH"/$dll_check|sed "s/.*\($1\)/\1/g"|cut -d"/" -f2)"
            PFX_DLL64_VER="$(readlink -f "$PFX_DLL64_PTH"/$dll_check|sed "s/.*\($1\)/\1/g"|cut -d"/" -f2)"
            for x32_x86 in "x32" "x86"
                do
                    if [[ -f "$LW_RUNTIME_DIR/$1/$2/$x32_x86/$dll_check" && "$PFX_DLL32_VER" != "$2" ]]
                        then
                            if try_ln "$LW_RUNTIME_DIR/$1/$2/$x32_x86/$dll_check" "$PFX_DLL32_PTH/"
                                then print_info "$dll_check version of $1 $2 doesn't match with prefix version, new link to syswow64 created!"
                            fi
                    fi
                    if [[ -f "$LW_RUNTIME_DIR/$1/v$2/$x32_x86/$dll_check" && "$PFX_DLL32_VER" != "v$2" ]]
                        then
                            if try_ln "$LW_RUNTIME_DIR/$1/v$2/$x32_x86/$dll_check" "$PFX_DLL32_PTH/"
                                then print_info "$dll_check version of $1 v$2 doesn't match with prefix version, new link to syswow64 created!"
                            fi
                    fi
            done
            if [[ -f "$LW_RUNTIME_DIR/$1/$2/x64/$dll_check" && "$PFX_DLL64_VER" != "$2" ]]
                then
                    if try_ln "$LW_RUNTIME_DIR/$1/$2/x64/$dll_check" "$PFX_DLL64_PTH/"
                        then print_info "$dll_check version of $1 $2 doesn't match with prefix version, new link to system32 created!"
                    fi
            fi
            if [[ -f "$LW_RUNTIME_DIR/$1/v$2/x64/$dll_check" && "$PFX_DLL64_VER" != "v$2" ]]
                then
                    if try_ln "$LW_RUNTIME_DIR/$1/v$2/x64/$dll_check" "$PFX_DLL64_PTH/"
                        then print_info "$dll_check version of $1 v$2 doesn't match with prefix version, new link to system32 created!"
                    fi
            fi
    done
}

check_symlink() {
    CHK_SLK_FILE="$(file "$1")"
    if [ ! -z "$(echo "$CHK_SLK_FILE"|grep -v "broken"|grep "symbolic link to"|awk '{print $1}')" ]
        then
            return 0
    elif [ ! -z "$(echo "$CHK_SLK_FILE"|grep "broken symbolic link to"|awk '{print $1}')" ]
        then
            print_error "Remove broken symlink: $1"
            unlink "$1"
            return 1
    else
        return 1
    fi
}

try_mkdir() {
    if [ ! -d "$1" ]
        then
            mkdir -p "$1" 2>/dev/null
            [ "$?" != 0 ] && print_error "Failed to create directory '$1'" ; return 1 || return 0
    fi
}

try_ln() {
    if [[ -f "$1" || -d "$1" || -L "$1" ]]
        then
            ln -sf "$@" 2>/dev/null
            [ "$?" != 0 ] && print_error "Failed to link '$1' to '$2'" || return 0
    elif [ -z "$(dirname "$2" 2>/dev/null)" ]
        then
            print_error "Destination path '$2' not found for link $1"
    else
        print_error "'$1' not found for link to '$2'"
    fi
    return 1
}

try_cp() {
    if [[ -f "$1" || -d "$1" || -L "$1" ]]
        then
            cp -rf "$@" 2>/dev/null
            [ "$?" != 0 ] && print_error "Failed to copy '$1' to '$2'" || return 0
    elif [ -z "$(dirname "$2" 2>/dev/null)" ]
        then
            print_error "Destination path for '$2' not found!"
    else
        print_error "'$1' not found for copy!"
    fi
    return 1
}

try_mv() {
    if [[ -f "$1" || -d "$1" || -L "$1" ]]
        then
            mv -f "$@" 2>/dev/null
            [ "$?" != 0 ] && print_error "Failed to move '$1' to '$2'" || return 0
    elif [ -z "$(dirname "$2" 2>/dev/null)" ]
        then
            print_error "Destination path for '$2' not found!"
    else
        print_error "'$1' not found for move!"
    fi
    return 1
}

try_rm() {
    if [[ -f "$1" || -d "$1" || -L "$1" ]]
        then
            rm -rf "$@" 2>/dev/null
            [ "$?" != 0 ] && print_error "Failed to remove '$1'" || return 0
        else
            print_error "'$1' not found for remove!"
    fi
    return 1
}

check_freespace() {
    USEDDS="$(echo "$(df -h|grep "$(echo $(mount|grep -w "on $(stat -c %m -- "$(dirname "$1")")")|awk '{print$1}')")"|awk '{print$5}'|head -1|sed 's/.$//')"
    if [ "$USEDDS" -ge "95" ]
        then
            print_error yad "Disk space error" "Not enough free disk space!"
            exit 1
    fi
}

try_download() {
    check_freespace "$2"
    try_mkdir "$2"
    wget --no-check-certificate --content-disposition -t 3 -T 5 -w 0.5 "$1" --directory-prefix="$2/" 2>&1 | \
    tr '\r' '\n' | sed -u 's/.* \([0-9]\+%\)\ \+\([0-9,.]\+.\) \(.*\)/\1\n#Downloading at \1\/, \2\/s, ETA \3/; s/^20[0-9][0-9].*/#Done./' | \
    yad --window-icon="$DEF_ICO" --progress --percentage=0 --text="Download:\t$(basename $1)\n$1" --auto-close \
        --no-escape --auto-kill --center --on-top --fixed --no-buttons --undecorated --skip-taskbar
    if [ "$?" != 0 ]
        then
            print_error "Failed to download $1"
            return 1
        else
            return 0
    fi
}

download_error() {
    yad --window-icon="$DEF_ICO" --image="dialog-error" --button="EXIT:1" --button="OK:0" --title="Network error" \
        --text="You will need to check internet connettion! \nPress OK to repeet downloading" --center --on-top --fixed
    [ "$?" != 0 ] && exit 1 || return 0
}

unpack_tar_xz() {
    set -o pipefail
    try_mkdir "$2"
    tar -Jxf "$1" -C "$2"|settingbar_nostdout
    [ "${PIPESTATUS[0]}" != 0 ] && print_error "File '$1' unpacked with error!" && return 1 || return 0
}

unpack_tar_gz() {
    set -o pipefail
    try_mkdir "$2"
    tar -xzvf "$1" -C "$2"|settingbar_nostdout
    [ "${PIPESTATUS[0]}" != 0 ] && print_error "File '$1' unpacked with error!" && return 1 || return 0
}

unpack_tar_zst() {
    set -o pipefail
    try_mkdir "$2"
    tar --use-compress-program=unzstd -xvf "$1" -C "$2"|settingbar_nostdout
    [ "${PIPESTATUS[0]}" != 0 ] && print_error "File '$1' unpacked with error!" && return 1 || return 0
}

unpack_tar() {
    set -o pipefail
    try_mkdir "$2"
    tar -xvf "$1" -C "$2"|settingbar_nostdout
    [ "${PIPESTATUS[0]}" != 0 ] && print_error "File '$1' unpacked with error!" && return 1 || return 0
}

settingbar() {
    SETTBARKEY="$RANDOM"
    SETTOUTFILE="/tmp/lwsettout$SETTBARKEY"
    tee "$SETTOUTFILE"|& zenity --window-icon="$DEF_ICO" --progress --title="Settings" --text="Updating parameters is in progress. Please wait..." --pulsate --auto-close --width=500 --height=40 --no-cancel "$SETTBARKEY" &
    tail --pid="$(pgrep -fa zenity|grep -w "$SETTBARKEY"|awk '{print$1}')" -q -f "$SETTOUTFILE"
    try_rm "$SETTOUTFILE"
}

settingbar_nostdout() {
    zenity --window-icon="$DEF_ICO" --progress --title="Settings" --text="Updating parameters is in progress. Please wait..." --pulsate --auto-close --width=500 --height=40 --no-cancel
    #yad --progress --text="Updating parameters is in progress. Please wait..." --pulsate --width=500 --height=50 --no-buttons --undecorated --center --no-escape --auto-close --skip-taskbar --on-top
}

shell_is_death() {
    while true
        do
            check_luwine_sh_pid
            if  [ ! -z "$LW_SH_PID" ]
                then
                    sleep 1
                    continue
                else
                    break
            fi
    done
}

exe_is_death() {
    while true
        do
            check_exes
            if  [ ! -z "$RUN_EXE" ]
                then
                    sleep 1
                    continue
                else
                    break
            fi
    done
}

exes_is_death() {
    while true
        do
            check_exes
            if  [ ! -z "$RUN_EXES" ]
                then
                    sleep 1
                    continue
                else
                    break
            fi
    done
}

wine_is_death() {
    while true
        do
            check_wine_pids
            if  [ ! -z "$WINE_PIDS" ]
                then
                    sleep 1
                    continue
                else
                    break
            fi
    done
}

check_display() {
    if [ ! -z "$(which xrandr 2>/dev/null)" ]
        then
            export CHK_PRIMDISPL_OUT="xrandr --current|grep -w 'connected'|grep -w 'primary'|grep '[0-9]x[0-9]'"
            export CHK_OTHDISPL_OUT="xrandr --current|grep -w 'connected'|grep -v 'primary'|grep '[0-9]x[0-9]'"
            export PRIMDISPL_OUT="$(eval $CHK_PRIMDISPL_OUT|awk '{print$1}')"
            export PRIMDISPL_RES="$(xrandr --current|sed -n -e 's/.* connected primary \([^ +]*\).*/\1/p')"
            export PRIMDISPL_RESES="$(xrandr --current|grep -a15 'primary'|grep -v '^[a-zA-Z]'|grep -o '\b.*[0-9]x[0-9]*\b'|sort -rn|awk '!seen[$0]++')"
            export OTHDISPL_OUT="$(eval $CHK_OTHDISPL_OUT|awk '{print$1}')"
            export PRIMDISPLCFG="$(eval $CHK_PRIMDISPL_OUT|sed 's/(//'| awk -F'[ \+]' '{print "--output "$1,"--primary","--mode "$4,"--pos "$5"x"$6,"--rotate "$7}' 2>/dev/null)"
            export OTHDISPLCFG="$(eval $CHK_OTHDISPL_OUT|sed 's/(//'| awk -F'[ \+]' '{print "--output "$1,"--mode "$3,"--pos "$4"x"$5,"--rotate "$6}' 2>/dev/null)"
        else
            print_error yad "Check Display" "xrandr not found in your system!"
    fi
}

dis_displ_sw() {
    if [[ "$DIS_OTH_DISPL" == 1 && -f "$LU_EXE" && "$UNSET_DISOTHDISP_SW" != 1 ]]
        then
            export CHK_DISOTHDISP_OTH="ls -1 /tmp/DISOTHDISP.* 2>/dev/null"
            displ_on() {
                if exe_is_death && [[ -f "/tmp/DISOTHDISP.$DISOTHDISP" && -z "$(eval $CHK_DISOTHDISP_OTH|grep -v $DISOTHDISP 2>/dev/null)" ]]
                    then
                        restore_resol
                        try_rm /tmp/DISOTHDISP.*
                    else
                        try_rm /tmp/DISOTHDISP.$DISOTHDISP
                fi
            }
            displ_off() {
                unset DISOTHDISPLS
                DISOTHDISP=$BASHPID
                for disdispl in $OTHDISPL_OUT
                    do
                        DISOTHDISPLS="--output $disdispl --off $DISOTHDISPLS"
                done
                if [ ! -z "$DISOTHDISPLS" ]
                    then
                        xrandr $DISOTHDISPLS
                        DISPLOFF=1
                        echo 1 > /tmp/DISOTHDISP.$DISOTHDISP
                        echo "$PRIMDISPLCFG $OTHDISPLCFG" > /tmp/SYSDISPLCFG
                fi
            }
            displ_noff() {
                DISOTHDISP=$BASHPID
                echo 1 > /tmp/DISOTHDISP.$DISOTHDISP
            }
            displ_dirty_noff() {
                check_wine_pids
                if [[ -z "$WINE_PIDS" ]]
                    then
                        try_rm /tmp/DISOTHDISP.*
                        displ_noff
                    else
                        displ_noff
                fi
            }
            displ_dirty_off() {
                check_wine_pids
                if [[ -z "$WINE_PIDS" && ! -z "$(eval $CHK_DISOTHDISP_OTH)" ]]
                    then
                        try_rm /tmp/DISOTHDISP.*
                        displ_off
                fi
            }
            if [[ -f "/tmp/FORCE_EXIT" && ! -z "$(eval $CHK_DISOTHDISP_OTH)" ]]
                then
                    restore_resol
                    try_rm /tmp/DISOTHDISP.*
            else
                if [[ ! -z "$(eval $CHK_OTHDISPL_OUT|awk '{print$1}')" && ! -z "$OTHDISPL_OUT" && -z "$(eval $CHK_DISOTHDISP_OTH)" ]]
                    then
                        displ_off
                elif [[ -z "$(eval $CHK_OTHDISPL_OUT|awk '{print$1}')" && ! -z "$DISOTHDISP" ]]
                    then
                        displ_on
                elif [[ -z "$(eval $CHK_OTHDISPL_OUT|awk '{print$1}')" && "$(eval $CHK_DISOTHDISP_OTH|wc -l)" -ge 1 ]]
                    then
                        displ_dirty_noff
                else
                    displ_dirty_off
                fi
            fi
    fi
}

check_restore_resol() {
    if [ ! -z "$1" ] ; then export RESTORE_RESOL="$1" ; fi
    if [[ "$RESTORE_RESOL" == 1 && -f "$LU_EXE" && "$UNSET_RESRESOL_SW" != 1 && "$DIS_OTH_DISPL" == 0 ]]
        then
            CHK_RESRESOL_OTH="ls -1 /tmp/RESRESOL.* 2>/dev/null"
            RESRESOL=$BASHPID
            echo 1 > "/tmp/RESRESOL.$RESRESOL"
    fi
}

check_fake_cur_res() {
    if [ ! -z "$1" ] ; then export FAKE_CUR_RES="$1" ; fi
    if [[ ! -z "$FAKE_CUR_RES" && "$FAKE_CUR_RES" != "Disabled" && ! -z "$FSR" && "$FSR" != "Disabled" ]]
        then
            export WINE_FULLSCREEN_FAKE_CURRENT_RES="$FAKE_CUR_RES"
        else
            unset WINE_FULLSCREEN_FAKE_CURRENT_RES
    fi
}

restore_resol() {
    if [[ ! -z "$PRIMDISPL_OUT" && ! -z "$OTHDISPL_OUT" && ! -f "/tmp/SYSDISPLCFG" ]]
        then
            xrandr $PRIMDISPLCFG $OTHDISPLCFG
    elif [[ ! -z "$PRIMDISPL_OUT" && -z "$OTHDISPL_OUT" && ! -f "/tmp/SYSDISPLCFG" ]]
        then
            xrandr $PRIMDISPLCFG
    elif [ -f "/tmp/SYSDISPLCFG" ]
        then
            xrandr $(cat '/tmp/SYSDISPLCFG')
            try_rm '/tmp/SYSDISPLCFG'
    else
        print_error yad "Restore Resolution" "Unable to change resolution!"
    fi
}

resol_sw() {
    if [[ -f "/tmp/FORCE_EXIT" && ! -z "$(eval $CHK_RESRESOL_OTH)" && "$DIS_OTH_DISPL" == 0 ]]
        then
            restore_resol
            try_rm /tmp/RESRESOL.*
    elif exe_is_death && [[ -f "/tmp/RESRESOL.$RESRESOL" && -z "$(eval $CHK_RESRESOL_OTH|grep -v "$RESRESOL" 2>/dev/null)" ]]
        then
            restore_resol
            try_rm "/tmp/RESRESOL.$RESRESOL" &>/dev/null
        else
            try_rm "/tmp/RESRESOL.$RESRESOL" &>/dev/null
    fi
}

check_restore_gamma() {
    if [ ! -z "$1" ] ; then export RESTORE_GAMMA="$1" ; fi
    if [[ "$RESTORE_GAMMA" == 1 && -f "$LU_EXE" && "$UNSET_RESGAMMA_SW" != 1 ]]
        then
            CHK_RESGAMMA_OTH="ls -1 /tmp/RESGAMMA.* 2>/dev/null"
            RESGAMMA=$BASHPID
            echo 1 > "/tmp/RESGAMMA.$RESGAMMA"
    fi
}

gamma_sw() {
    restore_gamma() {
        if [ ! -z "$(which xgamma 2>/dev/null)" ]
            then
                xgamma -gamma 1.0
            else
                print_error yad "Restore Gamma" "xgamma not found in your system!"
        fi
    }
    if [[ -f "/tmp/FORCE_EXIT" && ! -z "$(eval $CHK_RESGAMMA_OTH)" ]]
        then
            restore_gamma
            try_rm /tmp/RESGAMMA.*
    elif exe_is_death && [[ -f "/tmp/RESGAMMA.$RESGAMMA" && -z "$(eval $CHK_RESGAMMA_OTH|grep -v "$RESGAMMA" 2>/dev/null)" ]]
        then
            restore_gamma
            try_rm "/tmp/RESGAMMA.$RESGAMMA" &>/dev/null
        else
            try_rm "/tmp/RESGAMMA.$RESGAMMA" &>/dev/null
    fi
}

compositor_sw() {
    if [[ "$DIS_COPMOSITOR" == 1 && -z "$CMPSTR_NULL" && "$UNSET_CMPSTR_SW" != 1 && -f "$LU_EXE" ]]
        then
            export CHK_CMPSTROFF_OTH="ls -1 /tmp/CMPSTROFF.* 2>/dev/null"
            compositor_on() {
                if exe_is_death && [[ -f "/tmp/CMPSTROFF.$CMPSTROFF" && -z "$(eval $CHK_CMPSTROFF_OTH|grep -v $CMPSTROFF 2>/dev/null)" ]]
                    then
                        $CMPSTR_ON
                        try_rm /tmp/CMPSTROFF.*
                    else
                        try_rm /tmp/CMPSTROFF.$CMPSTROFF
                fi
            }
            compositor_off() {
                $CMPSTR_OFF
                CMPSTROFF=$BASHPID
                echo 1 > /tmp/CMPSTROFF.$CMPSTROFF
            }
            compositor_noff() {
                CMPSTROFF=$BASHPID
                echo 1 > /tmp/CMPSTROFF.$CMPSTROFF
            }
            cmpstr_dirty_noff() {
                check_wine_pids
                if [[ -z "$WINE_PIDS" ]]
                    then
                        try_rm /tmp/CMPSTROFF.*
                        compositor_noff
                    else
                        compositor_noff
                fi
            }
            cmpstr_dirty_off() {
                check_wine_pids
                if [[ -z "$WINE_PIDS" && ! -z "$(eval $CHK_CMPSTROFF_OTH)" ]]
                    then
                        try_rm /tmp/CMPSTROFF.*
                        compositor_off
                fi
            }
            if [[ -f "/tmp/FORCE_EXIT" && ! -z "$(eval $CHK_CMPSTROFF_OTH)" ]]
                then
                    $CMPSTR_ON
                    try_rm /tmp/CMPSTROFF.*
            elif [ ! -z "$CMPSTR_PLASMA_CHECK" ]
                then
                    if [[ "$(eval $CMPSTR_PLASMA)" == true && "$CMPSTR_PLASMA_CHECK" == true && -z "$(eval $CHK_CMPSTROFF_OTH)" ]]
                        then
                            compositor_off
                    elif [[ "$(eval $CMPSTR_PLASMA)" == false && ! -z "$CMPSTROFF" ]]
                        then
                            compositor_on
                    elif [[ "$(eval $CMPSTR_PLASMA)" == false && "$(eval $CHK_CMPSTROFF_OTH|wc -l)" -ge 1 ]]
                        then
                            cmpstr_dirty_noff
                    else
                        cmpstr_dirty_off
                    fi
            elif [ ! -z "$CMPSTR_MATE_CHECK" ]
                then
                    if [[ "$(eval $CMPSTR_MATE)" == true && "$CMPSTR_MATE_CHECK" == true && -z "$(eval $CHK_CMPSTROFF_OTH)" ]]
                        then
                            compositor_off
                    elif [[ "$(eval $CMPSTR_MATE)" == false && ! -z "$CMPSTROFF" ]]
                        then
                            compositor_on
                    elif [[ "$(eval $CMPSTR_MATE)" == false && "$(eval $CHK_CMPSTROFF_OTH|wc -l)" -ge 1 ]]
                        then
                            cmpstr_dirty_noff
                    else
                        cmpstr_dirty_off
                    fi
            elif [ ! -z "$CMPSTR_XFCE_CHECK" ]
                then
                    if [[ "$(eval $CMPSTR_XFCE)" == true && "$CMPSTR_XFCE_CHECK" == true && -z "$(eval $CHK_CMPSTROFF_OTH)" ]]
                        then
                            compositor_off
                    elif [[ "$(eval $CMPSTR_XFCE)" == false && ! -z "$CMPSTROFF" ]]
                        then
                            compositor_on
                    elif [[ "$(eval $CMPSTR_XFCE)" == false && "$(eval $CHK_CMPSTROFF_OTH|wc -l)" -ge 1 ]]
                        then
                            cmpstr_dirty_noff
                    else
                        cmpstr_dirty_off
                    fi
            elif [ ! -z "$CMPSTR_DEEPIN_CHECK" ]
                then
                    if [[ "$(eval $CMPSTR_DEEPIN|grep -o "wm")" == "wm" && "$CMPSTR_DEEPIN_CHECK" == "wm" && -z "$(eval $CHK_CMPSTROFF_OTH)" ]]
                        then
                            compositor_off
                    elif [[ "$(eval $CMPSTR_DEEPIN|grep -o "metacity")" == "metacity" && ! -z "$CMPSTROFF" ]]
                        then
                            compositor_on
                    elif [[ "$(eval $CMPSTR_DEEPIN|grep -o "metacity")" == "metacity" && "$(eval $CHK_CMPSTROFF_OTH|wc -l)" -ge 1 ]]
                        then
                            cmpstr_dirty_noff
                    else
                        cmpstr_dirty_off
                    fi
            fi
    fi
}

check_musthave_dll() {
    if [ ! -z "$1" ] ; then export MUST_HAVE_DLL="$1" ; fi
    if [[ ! -z "$MUST_HAVE_DLL" && "$MUST_HAVE_DLL" != "Disabled" ]]
        then
            if [ ! -f "$WTRX_LOG" ]
                then
                    touch "$WTRX_LOG"
            fi
            unset NEED_INSTALL_DLLS READY_INSTALL_DLL
            for need_install_dll in $MUST_HAVE_DLL
                do
                    if [[ "$need_install_dll" == "vcrun2015" || "$need_install_dll" == "vcrun2017" ]]
                        then
                            need_install_dll="vcrun2019"
                            sed -i '/vcrun2015/d' "$WTRX_LOG"
                            sed -i '/vcrun2017/d' "$WTRX_LOG"
                    elif [ "$need_install_dll" == "vcrun2019" ]
                        then
                            sed -i '/vcrun2015/d' "$WTRX_LOG"
                            sed -i '/vcrun2017/d' "$WTRX_LOG"
                    fi
                    grep "$need_install_dll" "$WTRX_LOG" &>/dev/null
                    if [ "$?" == "1" ]
                        then
                            if [ -z "$NEED_INSTALL_DLLS" ]
                                then
                                    export NEED_INSTALL_DLLS="$need_install_dll"
                                else
                                    export NEED_INSTALL_DLLS="$need_install_dll $NEED_INSTALL_DLLS"
                            fi
                            export READY_INSTALL_DLL=1
                    fi
            done
            if [ "$READY_INSTALL_DLL" == "1" ]
                then
                    export UPDPFX_LOG="$WINEPREFIX/update_pfx.log"
                    print_info notify "Try to install DLL in prefix: $NEED_INSTALL_DLLS"
                    $TERM_APP $LWSHELL -c "print_info 'Try to install DLL in prefix: $NEED_INSTALL_DLLS'|& tee -a '$UPDPFX_LOG' ; winetricks -q -f -r $NEED_INSTALL_DLLS|& tee -a '$UPDPFX_LOG'"
                    try_shutdown_wine
            fi
    fi
}

try_shutdown_wine() {
    check_wine_pids
    check_exes
    if [[ ! -z "$WINE_PIDS" && ! -z "$EXE_PIDS" ]]
        then
            print_question "Shutdown Wine" "For the changes to take effect, you will need to restart Wine! \nSave all unsaved changes in all opened applications and сlick YES to end the current session."
            if [ "$?" -eq 0 ]
                then
                    print_info yad "Shutdown Wine" "Wine and running apps will be turned off now!"
                    kill $EXE_PIDS 2>/dev/null
                    if [[ ! -z "$OLD_WINE" && -f "$OLD_WINE" ]]
                        then
                            "$OLD_WINE" wineboot -e
                    elif [ -f "$WINE" ]
                        then
                            "$WINE" wineboot -e
                    else
                        kill -9 $WINE_PIDS 2>/dev/null
                    fi
                    wine_is_death
                else
                    return 1
            fi
    elif [[ ! -z "$WINE_PIDS" && -z "$EXE_PIDS" ]]
        then
            print_info notify "For the changes to take effect, Wine will be turned off now!"
            if [[ ! -z "$OLD_WINE" && -f "$OLD_WINE" ]]
                then
                    "$OLD_WINE" wineboot -e
            elif [ -f "$WINE" ]
                then
                    "$WINE" wineboot -e
            else
                kill -9 $WINE_PIDS 2>/dev/null
            fi
            wine_is_death
    fi
}

try_fix_wrtx() {
    if [ ! -z "$(grep -o 'a3f1bf98-18f3-4036-9b68-8e6de530ce0a' "$WTRX_DIR/winetricks")" ]
        then
            sed -i 's@https://download.microsoft.com/download/a/3/f/a3f1bf98-18f3-4036-9b68-8e6de530ce0a/NetFx64.exe@https://github.com/VHSgunzo/dotnet20/releases/download/dotnet20/NetFx64.exe@' "$WTRX_DIR/winetricks"
    fi
}

vkd3dcfg_upd() {
    if [ ! -z "$VKD3D_CONFIG" ]
        then
            if [ -z "$(echo "$VKD3D_CONFIG"|grep -ow "$1" 2>/dev/null)" ]
                then
                    export VKD3D_CONFIG="${1},${VKD3D_CONFIG}"
            fi
        else
            export VKD3D_CONFIG="${1}"
    fi
}

wdllover_upd() {
    if [ ! -z "$WINEDLLOVERRIDES" ]
        then
            if [ -z "$(echo "$WINEDLLOVERRIDES"|grep -ow "$1" 2>/dev/null)" ]
                then
                    export WINEDLLOVERRIDES="${1};${WINEDLLOVERRIDES}"
            fi
        else
            export WINEDLLOVERRIDES="${1}"
    fi
}

wmonover_upd() {
    if [ ! -z "$WINE_MONO_OVERRIDES" ]
        then
            if [ -z "$(echo "$WINE_MONO_OVERRIDES"|grep -ow "$1" 2>/dev/null)" ]
                then
                    export WINE_MONO_OVERRIDES="${1};${WINE_MONO_OVERRIDES}"
            fi
        else
            export WINE_MONO_OVERRIDES="${1}"
    fi
}

reg_edit() {
    print_question "Lutris Wine Registry Editor" "Adding information can unintentionally change or delete values and cause components to stop working correctly.\nIf you do not trust the source of this information in "$1" do not add it to the registry.\nAre you sure you want to continue?"
    if [ $? -eq "0" ]
        then
            REG_BC_DIR="$WINEPREFIX/registry_$(date +'%Y-%m-%d_%H%M%S')"
            echo "Registry backup to '$REG_BC_DIR'"
            mkdir "$REG_BC_DIR" 2>/dev/null
            for regbc in $(ls "$WINEPREFIX"/*.reg) ; do try_cp "$regbc" "$REG_BC_DIR/" ; done
            $WINE regedit "$1" >/dev/null 2>&1
            print_info yad "Lutris Wine Registry Editor" "Registry backup to $REG_BC_DIR\nData from "$1" has been successfully added to Lutris Wine registry!"
    fi
}

exe2png() {
    if [[ ! -z "$(which wrestool 2>/dev/null)" && ! -z "$(which convert 2>/dev/null)" ]]
        then
            export SHRT_NAME="$(basename "$1"|sed 's/.exe//')"
            export SHRT_PATH="$(cd "$(dirname "$1")" >/dev/null 2>&1 && pwd)"
            export LUJPG="$SHRT_PATH/${SHRT_NAME}.jpg"
            export LUPNG="$SHRT_PATH/${SHRT_NAME}.png"
            if [[ -f "$LUJPG" && -f "$LUPNG" ]]
                then
                    print_info notify "Converting ico already completed!"
                else
                    cd "$SHRT_PATH"
                    wrestool -x --output=./ -t14 "$1" 2>/dev/null
                    if [ ! -z "$(ls "${SHRT_NAME}"*.ico 2>/dev/null|head -1)" ]
                        then
                            (IFS=$'\n' ; for ico in $(ls "${SHRT_NAME}"*.ico 2>/dev/null)
                                do
                                    echo -en "${GREEN}Found ${RED}"$ico" ${GREEN}and converting to PNG and JPG...\n$RESETCOLOR"
                                    convert "$ico" "$(echo "$ico"|sed 's/ico$/png/g')"  2>/dev/null
                            done)
                            try_cp "$(ls -S -1 "${SHRT_NAME}"*_*.png|head -1)" "${SHRT_NAME}".png 2>/dev/null
                            convert "${SHRT_NAME}".png "${SHRT_NAME}".jpg 2>/dev/null
                            echo -en "${RED}$(ls "${SHRT_NAME}".png 2>/dev/null)\n$RESETCOLOR"
                            echo -en "${RED}$(ls "${SHRT_NAME}".jpg 2>/dev/null)\n$RESETCOLOR"
                            print_info "CLEANUP..."
                            try_rm "${SHRT_NAME}"*.ico *_*_*.png
                            print_info notify "Converting ico from executable file completed!"
                        else
                            print_error yad "Failed to get ico from executable file!"
                    fi
            fi
        else
            print_error yad "You must install icoutils and imagemagick!"
            exit 1
    fi
}

add_to_lutris() {
    if [ -z "$SYS_LU" ]
        then
            print_error yad "Shortcuts Creator" "Lutris not found in your system!"
            exit 1
    fi
    if [ ! -z "$LU_EXE" ]
        then
            exe2png "$LU_EXE"
            export YMLTOLU="${SHRT_PATH}/${SHRT_NAME}.yaml"
            if [ -z "$ADD_APP_NAME" ]
                then
                    print_question "Shortcuts Creator" "Change application name [ $SHRT_NAME ] ?"
                    if [ $? -eq "0" ]
                        then
                            ADD_APP_NAME="$(print_input "Enter name" "Enter name for application")"
                    fi
            fi
            try_mkdir "$LU_DIR/banners"
            if [ ! -z "$ADD_APP_NAME" ]
                then
                    export SHRT_NAME="$ADD_APP_NAME"
                    try_cp "$LUJPG" "$LU_DIR"/banners/"$ADD_APP_NAME".jpg
                else
                    try_cp "$LUJPG" "$LU_DIR"/banners/
            fi
            echo "name: \"${SHRT_NAME}\"" > "$YMLTOLU"
            echo "game_slug: \"${SHRT_NAME}\"" >> "$YMLTOLU"
            echo "version: \"${SHRT_NAME}\"" >> "$YMLTOLU"
            echo "slug: \"${SHRT_NAME}\"" >> "$YMLTOLU"
            echo -e "runner: wine\n" >> "$YMLTOLU"
            echo "script:" >> "$YMLTOLU"
            echo "  game:" >> "$YMLTOLU"
            echo "    exe: \"$LU_EXE\"" >> "$YMLTOLU"
            if [ -z "$ADD_EXE_ARG" ]
                then
                    sleep 0.3
                    print_question "Shortcuts Creator" "Add launch arguments for EXE?"
                    if [ $? -eq "0" ]
                        then
                            sleep 0.3
                            ADD_EXE_ARG="$(print_input "Enter EXE arguments" "Specify additional launch arguments for EXE:")"
                    fi
            fi
            if [ ! -z "$ADD_EXE_ARG" ]
                then
                    echo "    args: "$ADD_EXE_ARG"" >> "$YMLTOLU"
            fi
            echo "  system: {}" >> "$YMLTOLU"
            echo "  wine: {}" >> "$YMLTOLU"
            LUTRIS_SKIP_INIT=1 lutris -i "$YMLTOLU" 2>/dev/null &
            ludb_md5sum1=$(md5sum "$LU_DB")
            timewait=15
            (IFS=$'\n' ; while true
                do
                    timesleep=$(($timesleep + 1))
                    if [ "$timesleep" != "$(($timewait + 1))" ]
                        then
                            sleep 1
                            ludb_md5sum2=$(md5sum "$LU_DB")
                            if [ "$ludb_md5sum1" != "$ludb_md5sum2" ]
                                then
                                    LUNEWAPP="$(ls $HOME/.config/lutris/games/"$SHRT_NAME"-*.yml 2>/dev/null)"
                                    sed -i 's/wine:\{1,\}$/wine: {}/' "$LUNEWAPP" 2>/dev/null
                                    sed -i '/  version: /d' "$LUNEWAPP" 2>/dev/null
                                    LUADDPID="$(ps -ef|grep "lutris -i"|grep -iF "$(basename "$YMLTOLU")"|grep -v grep|awk '{print$2}')"
                                    if [ ! -z "$LUADDPID" ]
                                        then
                                            print_question "Shortcuts Creator" "Application successfully added to Lutris! \nDo you want to close Lutris?"
                                            if [ $? -eq "0" ]
                                                then
                                                    kill -9 "$LUADDPID" 2>/dev/null
                                            fi
                                    fi
                                    break
                            fi
                        else
                            LUADDPID="$(ps -ef|grep "lutris -i"|grep -iF "$(basename "$YMLTOLU")"|grep -v grep|awk '{print$2}')"
                            if [ ! -z "$LUADDPID" ]
                                then
                                    print_question "Shortcuts Creator" "The Lutris database hasn't changed, you may have canceled the app add to Lutris or are waiting for something else. \nDo you want to close Lutris?"
                                    if [ $? -eq "0" ]
                                        then
                                            kill "$LUADDPID" 2>/dev/null
                                    fi
                            fi
                            break
                    fi
            done)
    fi
}

create_shortcut() {
    if [ ! -z "$LU_EXE" ]
        then
            exe2png "$LU_EXE"
            export DESKF="${SHRT_PATH}/${SHRT_NAME}.desktop"
            echo "[Desktop Entry]" > "$DESKF"
            print_question "Shortcuts Creator" "Change application name [ $SHRT_NAME ] ?"
            if [ $? -eq "0" ]
                then
                    ADD_APP_NAME="$(print_input "Enter name" "Enter name for application")"
                    if [ ! -z "$ADD_APP_NAME" ]
                        then
                            export SHRT_NAME="$ADD_APP_NAME"
                    fi
            fi
            echo "Name=${SHRT_NAME}" >> "$DESKF"
            echo "Exec=\"$BASH_SOURCE\" \"$LU_EXE\"" >> "$DESKF"
            echo "Type=Application" >> "$DESKF"
            echo "Categories=Lutris Wine App" >> "$DESKF"
            echo "StartupNotify=true" >> "$DESKF"
            echo "Path="$SHRT_PATH"" >> "$DESKF"
            echo "Icon="$LUPNG"" >> "$DESKF"
            chmod u+x "$DESKF"
            echo -en "${GREEN}Creating ${RED}$(basename "$DESKF") ${GREEN}completed!\n$RESETCOLOR"
            print_question "Shortcuts Creator" "Shortcut [$(basename "$DESKF")] successfully created in the directory with the executable file. \nDo you want to add it to application menu?"
            if [ $? -eq "0" ]
                then
                    try_mkdir "$LW_APP_DIR"
                    try_cp "$DESKF" ${LW_APP_DIR}/
                    update-desktop-database -q "$MENU_APP_DIR"
            fi
            sleep 0.3
            print_question "Shortcuts Creator" "Do you want to change EXE settings?"
            if [ $? -eq "0" ]
                then
                    lu_config
            fi
            if [ ! -z "$SYS_LU" ]
                then
                    print_question "Shortcuts Creator" "Do you want to add it to Lutris?"
                    if [ $? -eq "0" ]
                        then
                            add_to_lutris
                    fi
            fi
    fi
}

lu_debug() {
    if [[ ! -z "$DEBUG" && "$DEBUG" != 0 ]]
        then
            export LOG=1
            export TERMINAL=1
            lu_prerun
            UNSET_CMPSTR_SW=1
            #export VKD3D_LOG_FILE="$EXE_PATH/${EXE_NAME}_vkd3d.log"
            #export VKBASALT_LOG_FILE="$EXE_PATH/${EXE_NAME}_vkbasalt.log"
            export WINEDEBUG="fixme-all,err+loaddll,err+dll,err+file,err+reg"
            export DXVK_LOG_LEVEL="info"
            export DXVK_NVAPI_LOG_LEVEL="info"
            export DXVK_HUD="full"
            export VKD3D_DEBUG="warn"
            export WINE_MONO_TRACE="E:System.NotImplementedException"
            export VKBASALT_LOG_LEVEL="debug"
            export TMP_DEB="/tmp/${WINE_IN_USE}_$(date +'%Y-%m-%d_%H%M%S').debug"
            export PRINT_VARS="$(print_var "WINE_IN_USE" "WINEDIR" "WINE" "WINEARCH" "WINEPREFIX" "WIN_VER" "WINEDLLOVERRIDES" "CHK_UPDATE" "PRIME" "VKBASALT_EFFECTS" \
                "WINE_MONO_OVERRIDES" "EXE_PATH" "LU_EXE" "VKD3D_CONFIG" "LD_LIBRARY_PATH" "PATH" "WINEDEBUG" "DXVK_STATE_CACHE_PATH" "SINGLE_CPU" "VSYNC" \
                "VKD3D_DEBUG" "WINE_MONO_TRACE" "VKBASALT_LOG_LEVEL" "DXVK_LOG_LEVEL" "EXE_ARG" "PULSE_LATENCY_MSEC" "EXE_CFG" "VIRTUAL_DESKTOP" "FPS_LIMIT" \
                "LW_DIR" "LW_CFG" "GSTREAMER" "HIDE_NVIDIA_GPU" "EXE_LWDB" "EXE_LWDBFL" "GST_PLUGIN_SYSTEM_PATH_1_0" "WINE_GST_REGISTRY_DIR" "RUNTIME" "WINE_SANDBOX" \
                "WINEFSYNC" "WINEFSYNC_FUTEX2" "WINE_FULLSCREEN_FSR" "WINE_FULLSCREEN_FSR_STRENGTH" "STAGING_SHARED_MEMORY" "WINEESYNC" "VKBASALT_LOG_FILE" \
                "LOG_FILE" "WINE_LARGE_ADDRESS_AWARE" "TERM_APP" "VKBASALT" "DXVK_NVAPIHACK" "RUN_MANGOHUD" "MANGOHUD_USER_CONF" "RUN_GAMEMODE" "VKD3D_LOG_FILE" "VKBASALT_CONFIG_FILE" \
                "VK_ICD_FILENAMES" "__GL_THREADED_OPTIMIZATIONS" "DXVK_STATE_CACHE_PATH" "__GLX_VENDOR_LIBRARY_NAME" "__NV_PRIME_RENDER_OFFLOAD" "WINE_FULLSCREEN_FAKE_CURRENT_RES" \
                "DXVK_STATE_CACHE" "__GL_DXVK_OPTIMIZATIONS" "__GL_SHADER_DISK_CACHE_PATH" "__GL_SHADER_DISK_CACHE" "__GL_SHADER_DISK_CACHE_SIZE" "WD3DMODE" \
                "MEDIACONV_AUDIO_DUMP_FILE" "MEDIACONV_AUDIO_TRANSCODED_FILE" "MEDIACONV_VIDEO_DUMP_FILE" "MEDIACONV_VIDEO_TRANSCODED_FILE")"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Date and time of start debug ] : $(date)" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            if [ "$WINE_VERSION" == "System" ]
                then
                    echo "[ WINE version ] : System $("$SYS_WINE" --version)" >> "$TMP_DEB"
                else
                    echo "[ WINE version ] : $WINE_IN_USE" >> "$TMP_DEB"
            fi
            [ -f "$WINEDIR/version" ] && cat "$WINEDIR/version" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Debug for program ] : $LU_EXE" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Operating system ] : $(lsb_release -d|sed 's/Description://g')" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ GLIBC version ] : $(ldd --version|grep -m1 ldd|awk '{print $NF}')" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Desktop Environment ] : $XDG_CURRENT_DESKTOP - $DESKTOP_SESSION $XDG_SESSION_TYPE" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Kernel ] : $(uname -r)" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ CPU ] :$(cat /proc/cpuinfo|grep "cpu cores"|sort -u|cut -d":" -f2)-physical $(cat /proc/cpuinfo| \
            grep "processor"|wc -l)-logical cores$(cat /proc/cpuinfo|grep "model name"|sort -u|cut -d":" -f2)" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Memory ] :" >> "$TMP_DEB"
            free -m >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            export DiskMP="$(mount|grep -w "on $(stat -c %m -- "$LU_EXE")")"
            echo "[ Disk info ] : $(echo $DiskMP|awk -F'type ' '{print $2}') " >> "$TMP_DEB"
            echo -en "$(df -h|head -1)\n$(df -h|grep "$(echo $DiskMP|awk '{print$1}')")\n" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Graphic cards and drivers ] :" >> "$TMP_DEB"
            echo $(lspci|grep -iF VGA) >> "$TMP_DEB"
            if [ ! -x "$(which glxinfo 2>/dev/null)" ]
                then
                    echo "[!]glxinfo not found[!]"  >> "$TMP_DEB"
                else
                    glxinfo -B >> "$TMP_DEB"
            fi
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            if [ ! -x "$(which vulkaninfo 2>/dev/null)" ]
                then
                    echo "[!]vulkaninfo not found[!]"  >> "$TMP_DEB"
                else
                    echo "[ Vulkan info device name ] : $(vulkaninfo|grep deviceName|cut -d"=" -f2)" >> "$TMP_DEB"
            fi
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            if [ ! -x "$(which vkcube 2>/dev/null)" ]
                then
                    echo "[!]vkcube not found[!]"  >> "$TMP_DEB"
                else
                    vkcube --c 50
                    if [ $? -eq 0 ]
                        then
                            echo "[ Vulkan cube test ] : Passed successfully!" >> "$TMP_DEB"
                        else
                            echo "[!] Vkcube test completed with error [!]" >> "$TMP_DEB"
                    fi
            fi
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            if [ ! -x "$(which gamemoderun 2>/dev/null)" ]
                then
                    echo "[!]gamemod not found[!]"  >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ -f "$WTRX_LOG" ]
                then
                    echo "[ Winetricks log ] :" >> "$TMP_DEB"
                    cat "$WTRX_LOG" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ "$WINED3D" == 1 ]
                then
                    echo "[ WineD3D ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ WineD3D ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [[ "$DXVK" == 1 && "$WINED3D" != 1 ]]
                then
                    echo "[ DXVK ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ DXVK ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ ! -z "$DXVK_VERSION" ]
                then
                    echo "[ DXVK version ] : $DXVK_VERSION" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [[ "$VKD3D" == 1 && "$WINED3D" != 1 ]]
                then
                    echo "[ VKD3D ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ VKD3D ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ ! -z "$VKD3D_VERSION" ]
                then
                    echo "[ VKD3D version ] : $VKD3D_VERSION" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [[ "$DXVK_NVAPI" == 1 && ! -z "$(lspci|grep VGA|grep -o NVIDIA)" && "$WINED3D" != 1 ]]
                then
                    echo "[ DXVK-NVAPI ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ DXVK-NVAPI ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ ! -z "$DXVK_NVAPI_VERSION" ]
                then
                    echo "[ DXVK-NVAPI version ] : $DXVK_NVAPI_VERSION" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ "$D3D_EXTRAS" == 1 ]
                then
                    echo "[ D3D EXTRAS ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ D3D EXTRAS ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ ! -z "$D3D_EXTRAS_VERSION" ]
                then
                    echo "[ D3D EXTRAS version ] : $D3D_EXTRAS_VERSION" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ "$DGVOODOO2" == 1 ]
                then
                    echo "[ DGVOODOO2 ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ DGVOODOO2 ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ ! -z "$DGVOODOO2_VERSION" ]
                then
                    echo "[ DGVOODOO2 version ] : $DGVOODOO2_VERSION" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ "$BATTLEYE" == 1 ]
                then
                    echo "[ PROTON BATTLEYE ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ PROTON BATTLEYE ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            echo "[ Network status ] : $(curl -Is "http://www.github.com" &>/dev/null && echo ONLINE || echo OFFLINE)" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo " -------------------------------------------" >> "$TMP_DEB"
            echo "|[             Starting logging            ]|" >> "$TMP_DEB"
            echo " -------------------------------------------" >> "$TMP_DEB"
        else
            lu_prerun
            export WINEDEBUG="-all"
            export DXVK_LOG_LEVEL="none"
            export VKD3D_DEBUG="none"
            export DXVK_LOG_PATH="none"
            export VKBASALT_LOG_LEVEL="error"
    fi
}

clear_log() {
    sed -i '/gstreamer-1.0/d' "$LOG_FILE"
    sed -i '/winemenubuilder.exe/d' "$LOG_FILE"
    sed -i '/.fx$/d' "$LOG_FILE"
    sed -i '/HACK_does_openvr_work/d' "$LOG_FILE"
    sed -i '/dlopen failed - libgamemode.so/d' "$LOG_FILE"
    sed -i '/Uploading is disabled/d' "$LOG_FILE"
    sed -i '/gamemodeauto: /d' "$LOG_FILE"
    sed -i '/\[MANGOHUD\] \[info\] \[config.cpp:114\] skipping config:/d' "$LOG_FILE"
}

dis_debug_msg() {
    if [[ ! -z "$DEBUG" && "$DEBUG" != 0 ]]
        then
            print_error yad "Unable to start DEBUG for this file!"
            exit 1
    fi
}

dis_cmd_msg() {
    if [[ ! -z "$TERMINAL" && "$TERMINAL" != 0 ]]
        then
            print_error yad "Unable to start TERMINAL for this file!"
            exit 1
    fi
}

check_luwine_conf() {
    try_mkdir "$LW_WINE_DIR"
    if [ ! -f "$LW_CFG" ]
        then
            try_mkdir "$LW_DIR"
    fi
    if [ -z "$(grep -wo "WINE_VERSION" "$LW_CFG" 2>/dev/null)" ]
        then
            echo "export WINE_VERSION='SETWINE'" >> "$LW_CFG"
    fi
    import_luwine_conf
}

import_luwine_conf() {
    source "$LW_CFG"
    if [ "$WINE_VERSION" == "Default" ]
        then
            export "$(grep -wo 'WINE_VERSION.*$' "$LW_DEF_CFG"|tr -d \')"
    fi
    export WINE_IN_USE="$WINE_VERSION"
    export WINEDIR="$LW_WINE_DIR/$WINE_IN_USE"
    export WINE="$WINEDIR/bin/wine"
    if [ "$WINE_VERSION" == "System" ]
        then
            unset WINEDIR
            export WINE="$SYS_WINE"
    fi
    updcfgchksum
}

updcfgchksum() {
    if [ ! -f "$LW_DIR/.lwcfgchksum" ]
        then
            export NEEDCHKDLL=1
            echo "$(md5sum "$LW_CFG"|awk '{print$1}')" > "$LW_DIR/.lwcfgchksum"
    elif [ "$(cat "$LW_DIR/.lwcfgchksum" 2>/dev/null)" != "$(md5sum "$LW_CFG"|awk '{print$1}')" ]
        then
            export NEEDCHKDLL=1
            echo "$(md5sum "$LW_CFG"|awk '{print$1}')" > "$LW_DIR/.lwcfgchksum"
    fi
}

check_def_wine() {
    if [[ ! -f "$WINE" && "$(ls -1 "$LW_WINE_DIR" 2>/dev/null|sed 's/^ *//g'|wc -l)" == 0 && ! -z "$SYS_WINE" ]]
        then
            sed -i "s/export WINE_VERSION.*/export WINE_VERSION=\'System\'/g" "$LW_CFG"
            export NEW_WINE_VERSION="System"
            export OLD_WINE_VERSION="$WINE_VERSION"
            export OLD_WINE="$WINE"
            import_luwine_conf
            print_info notify "System Wine selected as default!"
    elif [[ ! -f "$WINE" && "$(ls -1 "$LW_WINE_DIR" 2>/dev/null|sed 's/^ *//g'|wc -l)" == 0 ]]
        then
            print_info yad "Wine Manager" "Wine is not installed, you must download Wine!"
            lu_winemgr
            check_def_wine
    elif [[ ! -f "$WINE" && "$(ls -1 "$LW_WINE_DIR" 2>/dev/null|sed 's/^ *//g'|wc -l)" != 1 ]]
        then
            print_error yad "Wine Manager" "Default Wine not selected, you must select default Wine!"
            SETWINE="$(echo -e "\n$(echo "$(ls "$LW_WINE_DIR")$(if [ ! -z "$SYS_WINE" ]; then echo -e '\nSystem'; fi)"|sed ':a;N;$!ba;s/\n/\n\n/g')"| \
            yad --window-icon="$DEF_ICO" --title "Wine Manager" --column="" --column="Select default Wine:" \
                --width=300 --height=500 --list --radiolist --separator "\n" --button="EXIT:1" --button="OK:0" --center --on-top 2>/dev/null|sed '/^TRUE$/d'|sed '/^$/d')"
            if [ ! -z "$SETWINE" ]
                then
                    sed -i "s/export WINE_VERSION.*/export WINE_VERSION=\'$SETWINE\'/g" "$LW_CFG"
                    export NEW_WINE_VERSION="$SETWINE"
                    export OLD_WINE_VERSION="$WINE_VERSION"
                    export OLD_WINE="$WINE"
                    import_luwine_conf
                    print_info notify "Wine $SETWINE selected as default!"
                else
                    check_def_wine
            fi
    elif [[ ! -f "$WINE" && "$(ls -1 "$LW_WINE_DIR" 2>/dev/null|sed 's/^ *//g'|wc -l)" != 1 ]] && [[ "$PLU_INST" == 1 || "$PGE_INST" == 1 || "$WGE_INST" == 1 || "$PK4_INST" == 1 ]]
        then
            print_error yad "Wine Manager" "Default Wine not selected, you must select default Wine!"
            SETWINE="$(echo -e "\n$(echo "$(ls "$LW_WINE_DIR")$(if [ ! -z "$SYS_WINE" ]; then echo -e '\nSystem'; fi)"|sed ':a;N;$!ba;s/\n/\n\n/g')"| \
            yad --window-icon="$DEF_ICO" --title "Wine Manager" --column="" --column="Select default Wine:" \
                --width=300 --height=500 --list --radiolist --separator "\n" --button="EXIT:1" --button="OK:0" --center --on-top 2>/dev/null|sed '/^TRUE$/d'|sed '/^$/d')"
            if [ ! -z "$SETWINE" ]
                then
                    sed -i "s/export WINE_VERSION.*/export WINE_VERSION=\'$SETWINE\'/g" "$LW_CFG"
                    export NEW_WINE_VERSION="$SETWINE"
                    export OLD_WINE_VERSION="$WINE_VERSION"
                    export OLD_WINE="$WINE"
                    import_luwine_conf
                    print_info notify "Wine $SETWINE selected as default!"
                else
                    check_def_wine
            fi
    elif [[ -f "$WINE" && "$(ls -1 "$LW_WINE_DIR" 2>/dev/null|sed 's/^ *//g'|wc -l)" == 1 && "$WINE_VERSION" != "System" ]] && [[ "$PLU_INST" == 1 || "$PGE_INST" == 1 || "$WGE_INST" == 1 || "$PK4_INST" == 1 ]]
        then :
    elif [[ ! -f "$WINE" && "$(ls -1 "$LW_WINE_DIR" 2>/dev/null|sed 's/^ *//g'|wc -l)" == 1 ]] && [[ "$PLU_INST" == 1 || "$PGE_INST" == 1 || "$WGE_INST" == 1 || "$PK4_INST" == 1 ]]
        then
            export SETWINE="$(ls -1 "$LW_WINE_DIR" 2>/dev/null|head -1)"
            sed -i "s/export WINE_VERSION.*/export WINE_VERSION=\'$SETWINE\'/g" "$LW_CFG"
            export NEW_WINE_VERSION="$SETWINE"
            export OLD_WINE_VERSION="$WINE_VERSION"
            export OLD_WINE="$WINE"
            import_luwine_conf
            print_info notify "Wine $SETWINE selected as default!"
    elif [[ "$PLU_INST" == 1 || "$PGE_INST" == 1 || "$WGE_INST" == 1 || "$PK4_INST" == 1 ]]
        then
            if [ -z "$(pgrep -fa yad|grep "Wine Manager"|awk '{print$1}')" ]
                then
                    print_info notify "Selecting default Wine..."
                    SETWINE="$(echo -e "\n$(echo "$(ls "$LW_WINE_DIR")$(if [ ! -z "$SYS_WINE" ]; then echo -e '\nSystem'; fi)"|sed ':a;N;$!ba;s/\n/\n\n/g')"| \
                    yad --window-icon="$DEF_ICO" --title "Wine Manager" --column="" --column="Select default Wine:" \
                        --width=300 --height=500 --list --radiolist --separator "\n" --button="EXIT:1" --button="OK:0" --center --on-top 2>/dev/null|sed '/^TRUE$/d'|sed '/^$/d')"
                    if [ ! -z "$SETWINE" ]
                        then
                            sed -i "s/export WINE_VERSION.*/export WINE_VERSION=\'$SETWINE\'/g" "$LW_CFG"
                            export NEW_WINE_VERSION="$SETWINE"
                            export OLD_WINE_VERSION="$WINE_VERSION"
                            export OLD_WINE="$WINE"
                            import_luwine_conf
                            print_info notify "Wine $SETWINE selected as default!"
                    fi
                else
                    print_error yad "Wine Manager" "Wine Manager already runing!"
            fi
    elif [[ ! -f "$WINE" && "$(ls -1 "$LW_WINE_DIR" 2>/dev/null|sed 's/^ *//g'|wc -l)" == 1 ]]
        then
            export SETWINE="$(ls -1 "$LW_WINE_DIR" 2>/dev/null|head -1)"
            sed -i "s/export WINE_VERSION.*/export WINE_VERSION=\'$SETWINE\'/g" "$LW_CFG"
            export NEW_WINE_VERSION="$SETWINE"
            export OLD_WINE_VERSION="$WINE_VERSION"
            export OLD_WINE="$WINE"
            import_luwine_conf
            print_info notify "Wine $SETWINE selected as default!"
    fi
    try_mkdir "$WINEPREFIX"
    if [[ ! -z "$NEW_WINE_VERSION" && "$NEW_WINE_VERSION" != "$OLD_WINE_VERSION" ]]
        then
            if try_shutdown_wine
                then
                    echo "$NEW_WINE_VERSION" > "$WINEPREFIX/.defwine"
            fi
    elif [ ! -f "$WINEPREFIX/.defwine" ]
        then
            echo "$WINE_VERSION" > "$WINEPREFIX/.defwine"
    fi
}

lu_prerun() {
    if [ ! -z "$LU_EXE" ]
        then
            export EXE_NAME="$(basename "$LU_EXE"|sed 's/.exe//')"
            if [ -z "$EXE_PATH" ]
                then
                    export EXE_PATH="$(cd "$(dirname "$LU_EXE")" >/dev/null 2>&1 && pwd)"
            fi
            cd "$EXE_PATH"
            export EXE_CFG="$EXE_PATH/$EXE_NAME.wcfg"
            export LW_APPCFG="$LW_APPCFG_DIR/$EXE_NAME.wcfg"
            export EXE_DIR="$(grep -o '[^/]*$' <<< "$EXE_PATH")"
            if [ "$LOG" == 1 ]
                then
                    export LOG_FILE="$EXE_PATH/${EXE_NAME}_$(date +'%Y-%m-%d_%H%M%S').log"
            fi
    elif [ ! -z "$LU_SHELL_EXE" ]
        then
            if [ -z "$LU_SHELL_EXE_PTH" ]
                then
                    export LU_SHELL_EXE_PTH="$(cd "$(dirname "$LU_SHELL_EXE")" >/dev/null 2>&1 && pwd)"
            fi
            cd "$LU_SHELL_EXE_PTH"
            if [ "$LOG" == 1 ]
                then
                    export LOG_FILE="$LU_SHELL_EXE_PTH/$(basename "$LU_SHELL_EXE")_$(date +'%Y-%m-%d_%H%M%S').log"
            fi
    elif [ ! -z "$LU_PTH" ]
        then
            cd "$LU_PTH"
    elif [ ! -z "$LU_SHELL_PTH" ]
        then
            cd "$LU_SHELL_PTH"
    else
        cd "$WINEPREFIX/drive_c"
    fi
}

lu_run() {
    dis_displ_sw 2>/dev/null
    lu_tray
    run_db_script
    loadbar_cover 2>/dev/null
    us_layout_sw
    lu_debug 2>/dev/null
    compositor_sw 2>/dev/null
    if [[ "$LOG" == 1 && "$TERMINAL" == 1 ]]
        then
            if [ ! -z "$LU_SHELL_EXE" ]
                then
                    unset LU_SHELL_PTH TERMINAL LU_SHELL_EXE
                    $TERM_APP $LWSHELL -c "echo -en '$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n\n'|& tee -a '$LOG_FILE' ; '$@'|& tee -a '$LOG_FILE'"
                    clear_log  2>/dev/null
                    xdg-open "$LOG_FILE" 2>/dev/null
            elif [ ! -z "$LU_SHELL_PTH" ]
                then
                    unset LU_SHELL_PTH TERMINAL
                    $TERM_APP $LWSHELL
            else
                $TERM_APP $LWSHELL -c "echo -en '$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n\n'|& tee -a '$LOG_FILE' ; $RUN_FPSLIMIT $RUN_SINGLE_CPU $RUN_GAMEMODE $RUN_MANGOHUD '$WINE' $RUN_VDESKTOP '$@' $EXE_ARG|& tee -a '$LOG_FILE'"
                clear_log  2>/dev/null
                xdg-open "$LOG_FILE" 2>/dev/null
            fi
    elif [ "$LOG" == 1 ]
        then
            echo -en "$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n"
            $RUN_FPSLIMIT $RUN_SINGLE_CPU $RUN_GAMEMODE $RUN_MANGOHUD "$WINE" $RUN_VDESKTOP "$@" $EXE_ARG|& tee -a "$LOG_FILE"
            clear_log  2>/dev/null
            xdg-open "$LOG_FILE" 2>/dev/null
    elif [ "$TERMINAL" == 1 ]
        then
            if [ ! -z "$LU_SHELL_EXE" ]
                then
                    if [ "$LOG" == 1 ]
                        then
                            unset LU_SHELL_EXE TERMINAL
                            $TERM_APP $LWSHELL -c "echo -en '$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n\n'|& tee -a '$LOG_FILE' ; '$@'|& tee -a '$LOG_FILE'"
                            clear_log  2>/dev/null
                            xdg-open "$LOG_FILE" 2>/dev/null
                        else
                            unset LU_SHELL_EXE TERMINAL
                            $TERM_APP $LWSHELL -c "$@"
                    fi
            elif [ ! -z "$LU_SHELL_PTH" ]
                then
                    unset LU_SHELL_PTH TERMINAL
                    $TERM_APP $LWSHELL
            else
                if [ ! -z "$LU_LNK" ]
                    then
                        export TMP_OUT="/tmp/${WINE_IN_USE}_$(date +'%Y-%m-%d_%H%M%S').out"
                        $TERM_APP $LWSHELL -c "echo -en '$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n' ; $RUN_FPSLIMIT $RUN_SINGLE_CPU $RUN_GAMEMODE $RUN_MANGOHUD '$WINE' $RUN_VDESKTOP '$@' $EXE_ARG|& tee -a '$TMP_OUT'"
                    else
                        $TERM_APP $LWSHELL -c "echo -en '$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n' ; $RUN_FPSLIMIT $RUN_SINGLE_CPU $RUN_GAMEMODE $RUN_MANGOHUD '$WINE' $RUN_VDESKTOP '$@' $EXE_ARG"
                fi
            fi
    else
        echo -en "$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n"
        $RUN_FPSLIMIT $RUN_SINGLE_CPU $RUN_GAMEMODE $RUN_MANGOHUD "$WINE" $RUN_VDESKTOP "$@" $EXE_ARG
    fi
    stop_loadbar
    compositor_sw 2>/dev/null
    gamma_sw 2>/dev/null
    dis_displ_sw 2>/dev/null
    resol_sw 2>/dev/null
    try_rm "$TMP_DEB" "$TMP_OUT" &>/dev/null
    check_tray
    if [[ -z "$FORCE_TRAY" && ! -z "$TRAY_PID" ]]
        then
            if wine_is_death && shell_is_death
                then
                    check_tray; check_wine_pids; check_luwine_sh_pid
                    if [[ -z "$WINE_PIDS" && -z "$LW_SH_PID" && ! -z "$TRAY_PID" ]]
                        then
                            try_rm /tmp/envbackup* /tmp/syssett* /tmp/winesett* &>/dev/null
                            lu_killtray
                    fi
            fi
    fi
}

lu_prestart() {
    export LU_EXE="$(readlink -f "$LU_START")"
    export LU_MSI="$(basename "$LU_EXE"|grep -iF ".msi")"
    export LU_BAT="$(basename "$LU_EXE"|grep -iF ".bat")"
    export LU_REG="$(basename "$LU_EXE"|grep -iF ".reg")"
    export LU_LNK="$(basename "$LU_EXE"|grep -iF ".lnk")"
    if [[ ! -z "$LU_MSI" && ! -z "$(file "$LU_EXE"|grep "Os: Windows"|grep -o "MSI Installer")" ]]
        then
            dis_debug_msg
            UNSET_CMPSTR_SW=1
            lu_run "$LU_EXE"
    elif [ ! -z "$LU_BAT" ]
        then
            dis_debug_msg
            TERMINAL=1
            UNSET_CMPSTR_SW=1
            lu_run "$LU_EXE"
    elif [ ! -z "$LU_REG" ]
        then
            dis_debug_msg
            dis_cmd_msg
            reg_edit "$LU_EXE"
    else
        if [[ ! -z "$(file "$LU_EXE"|grep "for MS Windows"|grep -o "executable")" || ! -z "$(file "$LU_EXE"|grep "MS Windows"|grep -o "shortcut")" ]]
            then
                lu_run "$LU_EXE"
            else
                print_error yad "Unable to start Lutris Wine for this file!"
        fi
    fi
}

check_startfile() {
    if [ -f "$1" ]
        then
            LU_START="$1"
            if [ -z "$EXE_ARG" ]
                then
                    export EXE_ARG="${*:2}"
            fi
    export FULLCMDLINE="$0 '${*:1}'"
    elif [ -f "$2" ]
        then
            LU_START="$2"
            if [ -z "$EXE_ARG" ]
                then
                    export EXE_ARG="${*:3}"
            fi
    export FULLCMDLINE="$0 $1 '${*:2}'"
    else
        export FULLCMDLINE="$0 $1"
    fi
}

check_exe_wcfg() {
    check_startfile "$@"
    if [[ ! -z "$(file "$(readlink -f "$LU_START")"|grep "for MS Windows"|grep -o "executable")" && ! -z "$(readlink -f "$LU_START"|grep -o ".exe$")" ]]
        then
            export LU_EXE="$(readlink -f "$LU_START")"
            lu_prerun
            if [[ -f "$EXE_CFG" && -f "$LW_DEF_CFG" ]]
                then
                    print_info notify "Found EXE config: '$EXE_CFG'"
                    export LW_CFG="$EXE_CFG"
                    check_symlink "$LW_APPCFG"
                    if [ ! -L "$LW_APPCFG" ]
                        then
                            try_mkdir "$LW_APPCFG_DIR"
                            try_ln "$EXE_CFG" "$LW_APPCFG_DIR"
                    fi
            elif [[ -f "$EXE_CFG" && ! -f "$LW_DEF_CFG" ]]
                then
                    print_info notify "Found EXE config: '$EXE_CFG'"
                    print_error yad "EXE config not imported! You must first configure Lutris Wine!"
            fi
    fi
}

check_db_script() {
    if [ -f "$EXE_PATH/$EXE_NAME.lwdb" ]
        then
            export EXE_LWDBFL="$EXE_PATH/$EXE_NAME.lwdb"
            export EXE_LWDB=1
    elif [[ ! -f "$EXE_LWDBFL" && -f "$LW_DB_DIR/$EXE_NAME.lwdb" ]]
        then
            export EXE_LWDBFL="$LW_DB_DIR/$EXE_NAME.lwdb"
            export EXE_LWDB=1
    fi
    if [ -f "$EXE_LWDBFL" ]
        then
            if [ ! -z "$(file "$EXE_LWDBFL"|grep -wo "shell script")" ]
                then
                    print_info notify "Found EXE DB script: '$EXE_LWDBFL'"
                    if [ -z "$EXE_LWDB" ]
                        then
                            export EXE_LWDB=1
                    fi
                else
                    unset EXE_LWDBFL EXE_LWDB
                    sed -i '/export EXE_LWDBFL.*/d' "$LW_CFG" 2>/dev/null
                    sed -i "s/export EXE_LWDB=.*/export EXE_LWDB='0'/" "$LW_CFG" 2>/dev/null
                    print_error yad "DB Scripts Launcher" "EXE DB file not a shell script!"
            fi
        else
            unset EXE_LWDB
    fi
}

run_db_script() {
    if [ "$EXE_LWDB" == 1 ]
        then
            source "$EXE_LWDBFL"
            if [ "$?" == 0 ]
                then
                    print_info notify "EXE DB script launched!"
                else
                    print_error "EXE DB script not launched!"
            fi
    fi
}

check_first_run() {
    if [[ ! -f "$LW_DIR/.firstrun" && "$(cat "$LW_CFG" 2>/dev/null|wc -l)" -le 2 ]]
        then
            print_question "Lutris Wine First Run" "It looks like you are running Lutris Wine for the first time. \nWould you like to adjust the settings before the first initialization?"
            if [ "$?" -eq 0 ]
                then
                    export FIRST_RUN=1 ; lu_config
                    unset FIRST_RUN
                    import_luwine_conf
            fi
            for winemimetype in {application/x-ms-dos-executable,application/x-wine-extension-msp,application/x-msi,application/x-msdos-program,text/win-bat,application/x-ms-shortcut,text/x-ms-regedit}
                do
                    xdg-mime default LutrisWine.desktop "$winemimetype"
            done
            update-desktop-database -q "$MENU_APP_DIR"
            touch "$LW_DIR/.firstrun"
    fi
}

check_virt_desktop() {
    if [ ! -z "$1" ] ; then export VIRTUAL_DESKTOP="$1" ; fi
    if [ "$VIRTUAL_DESKTOP" == 1 ]
        then
            RUN_VDESKTOP="explorer /desktop=LutrisWine,$PRIMDISPL_RES"
        else
            unset RUN_VDESKTOP
    fi
}

lw_init() {
    if [ ! -z "$(pgrep -fa 'zenity'|grep -w 'Startup initialization'|awk '{print$1}')" ]
        then
            print_info yad "Startup initialization" "Startup initialization is in progress! Please wait..."
            while pgrep -fa 'zenity'|grep -w 'Startup initialization' &>/dev/null ; do sleep 1 ; done
    fi
    export_all_functions
    if [ "$1" == "noinitbar" ]; then :
        else
            initbar
    fi
    if [[ "$SKIP_INIT" != 1 && "$1" != "-tray" ]]
        then
            check_freespace "$BASH_SOURCE"
            check_exe_wcfg "$@"
            check_luwine_conf
            init_def_config
            check_db_script
            check_loadbar_cover
            check_network_status
            check_display
            check_shell
            check_crash_dialog
            check_def_wine
            check_winepfx
            check_vkbasalt_cfg
            check_first_run
            check_wd3dmode
            check_videodrv
            check_compositor
            check_mono_gecko
            check_wdllover
            check_wmonover
            check_exe_args
            check_other_fixes
            check_vulkan_icd
            check_mangohud
            check_vkbasalt_eff
            check_gamemode
            check_gstreamer
            check_dxvk
            check_dxvk_async
            check_dxvk-nvapi
            check_vkd3d
            check_d3d_extras
            check_dgvoodoo2
            check_wined3d
            check_vkd3dconfig
            check_dxr
            check_battleye
            check_winetricks
            check_prime
            check_esync
            check_fsync
            check_vsync
            check_fsr
            check_runtime
            check_ld_library
            check_path
            check_terminal
            check_pulse_latency
            check_reset_pulse
            check_musthave_dll
            check_win_version
            check_themes
            check_single_cpu
            check_fps_limit
            check_no_async
            check_us_switcher
            check_restore_gamma
            check_restore_resol
            check_virt_desktop
            check_fake_cur_res
        else
            if [ "$SKIP_INIT" == 1 ]
                then
                    print_info notify "Lutris Wine startup initialization is disabled! Unexpected errors may occur..."
            fi
    fi
    try_rm "$INIPRGRS" &>/dev/null
}

lu_start() {
    check_startfile "$@"
    if [ ! -z "$LU_START" ]
        then
            lu_prestart
        else
            if [[ ! -z "$DEBUG" && "$DEBUG" != 0 ]]
                then
                    export DEBUG_EXE="$(yad --window-icon="$DEF_ICO" --title "Specify the executable file to start DEBUG:" --file --file-filter="*.exe" --center --on-top  --width=900 --height=600 --button="EXIT:1" --button="OK:0")"
                    if [ -f "$DEBUG_EXE" ]
                        then
                            export DEBUG_FL="$(readlink -f "$DEBUG_EXE")"
                            if [ ! -z "$(file "$DEBUG_FL"|grep "for MS Windows"|grep -o "executable")" ]
                                then
                                    export LU_EXE="$DEBUG_FL"
                                    lu_run "$LU_EXE"
                                else
                                    print_error yad "Unable to start DEBUG for this file!"
                            fi
                    elif [ -d "$DEBUG_EXE" ]
                        then
                            print_error yad "Specify the executable file to start DEBUG!"
                            lu_start
                    fi
                else
                    export LU_START="$(yad --window-icon="$DEF_ICO" --title "Specify file to run in Lutris Wine:" --file --file-filter="*.exe *.lnk *.bat *.msi *.reg"  --center --on-top  --width=900 --height=600 --button="EXIT:1" --button="OK:0")"
                    if [ -f "$LU_START" ]
                        then
                            lu_prestart
                    elif [ -d "$LU_START" ]
                        then
                            print_error yad "Specify file to run in Lutris Wine!"
                            unset LU_START
                            lu_start
                    fi
            fi
    fi
}

lu_config() {
    if [ -z "$(pgrep -fa yad|grep -v "\-\-notification"|grep -v grep|grep -wo "Lutris Wine settings"|awk '{print$1}')" ]; then :
        else
            print_error yad "Lutris Wine settings" "Lutris Wine settings already runing!"
            exit 1
    fi
    export LWCFGKEY=$RANDOM
    WINELST="$(ls -1 -t "$LW_WINE_DIR" 2>/dev/null|grep -v '.*.tar.*') $(if [[ ! -z "$LU_EXE" && -z "$FIRST_RUN" ]]; then echo '\n Default'; fi) $(if [ ! -z "$SYS_WINE" ]; then echo '\n System'; fi)"
    WINETHEMESLST="$(ls -1 "$THEMES_DIR" 2>/dev/null|sed 's/.reg//g')"
    WDLLOVERLST="steam_api,steam_api64,steamclient,steamclient64=n;lsteamclient,winemenubuilder.exe= \n Disabled"
    WMONOOVERLST="Microsoft.Xna.Framework.*,Gac=n \n Disabled"
    WINVERLST="10 \n \n 8 \n 7 \n xp"
    WARCHLST="win64 \n win32"
    MHAVEDLLST="mfc42 vcrun2019 \n dotnet46 xna40 dotnet20 mfc120 mfc42 msvcirt vcrun2010 vcrun2012 vcrun2013 vcrun2019 vcrun6 vcrun6sp6 \n physx \n Disabled"
    TERMAPPLST="$(for whichterm in {konsole,gnome-terminal,kitty,deepin-terminal,xfce4-terminal,xterm} ; do which $whichterm 2>/dev/null ; done)"
    VSYNCLST="Enabled \n Disabled \n Default"
    MANGOHUDLST="OpenGL \n Vulkan \n Disabled"
    DXRLST="1.0 \n 1.1 \n Disabled"
    WD3DMODELST="DXVK+NVAPI \n VKD3D \n WineD3D \n DXVK+NVAPI+VKD3D"
    VKICDFILESLST="AUTO $(if [ ! -z "$(find "$VLK_ICD_DIR"/nvidia* -type f 2>/dev/null)" ]; then echo '\n Nvidia'; fi) \
                        $(if [ ! -z "$(find "$VLK_ICD_DIR"/intel* -type f 2>/dev/null)" ]; then echo '\n Intel'; fi) \
                        $(if [ ! -z "$(find "$VLK_ICD_DIR"/radeon* -type f 2>/dev/null)" ]; then echo '\n AMD'; fi) \
                        $(if [ ! -z "$(find "$VLK_ICD_DIR"/lvp* -type f 2>/dev/null)" ]; then echo '\n Lvp'; fi)"
    DXVKLST="$(ls -I "*.json" -1 -t "$LW_RUNTIME_DIR/dxvk" 2>/dev/null|grep -v '.*.tar.*') \n v1.9.4L-2 \n v1.9.4 \n latest $(if [[ ! -z "$LU_EXE" && -z "$FIRST_RUN" ]]; then echo '\n Default'; fi)"
    DXVKGITLST="https://github.com/lutris/dxvk/releases \n https://github.com/doitsujin/dxvk/releases"
    VKD3DLST="$(ls -I "*.json" -1 -t "$LW_RUNTIME_DIR/vkd3d" 2>/dev/null|grep -v '.*.tar.*') \n v2.5L-c0a3fa8 \n v2.5 \n latest $(if [[ ! -z "$LU_EXE" && -z "$FIRST_RUN" ]]; then echo '\n Default'; fi)"
    VKD3DCFGLST="force_bindless_texel_buffer,multi_queue \n Disabled"
    VKD3DGITLST="https://github.com/lutris/vkd3d/releases \n https://github.com/HansKristian-Work/vkd3d-proton/releases"
    D3DXTRLST="$(ls -I "*.json" -1 -t "$LW_RUNTIME_DIR/d3d_extras" 2>/dev/null|grep -v '.*.tar.*') \n v2 \n latest $(if [[ ! -z "$LU_EXE" && -z "$FIRST_RUN" ]]; then echo '\n Default'; fi)"
    D3DXTRGITLST="https://github.com/lutris/d3d_extras/releases"
    DXNVALST="$(ls -I "*.json" -1 -t "$LW_RUNTIME_DIR/dxvk-nvapi" 2>/dev/null|grep -v '.*.tar.*') \n v0.5-e23d450 \n v0.5.2 \n latest $(if [[ ! -z "$LU_EXE" && -z "$FIRST_RUN" ]]; then echo '\n Default'; fi)"
    DXNVAGITLST="https://github.com/lutris/dxvk-nvapi/releases \n https://github.com/VHSgunzo/nvapi/releases"
    DGVOOLST="$(ls -I "*.json" -1 -t "$LW_RUNTIME_DIR/dgvoodoo2" 2>/dev/null|grep -v '.*.tar.*') \n v2.64 \n latest $(if [[ ! -z "$LU_EXE" && -z "$FIRST_RUN" ]]; then echo '\n Default'; fi)"
    DGVOOGITLST="https://github.com/lutris/dgvoodoo2/releases"
    SEDLWPRM="sed 's/^ *//'|sed '/^[[:space:]]*$/d'|sed 's/[[:blank:]]*$//'"
    AWKFIX="awk '{ gsub(\"-\",\"\\\\-\"); print }'"
    TRLWPRM="awk '!x[\$0]++'|tr '\n' '!'|sed 's/.$//'"
    SRTLWPRM="sort -u"
    lwconfig_save() {
        LWCFGVAR="WINE_VERSION WIN_VER WINEARCH WINEPREFIX WINE_THEME WDLLOVER WMONOVER WD3DMODE DXVK_VERSION DXVK_GIT_RELEASE_URL VKD3D_VERSION \
            DXR VKD3DCFG VKD3D_GIT_RELEASE_URL DXVK_NVAPI_VERSION NVAPI_GIT_RELEASE_URL D3D_EXTRAS D3D_EXTRAS_VERSION D3D_GIT_RELEASE_URL DGVOODOO2 \
            DGVOODOO2_VERSION DGVO_GIT_RELEASE_URL MUST_HAVE_DLL FSR FAKE_CUR_RES DXVKASYNC WINE_DXGI ESYNC FSYNC GSTREAMER SHOW_WINEDBG LARGE_ADDRESS OLD_GL_STRING \
            GL_THRD_OPTI NO_WRITE_WATCH VULKAN_NO_ASYNC HIDE_NVIDIA_GPU HEAP_DELAY_FREE SHARED_MEMORY ALLOW_XIM DIS_LAYER_AMD DIS_NETCORE VIRTUAL_DESKTOP \
            BATTLEYE WINE_SANDBOX CHK_UPDATE RUNTIME PREF_SYS_LIBS EXEARGS EXE_LWDB EXE_LWDBFL LOADBAR LOADBARGIF LOG DEBUG SYS_WINETRICKS SINGLE_CPU DIS_OTH_DISPL \
            RESTORE_RESOL RESTORE_GAMMA DIS_COPMOSITOR RESET_PULSE PULSE_LTCY TERMINAL HOLD_TERMINAL LW_TERM_APP NO_TRAY US_LAYOUT VKBASALT VKBASALT_FFX_CAS \
            VKICDFILES GAMEMODE LWMANGOHUD MANGOHUD_USER_CONF MANGOHUDCFG FPS_LIMIT VSYNC PRIME"
        WCFGOUT="$(while read CFGVAR <&3 && read CFGPARAM <&4
                        do
                            if [ ! -z "$(echo "$CFGPARAM"|sed "s/''//")" ]
                                then
                                    echo "$CFGVAR=$CFGPARAM"
                            fi
                    done 3< <(echo "$LWCFGVAR"|tr ' ' '\n'|eval $SEDLWPRM|sed 's/^/export /') \
                         4< <(echo -e "$(cat /tmp/winesett$LWCFGKEY 2>/dev/null|eval $SEDLWPRM)\n$(cat /tmp/syssett$LWCFGKEY|eval $SEDLWPRM)"))"

        COUNT_FX=0
        for read_list_fx in $(cat /tmp/ressett$LWCFGKEY 2>/dev/null)
            do
                if [[ "$read_list_fx" == 1 ]]
                    then
                        export FX_RESULT+=":${RES_LST[$COUNT_FX]}"
                fi
                COUNT_FX=$(( $COUNT_FX + 1 ))
        done
        FX_RESULT="$(echo "cas$FX_RESULT"|sed 's/:://')"

        if [ ! -z "$(echo "$WCFGOUT"|head -1)" ]
            then
                echo "$WCFGOUT" > "$LW_CFG"
                echo "export VKBASALT_EFFECTS='$FX_RESULT'" >> "$LW_CFG"
                if [ "$(echo "$WCFGOUT"|grep -wo 'WINE_VERSION.*$'|cut -d'=' -f2|tr -d \')" != "$(cat "$WINEPREFIX/.defwine")" ]
                    then
                        export NEW_WINE_VERSION="$(echo "$WCFGOUT"|grep -wo 'WINE_VERSION.*$'|cut -d'=' -f2|tr -d \')"
                        export OLD_WINE_VERSION="$(cat "$WINEPREFIX/.defwine")"
                        export OLD_WINE="$WINE"
                        if [ "$NEW_WINE_VERSION" != "$WINE_VERSION" ]
                            then
                                print_info notify "Wine version changed to $NEW_WINE_VERSION"
                        fi
                fi
                if [ ! -z "$LU_EXE" ]
                    then
                        check_symlink "$LW_APPCFG"
                        if [ ! -L "$LW_APPCFG" ]
                            then
                                try_mkdir "$LW_APPCFG_DIR"
                                try_ln "$LW_CFG" "$LW_APPCFG_DIR"
                        fi
                fi
                if [[ "$1" == "init" && -z "$FIRST_RUN" ]]
                    then
                        lw_init noinitbar
                fi
        fi
    }
    lwconfig_reset() {
        try_rm "$LW_CFG" "$LW_DIR/.lwcfgchksum" &>/dev/null
        if [ ! -z "$(echo "$FULLCMDLINE"|grep -wo '\-shortcut')" ]
            then
                cleanrun "$(echo "$FULLCMDLINE"|sed 's/-shortcut /-config /')"
            else
                cleanrun "$FULLCMDLINE"
        fi
    }
    lwconfig_menu() {
        yad --plug=$LWCFGKEY --tabnum=1 --form --separator="\n" --quoted-output --bool-fmt=1 --columns=2 $(if [ $(echo "$PRIMDISPL_RES"|cut -d'x' -f2) -le 1024 ] ; then echo "--scroll" ; fi) \
            --field="Wine version::CB" "$(echo -e "$WINE_VERSION\n$(echo -e "$WINE_VERSION\n$WINELST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="Windows version::CB" "$(echo -e "$WIN_VER\n$(echo -e "$WIN_VER\n$WINVERLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM)" \
            --field="Wine architecture::CB" "$(echo -e "$WINEARCH\n$(echo -e "$WINEARCH\n$WARCHLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM)" \
            --field="Wine prefix::DIR" "$WINEPREFIX" \
            --field="Wine theme::CB" "$(echo -e "$WINE_THEME\n$(echo -e "$WINE_THEME\n$WINETHEMESLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM)" \
            --field="WINE DLL OVERRIDES::CBE" "$(echo -e "$WDLLOVER\n$(echo -e "$WDLLOVER\n$WDLLOVERLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="WINE MONO OVERRIDES::CBE" "$(echo -e "$WMONOVER\n$(echo -e "$WMONOVER\n$WMONOOVERLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="D3D mode::CB" "$(echo -e "$WD3DMODE\n$(echo -e "$WD3DMODE\n$WD3DMODELST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="DXVK version::CBE" "$(echo -e "$DXVK_VERSION\n$(echo -e "$DXVK_VERSION\n$DXVKLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="DXVK GIT::CBE" "$(echo -e "$DXVK_GIT_RELEASE_URL\n$(echo -e "$DXVK_GIT_RELEASE_URL\n$DXVKGITLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="VKD3D version::CBE" "$(echo -e "$VKD3D_VERSION\n$(echo -e "$VKD3D_VERSION\n$VKD3DLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="DXR/RTX version::CB" "$(echo -e "$DXR\n$(echo -e "$DXR\n$DXRLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM)" \
            --field="VKD3D config::CBE" "$(echo -e "$VKD3DCFG\n$(echo -e "$VKD3DCFG\n$VKD3DCFGLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="VKD3D GIT::CBE" "$(echo -e "$VKD3D_GIT_RELEASE_URL\n$(echo -e "$VKD3D_GIT_RELEASE_URL\n$VKD3DGITLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="DXVK-NVAPI version::CBE" "$(echo -e "$DXVK_NVAPI_VERSION\n$(echo -e "$DXVK_NVAPI_VERSION\n$DXNVALST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="DXVK-NVAPI GIT::CBE" "$(echo -e "$NVAPI_GIT_RELEASE_URL\n$(echo -e "$NVAPI_GIT_RELEASE_URL\n$DXNVAGITLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="D3D EXTRAS:CHK" "$D3D_EXTRAS" \
            --field="D3D EXTRAS version::CBE" "$(echo -e "$D3D_EXTRAS_VERSION\n$(echo -e "$D3D_EXTRAS_VERSION\n$D3DXTRLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="D3D EXTRAS GIT::CBE" "$(echo -e "$D3D_GIT_RELEASE_URL\n$(echo -e "$D3D_GIT_RELEASE_URL\n$D3DXTRGITLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="DGVOODOO2:CHK" "$DGVOODOO2" \
            --field="DGVOODOO2 version::CBE" "$(echo -e "$DGVOODOO2_VERSION\n$(echo -e "$DGVOODOO2_VERSION\n$DGVOOLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="DGVOODOO2 GIT::CBE" "$(echo -e "$DGVO_GIT_RELEASE_URL\n$(echo -e "$DGVO_GIT_RELEASE_URL\n$DGVOOGITLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="MUST HAVE DLL::CBE" "$(echo -e "$MUST_HAVE_DLL\n$(echo -e "$MUST_HAVE_DLL\n$MHAVEDLLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="AMD FidelityFX Super Resolution::CB" "$(echo -e "$FSR\n$(echo -e "$FSR\n$(seq 5)\n Disabled"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM)" \
            --field="WINE__FULLSCREEN__FAKE__CURRENT__RES::CB" "$(echo -e "$FAKE_CUR_RES\n$(echo -e "$FAKE_CUR_RES \n $PRIMDISPL_RESES \n Disabled"|eval $SEDLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM)" \
            --field="DXVK_ASYNC:CHK" "$DXVKASYNC" \
            --field="DXVK with Wine DXGI:CHK" "$WINE_DXGI" \
            --field="Esync:CHK" "$ESYNC" \
            --field="Fsync:CHK" "$FSYNC" \
            --field="Gstreamer:CHK" "$GSTREAMER" \
            --field="Show crash dialog (WINEDBG):CHK" "$SHOW_WINEDBG" \
            --field="WINE_LARGE_ADDRESS_AWARE:CHK" "$LARGE_ADDRESS" \
            --field="Old OpenGL String:CHK" "$OLD_GL_STRING" \
            --field="__GL_THREADED_OPTIMIZATIONS:CHK" "$GL_THRD_OPTI" \
            --field="WINE_DISABLE_WRITE_WATCH:CHK" "$NO_WRITE_WATCH" \
            --field="Disable Vulkan Async:CHK" "$VULKAN_NO_ASYNC" \
            --field="WINE_HIDE_NVIDIA_GPU:CHK" "$HIDE_NVIDIA_GPU" \
            --field="WINE_HEAP_DELAY_FREE:CHK" "$HEAP_DELAY_FREE" \
            --field="STAGING_SHARED_MEMORY:CHK" "$SHARED_MEMORY" \
            --field="WINE_ALLOW_XIM:CHK" "$ALLOW_XIM" \
            --field="DISABLE_LAYER_AMD_SWITCHABLE_GRAPHICS_1:CHK" "$DIS_LAYER_AMD" \
            --field="Disable MONO (.NET Core):CHK" "$DIS_NETCORE" \
            --field="Virtual desktop:CHK" "$VIRTUAL_DESKTOP" \
            --field="BattleEye runtime:CHK" "$BATTLEYE" \
            --field="Wine prefix sandbox:CHK" "$WINE_SANDBOX" \
        1> /tmp/winesett$LWCFGKEY &

        yad --plug=$LWCFGKEY --tabnum=2 --form --separator="\n" --quoted-output --bool-fmt=1 --columns=2 $(if [ $(echo "$PRIMDISPL_RES"|cut -d'x' -f2) -le 1024 ] ; then echo "--scroll" ; fi) \
            --field="Check update days (0-disabled)::NUM" "$CHK_UPDATE" \
            --field="Lutris runtime:CHK" "$RUNTIME" \
            --field="Prefer system libs:CHK" "$PREF_SYS_LIBS" \
            --field="EXE arguments::CBE" "$(echo "$EXE_ARG"|eval $AWKFIX)" \
            --field="Run EXE DB script:CHK" "$EXE_LWDB" \
            --field="EXE DB script::FL" "$EXE_LWDBFL" \
            --file-filter="EXE DB script (*.lwdb)| *.lwdb *.LWDB" \
            --field="Loading bar cover:CHK" "$LOADBAR" \
            --field="Loading bar cover GIF::FL" "$LOADBARGIF" \
            --file-filter="Loading bar cover (*.gif)| *.gif *.GIF" \
            --field="LOG:CHK" "$LOG" \
            --field="DEBUG:CHK" "$DEBUG" \
            --field="Use system Winetricks:CHK" "$SYS_WINETRICKS" \
            --field="Single CPU:CHK" "$SINGLE_CPU" \
            --field="Disable no primary displays:CHK" "$DIS_OTH_DISPL" \
            --field="Restore resolution:CHK" "$RESTORE_RESOL" \
            --field="Restore gamma:CHK" "$RESTORE_GAMMA" \
            --field="Disable compositor:CHK" "$DIS_COPMOSITOR" \
            --field="Reset PulseAudio:CHK" "$RESET_PULSE" \
            --field="Reduce PulseAudio latency:CHK" "$PULSE_LTCY" \
            --field="Open in terminal:CHK" "$TERMINAL" \
            --field="Hold terminal:CHK" "$HOLD_TERMINAL" \
            --field="Terminal app::CB" "$(echo -e "$LW_TERM_APP\n$(echo -e "$LW_TERM_APP\n$TERMAPPLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="Don't launch tray:CHK" "$NO_TRAY" \
            --field="Switch to US keyboard layout:CHK" "$US_LAYOUT" \
            --field="VkBasalt:CHK" "$VKBASALT" \
            --field="AMD FidelityFX Contrast Adaptive Sharpening::CB" "$(echo -e "$VKBASALT_FFX_CAS\n$(echo -e "$VKBASALT_FFX_CAS\n$(seq -f "%0.1f" 0.1 0.1 1|tr ',' '.')\n Disabled"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM)" \
            --field="Vulkan ICD loader::CB" "$(echo -e "$VKICDFILES\n$(echo -e "$VKICDFILES\n$VKICDFILESLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM)" \
            --field="GameMode:CHK" "$GAMEMODE" \
            --field="MangoHud::CB" "$(echo -e "$LWMANGOHUD\n$(echo -e "$LWMANGOHUD\n$MANGOHUDLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM)" \
            --field="MangoHud User config:CHK" "$MANGOHUD_USER_CONF" \
            --field="MangoHud config::CBE" "$(echo -e "$MANGOHUDCFG\n$(echo -e "$MANGOHUDCFG\n no_display,gpu_stats,gpu_temp,gpu_core_clock,gpu_mem_clock,gpu_power,gpu_load_change,gpu_text=GPU,cpu_stats,cpu_temp,cpu_load_change,core_load_change,cpu_color=2e97cb,cpu_text=CPU,io_color=a491d3,vram,vram_color=ad64c1,ram,ram_color=c26693,fps,engine_version,engine_color=eb5b5b,gpu_name,gpu_color=2e9762,vulkan_driver,wine,wine_color=eb5b5b,frame_timing=1,frametime_color=00ff00,show_fps_limit,resolution,vkbasalt,gamemode,background_alpha=0.4,font_size=24,background_color=020202,position=top-left,text_color=ffffff,toggle_hud=Shift_R+F12"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM|eval $AWKFIX)" \
            --field="FPS limit (0-disabled)::NUM" "$FPS_LIMIT" \
            --field="Vsync::CB" "$(echo -e "$VSYNC\n$(echo -e "$VSYNC\n$VSYNCLST"|eval $SEDLWPRM|eval $SRTLWPRM)"|eval $SEDLWPRM|eval $TRLWPRM)" \
            --field="NVIDIA Prime Render Offload:CHK" "$PRIME" \
            --file-filter="All Files | *.*" \
        1> /tmp/syssett$LWCFGKEY &

        if [ -d "$RESHADE_DIR" ]
            then
                RES_LST=($(grep ".fx$" "$VKBASALT_CONFIG_FILE" 2>/dev/null|awk '{print $1}'))
                RES_CFG=($(echo "$VKBASALT_EFFECTS"|sed 's/cas//'|sed 's/^://'|sed 's/:$//'|sed 's/::/:/'|sed 's/:/ /'))
                for add_relst in ${RES_LST[@]}
                    do
                        if [[ ! -z "$(echo "${RES_CFG[@]}"|grep -o "$add_relst")" ]]
                            then
                                RESHADE_SETT+="--field=$add_relst:CHK%TRUE%"
                            else
                                RESHADE_SETT+="--field=$add_relst:CHK%FALSE%"
                        fi
                done
        fi
        (IFS="%" ; yad --plug=$LWCFGKEY --tabnum=3 --form --separator=" " --bool-fmt=1 --columns=4 \
            $(if [ $(echo "$PRIMDISPL_RES"|cut -d'x' -f2) -le 1024 ] ; then echo "--scroll" ; fi) \
            $RESHADE_SETT \
        1> /tmp/ressett$LWCFGKEY & )

        if [ -z "$FIRST_RUN" ]
            then
                yad --plug=$LWCFGKEY --tabnum=4 --columns=3 --form $(if [ $(echo "$PRIMDISPL_RES"|cut -d'x' -f2) -le 1024 ] ; then echo "--scroll" ; fi) \
                    --field="Wine explorer:FBTN" "$LWSHELL -c 'lu_explorer'" \
                    --field="Task manager:FBTN" "$LWSHELL -c 'lu_taskmgr'" \
                    --field="Open CMD:FBTN" "$LWSHELL -c 'lu_cmd'" \
                    --field="Open SHELL:FBTN" "$LWSHELL -c 'lu_shell'" \
                    --field="Open application:FBTN" "$LWSHELL -c 'lu_start'" \
                    --field="DEBUG:FBTN" "$LWSHELL -c 'export DEBUG=1 ; lu_start'" \
                    --field="Open drive C:\:FBTN" "$LWSHELL -c 'lu_openpfx'" \
                    --field="Apps settings:FBTN" "$LWSHELL -c 'btn_tools appcfg'" \
                    --field="Wine manager:FBTN" "$LWSHELL -c 'btn_tools winemgr'" \
                    --field="Runtime updater:FBTN" "$LWSHELL -c 'btn_tools update'" \
                    --field="Winetricks:FBTN" "$LWSHELL -c 'winetricks'" \
                    --field="Control panel:FBTN" "$LWSHELL -c 'lu_control'" \
                    --field="Wine settings:FBTN" "$LWSHELL -c 'lu_winecfg'" \
                    --field="Registry editor:FBTN" "$LWSHELL -c 'lu_regedit'" \
                    --field="Wine uninstaller:FBTN" "$LWSHELL -c 'lu_uninstaller'" \
                    --field="Create shortcut:FBTN" "$LWSHELL -c 'lu_shortcut'" \
                    --field="Add app to Lutris:FBTN" "$LWSHELL -c 'export ADDTOLU=1 ; lu_shortcut'" \
                    --field="Tray:FBTN" "$LWSHELL -c '"$BASH_SOURCE" -tray noclose'" \
                    --field="Clear prefix:FBTN" "$LWSHELL -c 'lu_clearpfx'" \
                    --field="Remove menu apps:FBTN" "$LWSHELL -c 'lu_rmapp'" \
                    --field="Kill Wine processes:FBTN" "$LWSHELL -c 'lu_killwine'" \
                    --field="Kill tray:FBTN" "$LWSHELL -c 'lu_killtray'" \
                    --field="Kill running EXE:FBTN" "$LWSHELL -c 'lu_killexe'" \
                    --field="Kill SHELL:FBTN" "$LWSHELL -c 'lu_killshell'" \
                    --field="Force Exit:FBTN" "$LWSHELL -c 'lu_exit'" \
                &>/dev/null &
        fi

        check_exes
        if [[ ! -z "$LU_EXE" && -z "$RUN_EXE" && -z "$FIRST_RUN" ]]
            then
                yad --notebook --key=$LWCFGKEY --tab="Wine" --tab="System" --tab="VkBasalt Effects" --tab="Tools" --title="Lutris Wine settings for $(basename "$LU_EXE")" $(if [ $(echo "$PRIMDISPL_RES"|cut -d'x' -f2) -le 1024 ] ; then echo "--scroll" ; fi) \
                    --width=$(bc <<< "$(echo "$PRIMDISPL_RES"|cut -d'x' -f1)/1.5") --height=$(bc <<< "$(echo "$PRIMDISPL_RES"|cut -d'x' -f2)/1.5") --text-align=center --center --window-icon="$DEF_ICO" \
                    --button="EXIT:1" --button="RESET:3" --button="SAVE:0" --button="SAVE and RUN:4" 2>/dev/null
        elif [[ ! -z "$LU_EXE" && ! -z "$RUN_EXE" && -z "$FIRST_RUN" ]]
            then
                yad --notebook --key=$LWCFGKEY --tab="Wine" --tab="System" --tab="VkBasalt Effects" --tab="Tools" --title="Lutris Wine settings for $(basename "$LU_EXE")" $(if [ $(echo "$PRIMDISPL_RES"|cut -d'x' -f2) -le 1024 ] ; then echo "--scroll" ; fi) \
                    --width=$(bc <<< "$(echo "$PRIMDISPL_RES"|cut -d'x' -f1)/1.5") --height=$(bc <<< "$(echo "$PRIMDISPL_RES"|cut -d'x' -f2)/1.5") --text-align=center --center --window-icon="$DEF_ICO" \
                    --button="EXIT:1" --button="RESET:3" --button="SAVE:0" 2>/dev/null
        elif [ ! -z "$FIRST_RUN" ]
            then
                yad --notebook --key=$LWCFGKEY --tab="Wine" --tab="System" --tab="VkBasalt Effects" --title="Lutris Wine settings" $(if [ $(echo "$PRIMDISPL_RES"|cut -d'x' -f2) -le 1024 ] ; then echo "--scroll" ; fi) \
                    --width=$(bc <<< "$(echo "$PRIMDISPL_RES"|cut -d'x' -f1)/1.5") --height=$(bc <<< "$(echo "$PRIMDISPL_RES"|cut -d'x' -f2)/1.5") --text-align=center --center --window-icon="$DEF_ICO" \
                    --button="EXIT:1" --button="SAVE:0" 2>/dev/null
        else
            yad --notebook --key=$LWCFGKEY --tab="Wine" --tab="System" --tab="VkBasalt Effects" --tab="Tools" --title="Lutris Wine settings" $(if [ $(echo "$PRIMDISPL_RES"|cut -d'x' -f2) -le 1024 ] ; then echo "--scroll" ; fi) \
                --width=$(bc <<< "$(echo "$PRIMDISPL_RES"|cut -d'x' -f1)/1.5") --height=$(bc <<< "$(echo "$PRIMDISPL_RES"|cut -d'x' -f2)/1.5") --text-align=center --center --window-icon="$DEF_ICO" \
                --button="EXIT:1" --button="RESET:3" --button="SAVE:0" 2>/dev/null
        fi
        case $? in
            0) lwconfig_save init|settingbar ;;
            3) lwconfig_reset ;;
            4) lwconfig_save|settingbar
               cleanrun "'$BASH_SOURCE' '$LU_EXE'" ;;
        esac
    }

    btn_tools() {
        if [ ! -z "$1" ]
            then
                echo "$1" > "/tmp/settbtn$LWCFGKEY"
        fi
        if [ ! -z "$(pgrep -fa yad|grep "Lutris Wine settings"|awk '{print $1}')" ]
            then
                kill $(pgrep -fa yad|grep "Lutris Wine settings"|grep "\-\-key=$LWCFGKEY"|awk '{print $1}')
                kill $(pgrep -fa yad|grep "\-\-plug=$LWCFGKEY"|awk '{print $1}')
        fi
    }
    export -f btn_tools

    if [[ ! -z "$LU_EXE" && -z "$FIRST_RUN" ]]
        then
            if [[ -z "$(grep -wo 'WINE_VERSION.*$' "$EXE_CFG" 2>/dev/null)" || ! -z "$(grep -wo 'WINE_VERSION.*$' "$EXE_CFG" 2>/dev/null|grep -wo 'Default')" ]]
                then
                    export WINE_VERSION="Default"
            fi
            if [[ -z "$(grep -wo 'DXVK_VERSION.*$' "$EXE_CFG" 2>/dev/null)" || ! -z "$(grep -wo 'DXVK_VERSION.*$' "$EXE_CFG" 2>/dev/null|grep -wo 'Default')" ]]
                then
                    export DXVK_VERSION="Default"
            fi
            if [[ -z "$(grep -wo 'VKD3D_VERSION.*$' "$EXE_CFG" 2>/dev/null)" || ! -z "$(grep -wo 'VKD3D_VERSION.*$' "$EXE_CFG" 2>/dev/null|grep -wo 'Default')" ]]
                then
                    export VKD3D_VERSION="Default"
            fi
            if [[ -z "$(grep -wo 'DXVK_NVAPI_VERSION.*$' "$EXE_CFG" 2>/dev/null)" || ! -z "$(grep -wo 'DXVK_NVAPI_VERSION.*$' "$EXE_CFG" 2>/dev/null|grep -wo 'Default')" ]]
                then
                    export DXVK_NVAPI_VERSION="Default"
            fi
            if [[ -z "$(grep -wo 'D3D_EXTRAS_VERSION.*$' "$EXE_CFG" 2>/dev/null)" || ! -z "$(grep -wo 'D3D_EXTRAS_VERSION.*$' "$EXE_CFG" 2>/dev/null|grep -wo 'Default')" ]]
                then
                    export D3D_EXTRAS_VERSION="Default"
            fi
            if [[ -z "$(grep -wo 'DGVOODOO2_VERSION.*$' "$EXE_CFG" 2>/dev/null)" || ! -z "$(grep -wo 'DGVOODOO2_VERSION.*$' "$EXE_CFG" 2>/dev/null|grep -wo 'Default')" ]]
                then
                    export DGVOODOO2_VERSION="Default"
            fi
            export LW_CFG="$EXE_CFG"
            lwconfig_menu
        else
            lwconfig_menu
    fi
    try_rm "/tmp/syssett$LWCFGKEY" &>/dev/null
    try_rm "/tmp/winesett$LWCFGKEY" &>/dev/null
    try_rm "/tmp/ressett$LWCFGKEY" &>/dev/null
    if [ -f "/tmp/settbtn$LWCFGKEY" ]
        then
            SETTBTN="$(cat "/tmp/settbtn$LWCFGKEY")"
            try_rm "/tmp/settbtn$LWCFGKEY"
            case $SETTBTN in
                    winemgr) lu_winemgr
                             cleanrun "$FULLCMDLINE" ;;
                    update) lu_update
                            cleanrun "$FULLCMDLINE" ;;
                    appcfg) lu_appcfg ;;
            esac
    fi
}

cleanrun() {
    env -i $LWSHELL -c "source /tmp/envbackup$ENVKEY 2>/dev/null ; $@"
}

lu_cmd() {
    UNSET_CMPSTR_SW=1
    TERMINAL=1
    export DEBUG=0
    if [ -f "$2" ]
       then
           lu_start "$@"
    elif [ -d "$2" ]
       then
           export LU_PTH="$(readlink -f "$2")"
           lu_run cmd
    else
       lu_run cmd
    fi
}

lu_shell() {
    UNSET_CMPSTR_SW=1
    TERMINAL=1
    export DEBUG=0
    if [ -f "$2" ]
        then
            if [[ ! -z "$(file "$2"|grep "script"|grep -o "executable")" || ! -z "$(file "$2"|grep "ELF"|grep -o "executable")" ]]
                then
                    export LU_SHELL_EXE="$(readlink -f "$2")"
                    lu_run "$LU_SHELL_EXE"
                else
                    print_error yad "Lutris Wine SHELL" "Unable to start Lutris Wine for this file!"
            fi
        elif [ -d "$2" ]
            then
                export LU_SHELL_PTH="$(readlink -f "$2")"
                lu_run
        else
            export LU_SHELL_PTH="$HOME"
            lu_run
    fi
}

lu_regedit() {
    if [ -z "$(pgrep regedit.exe)" ]; then :
        else
            print_error yad "Registry Editor" "Registry Editor already runing!"
            exit 1
    fi
    UNSET_CMPSTR_SW=1
    export DEBUG=0
    unset EXE_ARG
    lu_run regedit
}

lu_control() {
    if [ -z "$(pgrep control.exe)" ]; then :
        else
            print_error yad "Control Panel" "Control Panel already runing!"
            exit 1
    fi
    UNSET_CMPSTR_SW=1
    export DEBUG=0
    unset EXE_ARG
    lu_run control
}

lu_winecfg() {
    if [ -z "$(pgrep winecfg.exe)" ]; then :
        else
            print_error yad "Wine Settings" "Wine Settings already runing!"
            exit 1
    fi
    UNSET_CMPSTR_SW=1
    export DEBUG=0
    unset EXE_ARG
    lu_run winecfg
}

lu_taskmgr() {
    if [ -z "$(pgrep taskmgr.exe)" ]; then :
        else
            print_error yad "Task Manager" "Task Manager already runing!"
            exit 1
    fi
    UNSET_CMPSTR_SW=1
    export DEBUG=0
    unset EXE_ARG
    lu_run taskmgr
}

lu_uninstaller() {
    if [ -z "$(pgrep uninstaller.exe)" ]; then :
        else
            print_error yad "Uninstaller" "Uninstaller already runing!"
            exit 1
    fi
    UNSET_CMPSTR_SW=1
    export DEBUG=0
    unset EXE_ARG
    lu_run uninstaller
}

winetricks() {
    if [ -z "$(pgrep winetricks)" ]; then :
        else
            print_error yad "Winetricks" "Winetricks already runing!"
            exit 1
    fi
    if [ -z "$READY_INSTALL_DLL" ]
        then
            loadbar_cover 2>/dev/null
    fi
    if [[ ! -z "$OLD_WINE" && -f "$OLD_WINE" ]]
        then
            export NEW_WINE="$WINE"
            export WINE="$OLD_WINE"
    fi
    if [ "$SYS_WINETRICKS" == 1 ]
        then
            if [ ! -z "$(which winetricks 2>/dev/null)" ]
                then
                    print_info notify "Using System winetricks!"
                    "$(which winetricks)" "$@"
                else
                    print_error yad "Winetricks" "Winetricks not found in your system. Using Lutris Wine winetricks!"
                    check_winetricks
                    "$WTRX_DIR/winetricks" "$@"
            fi
        else
            print_info notify "Using Lutris Wine winetricks!"
            check_winetricks
            "$WTRX_DIR/winetricks" "$@"
    fi
    if [[ ! -z "$NEW_WINE" && -f "$NEW_WINE" ]]
        then
            export WINE="$NEW_WINE"
    fi
    stop_loadbar
}

lu_openpfx() {
    xdg-open "$WINEPREFIX/drive_c/" 2>/dev/null
}

lu_exit() {
    check_tray; check_wine_pids; check_exes; check_luwine_sh_pid
    if [[ ! -z "$WINE_PIDS" || ! -z "$EXE_PIDS" || ! -z "$TRAY_PID" || ! -z "$LW_SH_PID" ]]
        then
            echo 1 > /tmp/FORCE_EXIT
            lu_killtray
            lu_killshell
            lu_killexe
            lu_killwine
            pkill zenity
            pkill yad
            print_info notify "Lutris Wine successfully killed!" &
            sleep 2
            try_rm /tmp/FORCE_EXIT
            pkill "$LWNAME"
        else
            print_error yad "Lutris Wine Killer" "Lutris Wine not runing!" &
    fi
}

lu_killshell() {
    check_luwine_sh_pid
    if [ -f "/tmp/FORCE_EXIT" ]
        then
            while true
                do
                    check_luwine_sh_pid
                    if  [ ! -z "$LW_SH_PID" ]
                        then
                            kill -9 "$LW_SH_PID" 2>/dev/null
                        else
                            break
                    fi
            done
    elif [ ! -z "$LW_SH_PID" ]
        then
            while true
                do
                    check_luwine_sh_pid
                    if  [ ! -z "$LW_SH_PID" ]
                        then
                            kill -9 "$LW_SH_PID" 2>/dev/null
                        else
                            break
                    fi
            done
            print_info notify "Lutris Wine SHELL processes successfully killed!" &
    else
        print_error yad "SHELL Killer" "Lutris Wine SHELL processes not found!" &
    fi
}

lu_killtray() {
    check_tray
    if [ -f "/tmp/FORCE_EXIT" ]
        then
            kill "$TRAY_PID" 2>/dev/null
    elif [ ! -z "$TRAY_PID" ]
        then
            echo 1 > /tmp/FORCE_EXIT
            kill "$TRAY_PID" 2>/dev/null
            try_rm /tmp/FORCE_EXIT
    else
        print_error yad "Tray Killer" "Lutris Wine not runing in tray!" &
    fi
}

lu_killwine() {
    check_wine_pids
    if [ -f "/tmp/FORCE_EXIT" ]
        then
            kill -9 $WINE_PIDS 2>/dev/null
    elif [[ ! -z "$WINE_PIDS" ]]
        then
            echo 1 > /tmp/FORCE_EXIT
            kill -9 $WINE_PIDS 2>/dev/null
            print_info notify "Wine processes successfully killed!" &
            try_rm /tmp/FORCE_EXIT
    else
        print_error yad "Wine Killer" "Wine processes not found!" &
    fi
}

lu_killexe() {
    check_exes
    if [ -f "/tmp/FORCE_EXIT" ]
        then
            kill -9 $EXE_PIDS 2>/dev/null
    elif [ ! -z "$EXE_PIDS" ]
        then
            echo 1 > /tmp/FORCE_EXIT
            kill -9 $EXE_PIDS 2>/dev/null
            print_info notify "EXE processes successfully killed!" &
            try_rm /tmp/FORCE_EXIT
    else
        print_error yad "EXE Killer" "EXE processes not found!" &
    fi
}

lu_clearpfx() {
    if [ -z "$(pgrep -fa yad|grep "Prefix Cleaner"|awk '{print$1}')" ]; then :
        else
            print_error yad "Prefix Cleaner" "Prefix Cleaner already runing!"
            exit 1
    fi
    print_question "Prefix Cleaner" "Do you really want to clear prefix ["$WINEPREFIX"] ?"
    if [ $? -eq "0" ]
        then
            try_rm "$WINEPREFIX/registry_"*
            try_rm "$WINEPREFIX/"*.reg
            try_rm "$WINEPREFIX/"*.log
            try_rm "$WINEPREFIX/.update-timestamp"
            try_rm "$WINEPREFIX/drive_c/.windows-serial"
            try_rm "$WINEPREFIX/drive_c/windows/"
            try_rm "$WINEPREFIX/drive_c/ProgramData/Setup"
            try_rm "$WINEPREFIX/drive_c/ProgramData/Windows"
            try_rm "$WINEPREFIX/drive_c/ProgramData/WindowsTask"
            try_rm "$WINEPREFIX/drive_c/ProgramData/Package Cache"
            try_rm "$WINEPREFIX/drive_c/users/Public/Local Settings/Application Data/Microsoft"
            try_rm "$WINEPREFIX/drive_c/users/Public/Local Settings/Application Data/Temp"
            try_rm "$WINEPREFIX/drive_c/users/Public/Local Settings/Temporary Internet Files"
            try_rm "$WINEPREFIX/drive_c/users/Public/Application Data/Microsoft"
            try_rm "$WINEPREFIX/drive_c/users/Public/Application Data/wine_gecko"
            try_rm "$WINEPREFIX/drive_c/users/Public/Temp"
            try_rm "$WINEPREFIX/drive_c/users/user/Local Settings/Application Data/Microsoft"
            try_rm "$WINEPREFIX/drive_c/users/user/Local Settings/Application Data/Temp"
            try_rm "$WINEPREFIX/drive_c/users/user/Local Settings/Temporary Internet Files"
            try_rm "$WINEPREFIX/drive_c/users/user/Application Data/Microsoft"
            try_rm "$WINEPREFIX/drive_c/users/user/Application Data/wine_gecko"
            try_rm "$WINEPREFIX/drive_c/users/user/Temp"
            try_rm "$WINEPREFIX/drive_c/Program Files/Internet Explorer"
            try_rm "$WINEPREFIX/drive_c/Program Files/Windows Media Player"
            try_rm "$WINEPREFIX/drive_c/Program Files/Windows NT"
            try_rm "$WINEPREFIX/drive_c/Program Files/Common Files"
            try_rm "$WINEPREFIX/drive_c/Program Files (x86)/Internet Explorer"
            try_rm "$WINEPREFIX/drive_c/Program Files (x86)/Common Files"
            try_rm "$WINEPREFIX/drive_c/Program Files (x86)/Windows Media Player"
            try_rm "$WINEPREFIX/drive_c/Program Files (x86)/Windows NT"
            try_rm "$DEF_CACHE/gl_shader_cache/"*
            try_rm "$DEF_CACHE/dxvk_cache/"*
            try_rm "$DEF_CACHE/gstreamer-1.0/"*
            try_rm "$HOME/.cache/gstreamer-1.0/"*
            try_rm "$DEF_CACHE/mesa_shader_cache/"*
            try_rm "$LW_DIR/.lwcfgchksum"
            print_info notify "Prefix "$WINEPREFIX" cleared successfully!"
    fi
}

lu_rmapp() {
    if [ -z "$(pgrep -fa yad|grep "Shortcuts Remover"|awk '{print$1}')" ]; then :
        else
            print_error yad "Shortcuts Remover" "Shortcuts Remover already runing!"
            exit 1
    fi
    updmenuapp() {
        update-desktop-database -q "$MENU_APP_DIR"
        sleep 0.3
        print_info notify "Lutris Wine applications deleted from menu!"
    }
    LWAPPSHRT="$(grep "Categories=Lutris Wine App" -lr "$MENU_APP_DIR")"
    if [[ ! -z "$(echo "$LWAPPSHRT"|head -1)" ]]
        then
            LW_APP_RM="$(echo -e "\n$(echo "$LWAPPSHRT"|xargs -d "\n" -I {} grep "^Name=" {}|sed 's/^Name=//g'|sort -u|sed ':a;N;$!ba;s/\n/\n\n/g')"| \
            yad --title "Shortcuts Remover" --list --checklist --separator "\n" --column="" --column="Select shortcuts for remove:" \
                --text-align=center --center --window-icon="$DEF_ICO" \
                --width=300 --height=500 --button="REMOVE ALL:2" --button="EXIT:1" --button="OK:0" 2>/dev/null)"
            if [ "$?" == "2" ]
                then
                    sleep 0.3
                    print_question "Shortcuts Remover" "Are you sure you want to remove all Lutris Wine applications from menu?"
                    if [ $? -eq "0" ]
                        then
                            echo "$LWAPPSHRT"|xargs -I {} rm -rfv {}
                            try_rm "$LW_APP_DIR"
                            updmenuapp
                    fi
            elif [ ! -z "$(echo "$LW_APP_RM"|head -1)" ]
                then
                    LW_APP_RM="$(echo "$LW_APP_RM"|sed '/^TRUE$/d'|sed '/^$/d')"
                    (IFS=$'\n' ; for LWAPPRM in $LW_APP_RM
                        do
                            LWSHRTRM="$(echo "$LWAPPSHRT"|xargs -d "\n" -I {} grep -lo "Name=$LWAPPRM" {} 2>/dev/null)"
                            if [ ! -z "$LWSHRTRM" ]
                                then
                                    echo "$LWSHRTRM"|xargs -I {} rm -rfv {}
                            fi
                    done)
                    updmenuapp
            fi
        else
            print_error yad "Shortcuts Remover" "Lutris Wine applications not found in menu!"
    fi
}

lu_shortcut() {
    if [ -z "$(pgrep -fa yad|grep "Shortcuts Creator"|awk '{print$1}')" ]; then :
        else
            print_error yad "Shortcuts Creator" "Shortcuts Creator already runing!"
            exit 1
    fi
    if [ -f "$2" ]
        then
            export SHRT_FL="$(readlink -f "$2")"
            if [ ! -z "$(file "$SHRT_FL"|grep "for MS Windows"|grep -o "executable")" ]
                then
                    export LU_EXE="$SHRT_FL"
                    if [[ ! -z "$ADDTOLU" && "$ADDTOLU" != 0 ]]
                        then
                            add_to_lutris "$LU_EXE"
                        else
                            create_shortcut "$LU_EXE"
                    fi
                else
                    print_error yad "Shortcuts Creator" "Unable to create shortcut for this file!"
            fi
        else
            SHRT_EXE="$(yad --window-icon="$DEF_ICO" --title "Shortcuts Creator" --file --file-filter="*.exe"  --center --on-top  --width=900 --height=600 --button="EXIT:1" --button="OK:0")"
            if [ -f "$SHRT_EXE" ]
                then
                    export SHRT_FL="$(readlink -f "$SHRT_EXE")"
                    if [ ! -z "$(file "$SHRT_FL"|grep "for MS Windows"|grep -o "executable")" ]
                        then
                            export LU_EXE="$SHRT_FL"
                            if [[ ! -z "$ADDTOLU" && "$ADDTOLU" != 0 ]]
                                then
                                    add_to_lutris "$LU_EXE"
                                else
                                    create_shortcut "$LU_EXE"
                            fi
                        else
                            print_error yad "Shortcuts Creator" "Unable to create shortcut for this file!"
                    fi
            elif [ -d "$SHRT_EXE" ]
                then
                    print_error yad "Shortcuts Creator" "Specify the executable file to create shortcut!"
            fi
    fi
}

lu_explorer() {
    if [ -z "$(pgrep -fa explorer.exe|grep -v "/desktop"|awk '{print$1}')" ]; then :
        else
            print_error yad "Explorer" "Explorer already runing!"
            exit 1
    fi
    UNSET_CMPSTR_SW=1
    unset EXE_ARG
    export DEBUG=0
    lu_run explorer
}

lu_help() {
    if [ -z "$(pgrep -fa yad|grep "Lutris Wine usage info"|awk '{print$1}')" ]; then :
        else
            print_error yad "Lutris Wine usage info" "Lutris Wine usage info already runing!"
            exit 1
    fi
    echo -e "
        ${GREEN}Lutris Wine ${RED}v${LW_VERSION} ${GREEN}by $LW_DEVELOPERS
            ${RED}Usage:
            $RED┌──[$GREEN$USER$YELLOW@$BLUE`uname -a|awk '{print$2}'`$RED]─[$GREEN$PWD$RED]
            $RED└──╼ \$$GREEN $LWNAME $BLUE{$LWNAME argument} ${RED}blabla.exe $YELLOW{exe arguments}

            ${RED}-explorer $GREEN              Wine explorer
            ${RED}-cmd $GREEN                   Open CMD or open file in CMD
            ${RED}-shell $GREEN                 Open SHELL or open file in SHELL
            ${RED}-config $GREEN                Settings
            ${RED}-appcfg $GREEN                Apps Settings
            ${RED}-regedit $GREEN               Registry editor
            ${RED}-control $GREEN               Control panel
            ${RED}-winecfg $GREEN               Wine settings
            ${RED}-winemgr $GREEN               Wine manager
            ${RED}-taskmgr $GREEN               Task manager
            ${RED}-uninstaller $GREEN           Wine uninstaller
            ${RED}-winetricks $GREEN            Winetricks
            ${RED}-openpfx $GREEN               Open drive C:
            ${RED}-killwine $GREEN              Kill Wine processes
            ${RED}-killtray $GREEN              Kill tray
            ${RED}-killexe $GREEN               Kill running EXE
            ${RED}-killshell $GREEN             Kill SHELL
            ${RED}-exit $GREEN                  Force exit
            ${RED}-clearpfx $GREEN              Clear prefix
            ${RED}-rmapp $GREEN                 Remove menu apps
            ${RED}-shortcut $GREEN              Create shortcut
            ${RED}-addtolu $GREEN               Add to Lutris
            ${RED}-debug $GREEN                 DEBUG
            ${RED}-help $GREEN                  Show this usage info
            ${RED}-version $GREEN               Show version info
            ${RED}-tray $BLUE{noclose}${GREEN}         Tray
            ${RED}-update$BLUE {all} $GREEN          Runtime updater$BLUE
            {dx|dxvk} {p7|p7zip} {vkd|vkd3d} {ub1804_8664|ubuntu1804-x86_64}
            {inn|innoextract} {net|network-tools} {d3d|d3d_extras|d3d-extras}
            {dxnv|dxvk-nvapi|dxvk_nvapi} {bat|battleye|battleye_runtime}{wtrx|winetricks}
            {ga|gamectrlrdb|gamecontrollerdb} {dg|dgvoodoo2} {ub1804_686|ubuntu1804-i686}
        $RESETCOLOR" >&2
        print_info yad "Lutris Wine usage info" "┌──[$USER@`uname -a|awk '{print$2}'`]─[$PWD]\n└──╼ \$ $LWNAME {$LWNAME argument} blabla.exe {exe arguments} \n\n \
        -explorer                 Wine explorer\n \
        -cmd                          Open CMD or open file in CMD\n \
        -shell                         Open SHELL or open file in SHELL\n \
        -config                      Settings\n \
        -appcfg                     Apps Settings\n \
        -regedit                    Registry editor\n \
        -control                     Control panel\n \
        -winecfg                   Wine settings\n \
        -winemgr                 Wine manager\n \
        -taskmgr                  Task manager\n \
        -uninstaller              Wine uninstaller\n \
        -winetricks               Winetricks\n \
        -openpfx                  Open drive C:\n \
        -killwine                     Kill Wine processes\n \
        -killtray                      Kill tray\n \
        -killexe                       Kill running EXE\n \
        -killshell                     Kill SHELL\n \
        -exit                            Force Exit\n \
        -clearpfx                   Clear prefix\n \
        -rmapp                      Remove menu apps\n \
        -shortcut                  Create shortcut\n \
        -addtolu                    Add to Lutris\n \
        -debug                      DEBUG\n \
        -help                          Show this usage info\n \
        -version                    Show version info\n \
        -tray {noclose}       Tray\n \
        -update {all}            Runtime updater\n \
        {dx|dxvk} {p7|p7zip} {vkd|vkd3d} {ub1804_8664|ubuntu1804-x86_64}\n \
        {inn|innoextract} {net|network-tools} {d3d|d3d_extras|d3d-extras}\n \
        {dxnv|dxvk-nvapi|dxvk_nvapi} {bat|battleye|battleye_runtime} {wtrx|winetricks}\n \
        {ga|gamectrlrdb|gamecontrollerdb} {dg|dgvoodoo2} {ub1804_686|ubuntu1804-i686}\n \
        \nLutris Wine v${LW_VERSION} by $LW_DEVELOPERS \
        " &>/dev/null &
}

lu_version() {
    if [ -z "$(pgrep -fa yad|grep "Version Info"|awk '{print$1}')" ]; then :
        else
            print_error yad "Version info" "Version info already runing!"
            exit 1
    fi
    echo -e "${GREEN}Lutris Wine ${RED}v${LW_VERSION} ${GREEN}by $LW_DEVELOPERS $RESETCOLOR"
    if [ ! -z "$WINE_VERSION" ]
        then
            export WINE_VER="[ WINE ]       : $WINE_VERSION\n"
            echo -en "$WINE_VER"
    fi
    if [ ! -z "$DXVK_VERSION" ]
        then
            export DXVK_VER="[ DXVK ]       : $DXVK_VERSION\n"
            echo -en "$DXVK_VER"
    fi
    if [ ! -z "$VKD3D_VERSION" ]
        then
            export VKD3D_VER="[ VKD3D ]      : $VKD3D_VERSION\n"
            echo -en "$VKD3D_VER"
    fi
    if [ ! -z "$DXVK_NVAPI_VERSION" ]
        then
            export DXVK_NVAPI_VER="[ DXVK-NVAPI ] : $DXVK_NVAPI_VERSION\n"
            echo -en "$DXVK_NVAPI_VER"
    fi
    if [ ! -z "$D3D_EXTRAS_VERSION" ]
        then
            export D3DEXTRAS_VER="[ D3D EXTRAS ] : $D3D_EXTRAS_VERSION\n"
            echo -en "$D3DEXTRAS_VER"
    fi
    if [ ! -z "$DGVOODOO2_VERSION" ]
        then
            export DGVOODOO2_VER="[ DGVOODOO2 ]  : $DGVOODOO2_VERSION\n"
            echo -en "$DGVOODOO2_VER"
    fi
    print_info yad "Version Info" "Lutris Wine v${LW_VERSION} by $LW_DEVELOPERS\n\n${WINE_VER}${DXVK_VER}${VKD3D_VER}${DXVK_NVAPI_VER}${D3DEXTRAS_VER}${DGVOODOO2_VER}" &>/dev/null &
}

check_shell() {
    if [ ! -z "$1" ] ; then export LWSHELL="$1" ; fi
    if [ -z "$LWSHELL" ]
        then
            export LWSHELL="$(which bash 2>/dev/null)"
    fi
}

lu_tray() {
    check_shell
    check_tray
    if [[ -z "$TRAY_PID" && "$NO_TRAY" != 1 ]]
        then
            yad --notification --no-middle --text="Lutris Wine" \
                --window-icon="$DEF_ICO" \
                --image="$DEF_ICO" \
                --command="$LWSHELL -c '$BASH_SOURCE'" \
                --tooltip="Lutris Wine" \
                --menu="| \
Explorer!$LWSHELL -c '"$BASH_SOURCE" -explorer'!"$DEF_ICO"| \
Task manager!$LWSHELL -c '"$BASH_SOURCE" -taskmgr'!"$DEF_ICO"| \
Open CMD!$LWSHELL -c '"$BASH_SOURCE" -cmd'!"$DEF_ICO"| \
Open SHELL!$LWSHELL -c '"$BASH_SOURCE" -shell'!"$DEF_ICO"| \
DEBUG!$LWSHELL -c '"$BASH_SOURCE" -debug'!"$DEF_ICO"| \
Open drive C:\!$LWSHELL -c '"$BASH_SOURCE" -openpfx'!"$DEF_ICO"| \
Settings!$LWSHELL -c '"$BASH_SOURCE" -config'!"$DEF_ICO"| \
Apps settings!$LWSHELL -c '"$BASH_SOURCE" -appcfg'!"$DEF_ICO"| \
Wine manager!$LWSHELL -c '"$BASH_SOURCE" -winemgr'!"$DEF_ICO"| \
Runtime updater!$LWSHELL -c '"$BASH_SOURCE" -update'!"$DEF_ICO"| \
Winetricks!$LWSHELL -c '"$BASH_SOURCE" -winetricks'!"$DEF_ICO"| \
Control panel!$LWSHELL -c '"$BASH_SOURCE" -control'!"$DEF_ICO"| \
Wine settings!$LWSHELL -c '"$BASH_SOURCE" -winecfg'!"$DEF_ICO"| \
Registry editor!$LWSHELL -c '"$BASH_SOURCE" -regedit'!"$DEF_ICO"| \
Wine uninstaller!$LWSHELL -c '"$BASH_SOURCE" -uninstaller'!"$DEF_ICO"| \
Create shortcut!$LWSHELL -c '"$BASH_SOURCE" -shortcut'!"$DEF_ICO"| \
$( if [ ! -z "$SYS_LU" ]; then echo "Add to Lutris!$LWSHELL -c '"$BASH_SOURCE" -addtolu'!"$DEF_ICO"|"; fi) \
Remove menu app!$LWSHELL -c '"$BASH_SOURCE" -rmapp'!"$DEF_ICO"| \
Clear prefix!$LWSHELL -c '"$BASH_SOURCE" -clearpfx'!"$DEF_ICO"| \
Usage info!$LWSHELL -c '"$BASH_SOURCE" -help'!"$DEF_ICO"| \
Version info!$LWSHELL -c '"$BASH_SOURCE" -version'!"$DEF_ICO"| \
Kill Wine processes!$LWSHELL -c '"$BASH_SOURCE" -killwine'!"$DEF_ICO"| \
Kill running EXE!$LWSHELL -c '"$BASH_SOURCE" -killexe'!"$DEF_ICO"| \
Kill SHELL!$LWSHELL -c '"$BASH_SOURCE" -killshell'!"$DEF_ICO"| \
Kill tray!$LWSHELL -c '"$BASH_SOURCE" -killtray'!"$DEF_ICO"| \
FORCE EXIT!$LWSHELL -c '"$BASH_SOURCE" -exit'!"$DEF_ICO"|" &
            noclosetray &
    fi
}

lu_winemgr() {
    if [ -z "$(pgrep -fa yad|grep "Wine Manager"|awk '{print$1}')" ]; then :
        else
            print_error yad "Wine Manager" "Wine Manager already runing!"
            exit 1
    fi
    export WGUIDW=$RANDOM
    export ILW_LIST="$(ls -1 "$LW_WINE_DIR" 2>/dev/null)"
    if [[ -z "$PGE_GIT_LIST" || -z  "$PLU_GIT_LIST" || -z  "$PK4_GIT_LIST" ]]
        then
            GREPWARCHURL="grep -iE '(.tar.gz|.tar.xz|.tar.zst)'|grep -v 'tags'|grep 'href'|sed 's/.*releases//g'|cut -d'\"' -f1"
            PLU_GIT="https://github.com/lutris/wine/releases"
            PGE_GIT="https://github.com/GloriousEggroll/proton-ge-custom/releases"
            WGE_GIT="https://github.com/GloriousEggroll/wine-ge-custom/releases"
            PK4_GIT="https://github.com/Kron4ek/Wine-Builds/releases"
            curl -s "$PLU_GIT"|eval "$GREPWARCHURL"|awk '{print "'$PLU_GIT'" $0}' 1> "/tmp/PLUGITLIST$WGUIDW" &
            curl -s "$PGE_GIT"|eval "$GREPWARCHURL"|awk '{print "'$PGE_GIT'" $0}' 1> "/tmp/PGEGITLIST$WGUIDW" &
            curl -s "$WGE_GIT"|eval "$GREPWARCHURL"|awk '{print "'$WGE_GIT'" $0}' 1> "/tmp/WGEGITLIST$WGUIDW" &
            curl -s "$PK4_GIT"|eval "$GREPWARCHURL"|awk '{print "'$PK4_GIT'" $0}' 1> "/tmp/PK4GITLIST$WGUIDW" &
            while true
                do
                    sleep 0.2
                    GITLISTOK=0
                    for curlgit in $PLU_GIT $PGE_GIT $WGE_GIT $PK4_GIT
                            do
                                echo
                                sleep 0.2
                                if [ -z "$(pgrep -fa curl|grep -o "$curlgit")" ]
                                    then
                                        GITLISTOK=$(($GITLISTOK + 1))
                                fi
                                if [ "$GITLISTOK" == 4 ]; then break; fi
                        done
                    if [ "$GITLISTOK" == 4 ]; then break; fi
            done|settingbar_nostdout
            PLU_GIT_LIST="$(cat /tmp/PLUGITLIST$WGUIDW 2>/dev/null ; try_rm /tmp/PLUGITLIST$WGUIDW)"
            PGE_GIT_LIST="$(cat /tmp/PGEGITLIST$WGUIDW 2>/dev/null ; try_rm /tmp/PGEGITLIST$WGUIDW)"
            WGE_GIT_LIST="$(cat /tmp/WGEGITLIST$WGUIDW 2>/dev/null ; try_rm /tmp/WGEGITLIST$WGUIDW)"
            PK4_GIT_LIST="$(cat /tmp/PK4GITLIST$WGUIDW 2>/dev/null ; try_rm /tmp/PK4GITLIST$WGUIDW)"
    fi
    if [[ ! -z "$PLU_GIT_LIST" || ! -z "$PGE_GIT_LIST" || ! -z "$WGE_GIT_LIST" || ! -z  "$PK4_GIT_LIST" ]]
        then
            export GITOK=1
            print_info notify "Сhecking new WINE versions on GitHub completed!"
        else
            unset GITOK
            print_error yad "Wine Manager" "Can't get list of WINE URLs from GitHub!"
    fi
    if [[ ! -z "$ILW_LIST" && ! -z "$GITOK" ]]
        then
            PLU_LIST="$(echo -e "$(for PLUGIT in $PLU_GIT_LIST ; do echo $PLUGIT|awk -F/ '{print $NF}'|sed 's/.tar.xz//' ; done)" "\n$ILW_LIST"|sort|uniq -u|grep -v "$ILW_LIST")"
            PGE_LIST="$(echo -e "$(for PGEGIT in $PGE_GIT_LIST ; do echo $PGEGIT|awk -F/ '{print $NF}'|sed 's/.tar.gz//' ; done|sed '/Proton-6.5-GE-2/,$d'|sed '/github-action/d')" "\n$ILW_LIST"|sort|uniq -u|grep -v "$ILW_LIST")"
            WGE_LIST="$(echo -e "$(for WGEGIT in $WGE_GIT_LIST ; do echo $WGEGIT|awk -F/ '{print $NF}'|sed 's/.tar.xz//' ; done)" "\n$ILW_LIST"|sort|uniq -u|grep -v "$ILW_LIST")"
            PK4_LIST="$(echo -e "$(for PK4GIT in $PK4_GIT_LIST ; do echo $PK4GIT|awk -F/ '{print $NF}'|sed 's/.tar.xz//' ; done|sed '/-x86/d')" "\n$ILW_LIST"|sort|uniq -u|grep -v "$ILW_LIST")"
            echo -e "\n$(echo "$PLU_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=1 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PLUSET$WGUIDW" &
            echo -e "\n$(echo "$PGE_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=2 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PGESET$WGUIDW" &
            echo -e "\n$(echo "$WGE_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=3 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/WGESET$WGUIDW" &
            echo -e "\n$(echo "$PK4_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=4 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PK4SET$WGUIDW" &
            echo -e "\n$(echo "$ILW_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=5 --list --column="" --checklist --separator=" " --column "Select installed WINE for delete:" 1> "/tmp/WDEL_SET$WGUIDW" &
            yad --key=$WGUIDW --notebook --width=500 --height=600 --text-align=center --center \
                --window-icon="$DEF_ICO" --title "Wine Manager" --separator="" \
                --tab-pos=top --tab="Lutris" --tab="Proton GE" --tab="Wine GE" --tab="Kron4ek" --tab="DELETE" \
                --button="EXIT:1" --button="OK:0"
            PLU_SET="$(sed 's/TRUE //g' /tmp/PLUSET$WGUIDW 2>/dev/null ; try_rm /tmp/PLUSET$WGUIDW)"
            PGE_SET="$(sed 's/TRUE //g' /tmp/PGESET$WGUIDW 2>/dev/null ; try_rm /tmp/PGESET$WGUIDW)"
            WGE_SET="$(sed 's/TRUE //g' /tmp/WGESET$WGUIDW 2>/dev/null ; try_rm /tmp/WGESET$WGUIDW)"
            PK4_SET="$(sed 's/TRUE //g' /tmp/PK4SET$WGUIDW 2>/dev/null ; try_rm /tmp/PK4SET$WGUIDW)"
            WDEL_SET="$(sed 's/TRUE //g' /tmp/WDEL_SET$WGUIDW 2>/dev/null ; try_rm /tmp/WDEL_SET$WGUIDW)"
    elif [[ ! -z "$ILW_LIST" && -z "$GITOK" ]]
        then
            if [[ "$(echo "$ILW_LIST"|sed 's/^ *//g'|wc -l)" == 1 && "$ILW_LIST" == "$WINE_IN_USE" ]]
                then
                    print_error yad "Wine Manager" "Lutris Wine has one WINE installed and it selected by default! Can't run Wine Manager!"
                    exit 1
                else
                    echo -e "\n$(echo "$ILW_LIST"|grep -wv "$WINE_IN_USE" 2>/dev/null|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=1 --list --column="" --checklist --separator=" " --column "Select installed WINE for delete:" 1> "/tmp/WDEL_SET$WGUIDW" &
            fi
            yad --key=$WGUIDW --notebook --width=500 --height=600 --text-align=center --center \
                --window-icon="$DEF_ICO" --title "Wine Manager" --separator="" \
                --tab-pos=top --tab="DELETE"  --button="EXIT:1" --button="OK:0"
            export WDEL_SET="$(sed 's/TRUE //g' /tmp/WDEL_SET$WGUIDW 2>/dev/null ; try_rm /tmp/WDEL_SET$WGUIDW)"
    elif [[ -z "$ILW_LIST" && ! -z "$GITOK" ]]
        then
            PLU_LIST="$(for PLUGIT in $PLU_GIT_LIST ; do echo $PLUGIT|awk -F/ '{print $NF}'|sed 's/.tar.xz//' ; done)"
            PGE_LIST="$(for PGEGIT in $PGE_GIT_LIST ; do echo $PGEGIT|awk -F/ '{print $NF}'|sed 's/.tar.gz//' ; done|sed '/Proton-6.5-GE-2/,$d'|sed '/github-action/d')"
            WGE_LIST="$(for WGEGIT in $WGE_GIT_LIST ; do echo $WGEGIT|awk -F/ '{print $NF}'|sed 's/.tar.xz//' ; done)"
            PK4_LIST="$(for PK4GIT in $PK4_GIT_LIST ; do echo $PK4GIT|awk -F/ '{print $NF}'|sed 's/.tar.xz//' ; done|sed '/-x86/d')"
            echo -e "\n$(echo "$PLU_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=1 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PLUSET$WGUIDW" &
            echo -e "\n$(echo "$PGE_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=2 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PGESET$WGUIDW" &
            echo -e "\n$(echo "$WGE_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=3 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/WGESET$WGUIDW" &
            echo -e "\n$(echo "$PK4_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=4 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PK4SET$WGUIDW" &
            yad --key=$WGUIDW --notebook --width=500 --height=600 --text-align=center --center \
                --window-icon="$DEF_ICO" --title "Wine Manager" --separator="" \
                --tab-pos=top --tab="Lutris" --tab="Proton GE" --tab="Wine GE" --tab="Kron4ek" \
                --button="EXIT:1" --button="OK:0"
            PLU_SET="$(sed 's/TRUE //g' /tmp/PLUSET$WGUIDW 2>/dev/null ; try_rm /tmp/PLUSET$WGUIDW)"
            PGE_SET="$(sed 's/TRUE //g' /tmp/PGESET$WGUIDW 2>/dev/null ; try_rm /tmp/PGESET$WGUIDW)"
            WGE_SET="$(sed 's/TRUE //g' /tmp/WGESET$WGUIDW 2>/dev/null ; try_rm /tmp/WGESET$WGUIDW)"
            PK4_SET="$(sed 's/TRUE //g' /tmp/PK4SET$WGUIDW 2>/dev/null ; try_rm /tmp/PK4SET$WGUIDW)"
    elif [[ -z "$ILW_LIST" && -z "$GITOK" ]]
        then
            print_error yad "Wine Manager" "Can't run Wine Manager!"
            exit 1
    fi
    if [ ! -z "$(echo "$PLU_SET"|head -1)" ]
        then
            for PLU_DW in $PLU_SET
                do
                    unset PLU_DW_URL
                    export PLU_DW_URL="$(echo "$PLU_GIT_LIST"|grep $PLU_DW)"
                    if [ ! -z "$PLU_DW_URL" ]
                        then
                            print_info notify "Download and install $PLU_DW"
                            if try_download "$PLU_DW_URL" "$LW_WINE_DIR"
                                then
                                    for archive_type in "gz" "xz"
                                        do
                                            if [ -f "$LW_WINE_DIR/${PLU_DW}.tar.${archive_type}" ]
                                                then
                                                    if unpack_tar_${archive_type} "$LW_WINE_DIR/${PLU_DW}.tar.${archive_type}" "$LW_WINE_DIR/"
                                                        then
                                                            export PLU_INST=1
                                                            try_rm "$LW_WINE_DIR/${PLU_DW}.tar.${archive_type}"
                                                            print_info notify "Installation $PLU_DW completed!"
                                                        else
                                                            try_rm "$LW_WINE_DIR/${PLU_DW}.tar.${archive_type}"
                                                            try_rm "$LW_WINE_DIR/${PLU_DW}"
                                                            download_error && lu_winemgr
                                                    fi
                                            fi
                                    done
                                else
                                    try_rm "$LW_WINE_DIR/${PLU_DW}.tar.${archive_type}"
                                    download_error && lu_winemgr
                            fi
                    fi
            done
    fi
    if [ ! -z "$(echo "$PGE_SET"|head -1)" ]
        then
            for PGE_DW in $PGE_SET
                do
                    unset PGE_DW_URL
                    export PGE_DW_URL="$(echo "$PGE_GIT_LIST"|grep $PGE_DW)"
                    if [ ! -z "$PGE_DW_URL" ]
                        then
                            print_info notify "Download and install $PGE_DW..."
                            if try_download "$PGE_DW_URL" "$LW_WINE_DIR"
                                then
                                    for archive_type in "gz" "xz"
                                        do
                                            if [ -f "$LW_WINE_DIR/${PGE_DW}.tar.${archive_type}" ]
                                                then
                                                    if unpack_tar_${archive_type} "$LW_WINE_DIR/${PGE_DW}.tar.${archive_type}" "$LW_WINE_DIR/"
                                                        then
                                                            export PGE_INST=1
                                                            try_rm "$LW_WINE_DIR/${PGE_DW}.tar.${archive_type}"
                                                            if [ -d "$LW_WINE_DIR/$PGE_DW/files" ]
                                                                then
                                                                    for clearpge in $(ls -I "version" -I "files" "$LW_WINE_DIR/$PGE_DW")
                                                                        do
                                                                            try_rm "$LW_WINE_DIR/$PGE_DW/$clearpge"
                                                                    done
                                                                    try_mv "$LW_WINE_DIR/$PGE_DW/files/"* "$LW_WINE_DIR/$PGE_DW/"
                                                                    try_rm "$LW_WINE_DIR/$PGE_DW/files"
                                                                    print_info notify "Installation $PGE_DW completed!"
                                                            fi
                                                        else
                                                            try_rm "$LW_WINE_DIR/${PGE_DW}.tar.${archive_type}"
                                                            try_rm "$LW_WINE_DIR/${PGE_DW}"
                                                            download_error && lu_winemgr
                                                    fi
                                            fi
                                    done
                                else
                                    try_rm "$LW_WINE_DIR/${PGE_DW}.tar.${archive_type}"
                                    download_error && lu_winemgr
                            fi
                    fi
            done
    fi
    if [ ! -z "$(echo "$WGE_SET"|head -1)" ]
        then
            for WGE_DW in $WGE_SET
                do
                    unset WGE_DW_URL
                    export WGE_DW_URL="$(echo "$WGE_GIT_LIST"|grep $WGE_DW)"
                    if [ ! -z "$WGE_DW_URL" ]
                        then
                            print_info notify "Download and install $WGE_DW"
                            if try_download "$WGE_DW_URL" "$LW_WINE_DIR"
                                then
                                    for archive_type in "gz" "xz"
                                        do
                                            if [ -f "$LW_WINE_DIR/${WGE_DW}.tar.${archive_type}" ]
                                                then
                                                    if unpack_tar_${archive_type} "$LW_WINE_DIR/${WGE_DW}.tar.${archive_type}" "$LW_WINE_DIR/"
                                                        then
                                                            export WGE_INST=1
                                                            try_rm "$LW_WINE_DIR/${WGE_DW}.tar.${archive_type}"
                                                            print_info notify "Installation $WGE_DW completed!"
                                                        else
                                                            try_rm "$LW_WINE_DIR/${WGE_DW}.tar.${archive_type}"
                                                            try_rm "$LW_WINE_DIR/${WGE_DW}"
                                                            download_error && lu_winemgr
                                                    fi
                                            fi
                                    done
                                else
                                    try_rm "$LW_WINE_DIR/${WGE_DW}.tar.${archive_type}"
                                    download_error && lu_winemgr
                            fi
                    fi
            done
    fi
    if [ ! -z "$(echo "$PK4_SET"|head -1)" ]
        then
            for PK4_DW in $PK4_SET
                do
                    unset PK4_DW_URL
                    export PK4_DW_URL="$(echo "$PK4_GIT_LIST"|grep $PK4_DW)"
                    if [ ! -z "$PK4_DW_URL" ]
                        then
                            print_info notify "Download and install $PK4_DW..."
                            if try_download "$PK4_DW_URL" "$LW_WINE_DIR"
                                then
                                    for archive_type in "gz" "xz"
                                        do
                                            if [ -f "$LW_WINE_DIR/${PK4_DW}.tar.${archive_type}" ]
                                                then
                                                    if unpack_tar_${archive_type} "$LW_WINE_DIR/${PK4_DW}.tar.${archive_type}" "$LW_WINE_DIR/"
                                                        then
                                                            export PK4_INST=1
                                                            try_rm "$LW_WINE_DIR/${PK4_DW}.tar.${archive_type}"
                                                            print_info notify "Installation $PK4_DW completed!"
                                                        else
                                                            try_rm "$LW_WINE_DIR/${PK4_DW}.tar.${archive_type}"
                                                            try_rm "$LW_WINE_DIR/${PK4_DW}"
                                                            download_error && lu_winemgr
                                                    fi
                                            fi
                                    done
                                else
                                    try_rm "$LW_WINE_DIR/${PK4_DW}.tar.${archive_type}"
                                    download_error && lu_winemgr
                            fi
                    fi
            done
    fi
    if [ ! -z "$(echo "$WDEL_SET"|head -1)" ]
        then
            unset WINEINUSEDEL
            while read winedel
                do
                    print_info notify "Remove $winedel..."
                    try_rm "$LW_WINE_DIR/$winedel"
                    print_info notify "Removing $winedel completed!"
                    if [ "$WINE_IN_USE" == "$winedel" ]
                        then
                            export WINEINUSEDEL=1
                    fi
            done <<< $WDEL_SET
            if [ ! -z "$WINEINUSEDEL" ]
                then
                    if [ ! -z "$(ls -1 "$LW_WINE_DIR" 2>/dev/null|head -1)" ]
                        then
                            print_info notify "Removed WINE which was selected by default!"
                            check_def_wine
                        else
                            print_info notify "Removed WINE which was selected by default! WINE is not installed, you must download WINE!"
                            unset WINEINUSEDEL WDEL_SET
                            lu_winemgr
                    fi
                else
                    print_info notify "Wine removing completed!"
            fi
    fi
    if [[ "$PLU_INST" == 1 || "$PGE_INST" == 1 || "$WGE_INST" == 1 || "$PK4_INST" == 1 ]]
        then
            if [ -z "$WINEINUSEDEL" ]
                then
                    check_def_wine
                    unset WDEL_SET
            fi
            unset PLU_INST PK4_INST PGE_INST WGE_INST
            print_info notify "Wine installation completed!"
    fi
}

check_themes() {
    if [ ! -z "$1" ] ; then export WINE_THEME="$1" ; fi
    if [[ -d "$THEMES_DIR" && ! -z "$(ls -1 "$THEMES_DIR"|head -1)" ]]
        then
            if [ "$(cat "$WINEPREFIX/.lwtheme" 2>/dev/null)" != "$WINE_THEME" ]
                then
                    if [[ ! -z "$OLD_WINE" && -f "$OLD_WINE" ]]
                        then
                            "$OLD_WINE" regedit "$THEMES_DIR/$WINE_THEME.reg" &>/dev/null
                    elif [ -f "$WINE" ]
                        then
                            "$WINE" regedit "$THEMES_DIR/$WINE_THEME.reg" &>/dev/null
                    else
                        print_error "Wine theme not changed to $WINE_THEME"
                        return 1
                    fi
                    echo "$WINE_THEME" > "$WINEPREFIX/.lwtheme"
                    print_info notify "Wine theme successfully changed to $WINE_THEME"
                    try_shutdown_wine
            fi
        else
            print_error yad "Themes Manager" "Wine theme not found!" &
            return 1
    fi
}

us_layout_sw() {
    if [ "$US_LAYOUT" == 1 ]
        then
            if [ ! -z "$(which xkb-switch 2>/dev/null)" ]
                then
                    xkb-switch -s us 2>/dev/null
                else
                    print_error "xkb-switch not found!"
            fi
    fi
}

check_mangohud() {
    if [ ! -z "$1" ] ; then export LWMANGOHUD="$1" ; fi
    if [[ "$LWMANGOHUD" == "OpenGL" || "$LWMANGOHUD" == "Vulkan" ]]
        then
            if [ ! -z "$(which mangohud 2>/dev/null)" ]
                then
                    if [ "$LWMANGOHUD" == "Vulkan" ]
                        then
                            export RUN_MANGOHUD="mangohud"
                    elif [ "$LWMANGOHUD" == "OpenGL" ]
                        then
                            export RUN_MANGOHUD="mangohud --dlsym"
                    fi
                    if [[ -z "$MANGOHUDCFG" && "$MANGOHUD_USER_CONF" != 1 ]]
                        then
export MANGOHUD_CONFIG="no_display,gpu_stats,gpu_temp,gpu_core_clock,gpu_mem_clock,gpu_power,gpu_load_change,gpu_text=GPU,\
cpu_stats,cpu_temp,cpu_load_change,core_load_change,cpu_color=2e97cb,cpu_text=CPU,io_color=a491d3,vram,vram_color=ad64c1,ram,ram_color=c26693,fps,\
engine_version,engine_color=eb5b5b,gpu_name,gpu_color=2e9762,vulkan_driver,wine,wine_color=eb5b5b,frame_timing=1,frametime_color=00ff00,\
resolution,vkbasalt,gamemode,background_alpha=0.4,font_size=24,background_color=020202,position=top-left,text_color=ffffff,toggle_hud=Shift_R+F12"
                    elif [[ ! -z "$MANGOHUDCFG" && "$MANGOHUD_USER_CONF" != 1 ]]
                        then
                            export MANGOHUD_CONFIG="$MANGOHUDCFG"
                    fi
                else
                    print_error yad "MANGOHUD not found in your system!"
                    export DISABLE_MANGOHUD=1
                    unset RUN_MANGOHUD
            fi
        else
            print_info notify "MANGOHUD is disabled!"
            export DISABLE_MANGOHUD=1
            unset RUN_MANGOHUD
    fi
}

check_fps_limit() {
    if [ ! -z "$1" ] ; then export FPS_LIMIT="$1" ; fi
    if [[ ! -z "$FPS_LIMIT" && "$FPS_LIMIT" != 0 ]]
        then
            if [[ ! -z "$(which mangohud 2>/dev/null)" && ! -z "$RUN_MANGOHUD" && "$MANGOHUD_USER_CONF" != 1 ]]
                then
                    if [ ! -z "$MANGOHUDCFG" ]
                        then
                            if [ -z "$(echo $MANGOHUDCFG|grep -wo "fps_limit")" ]
                                then
                                    export MANGOHUD_CONFIG="$(echo "${MANGOHUDCFG},fps_limit=$FPS_LIMIT")"
                            fi
                        else
export MANGOHUD_CONFIG="no_display,gpu_stats,gpu_temp,gpu_core_clock,gpu_mem_clock,gpu_power,gpu_load_change,gpu_text=GPU,\
cpu_stats,cpu_temp,cpu_load_change,core_load_change,cpu_color=2e97cb,cpu_text=CPU,io_color=a491d3,vram,vram_color=ad64c1,ram,ram_color=c26693,fps,\
engine_version,engine_color=eb5b5b,gpu_name,gpu_color=2e9762,vulkan_driver,wine,wine_color=eb5b5b,frame_timing=1,frametime_color=00ff00,\
resolution,vkbasalt,gamemode,background_alpha=0.4,font_size=24,background_color=020202,position=top-left,text_color=ffffff,toggle_hud=Shift_R+F12,fps_limit=$FPS_LIMIT"
                    fi
             elif [ ! -z "$(which strangle 2>/dev/null)" ]
                then
                    export RUN_FPSLIMIT="strangle -f $FPS_LIMIT"
                else
                    print_error yad "libstrangle and MANGOHUD not available, FPS limiter is disabled!"
                    unset RUN_FPSLIMIT
             fi
        else
            unset RUN_FPSLIMIT
    fi
}

check_gamemode() {
    if [ ! -z "$1" ] ; then export GAMEMODE="$1" ; fi
    if [ "$GAMEMODE" == 1 ]
        then
            if [ ! -z "$(which gamemoderun 2>/dev/null)" ]
                then
                    export RUN_GAMEMODE="gamemoderun"
                else
                    print_error yad "GAMEMODE not found in your system!"
                    unset RUN_GAMEMODE
            fi
        else
            print_info notify "GAMEMODE is disabled!"
            unset RUN_GAMEMODE
    fi
}

check_gstreamer() {
    if [ ! -z "$1" ] ; then export GSTREAMER="$1" ; fi
    if [ "$GSTREAMER" == 1 ]
        then
            dis_gstreamer() {
                unset GSTREAMER
                sed -i "s/export GSTREAMER=.*/export GSTREAMER='0'/" "$LW_CFG" 2>/dev/null
                wdllover_upd "winegstreamer="
                print_error yad "GSTREAMER not found! GSTREAMER is disabled!"
            }
            try_mkdir "$DEF_CACHE/gstreamer-1.0"
            export WINE_GST_REGISTRY_DIR="$DEF_CACHE/gstreamer-1.0"
            export MEDIACONV_AUDIO_DUMP_FILE="$WINE_GST_REGISTRY_DIR/audio.foz"
            export MEDIACONV_AUDIO_TRANSCODED_FILE="$WINE_GST_REGISTRY_DIR/transcoded_audio.foz"
            export MEDIACONV_VIDEO_DUMP_FILE="$WINE_GST_REGISTRY_DIR/video.foz"
            export MEDIACONV_VIDEO_TRANSCODED_FILE="$WINE_GST_REGISTRY_DIR/transcoded_video.foz"
            if [ "$PREF_SYS_LIBS" == 1 ]
                then
                    if [ -d "/lib64/gstreamer-1.0" ]
                        then
                            export GST_PLUGIN_SYSTEM_PATH_1_0="/lib64/gstreamer-1.0:/lib/gstreamer-1.0"
                    elif [ -d "$WINEDIR/lib64/gstreamer-1.0" ]
                        then
                            print_info notify "System Gstreamer not found! Used Wine Gstreamer!"
                            export GST_PLUGIN_SYSTEM_PATH_1_0="$WINEDIR/lib64/gstreamer-1.0:$WINEDIR/lib/gstreamer-1.0"
                    else
                        dis_gstreamer
                    fi
                else
                    if [ -d "$WINEDIR/lib64/gstreamer-1.0" ]
                        then
                            export GST_PLUGIN_SYSTEM_PATH_1_0="$WINEDIR/lib64/gstreamer-1.0:$WINEDIR/lib/gstreamer-1.0"
                    elif [ -d "/lib64/gstreamer-1.0" ]
                        then
                            print_info notify "Wine Gstreamer not found! Used System Gstreamer!"
                            export GST_PLUGIN_SYSTEM_PATH_1_0="/lib64/gstreamer-1.0:/lib/gstreamer-1.0"
                    else
                        dis_gstreamer
                    fi
            fi
        else
            print_info notify "GSTREAMER is disabled!"
    fi
}

check_wd3dmode() {
    if [ ! -z "$1" ] ; then export WD3DMODE="$1" ; fi
    case "$WD3DMODE" in
        DXVK+NVAPI) export DXVK=1
                    export DXVK_NVAPI=1
                    unset VKD3D WINED3D
                    print_info "Running in DXVK + NVAPI mode!" ;;
        VKD3D) export VKD3D=1
               unset DXVK DXVK_NVAPI WINED3D
               print_info "Running in VKD3D mode!";;
        WineD3D) export WINED3D=1
                 unset DXVK VKD3D DXVK_NVAPI ;;
        DXVK+NVAPI+VKD3D) export DXVK=1
                          export DXVK_NVAPI=1
                          export VKD3D=1
                          unset WINED3D
                          print_info "Running in DXVK + NVAPI + VKD3D mode!" ;;
    esac
}

check_wined3d() {
    if [ ! -z "$1" ] ; then export WINED3D="$1" ; fi
    if [[ "$DXVK" == 0 && "$VKD3D" == 0 ]] || [ "$WINED3D" == 1 ]
        then
            print_info notify "Running in WineD3D (OpenGL) mode!"
            export GL_YIELD="NOTHING"
            export WINED3D=1
            if ! try_ln "$WINEDIR"/lib/wine/fakedlls/dxgi.dll "$PFX_DLL32_PTH/dxgi.dll" &>/dev/null
                then
                    try_ln "$WINEDIR"/lib/wine/i386-windows/dxgi.dll "$PFX_DLL32_PTH/dxgi.dll" &>/dev/null
            fi
            if ! try_ln "$WINEDIR"/lib64/wine/fakedlls/dxgi.dll "$PFX_DLL64_PTH/dxgi.dll" &>/dev/null
                then
                    try_ln "$WINEDIR"/lib64/wine/x86_64-windows/dxgi.dll "$PFX_DLL64_PTH/dxgi.dll" &>/dev/null
            fi
            for wine_build_dll in d3d11 d3d10 d3d10core d3d10_1 d3d9
                do
                    if ! try_ln "$WINEDIR/lib/wine/${wine_build_dll}.dll" "$PFX_DLL32_PTH/${wine_build_dll}.dll" &>/dev/null
                        then
                            try_ln "$WINEDIR/lib/wine/i386-windows/${wine_build_dll}.dll" "$PFX_DLL32_PTH/${wine_build_dll}.dll" &>/dev/null
                    fi
                    if ! try_ln "$WINEDIR/lib64/wine/${wine_build_dll}.dll" "$PFX_DLL64_PTH/${wine_build_dll}.dll" &>/dev/null
                        then
                            try_ln "$WINEDIR/lib64/wine/x86_64-windows/${wine_build_dll}.dll" "$PFX_DLL64_PTH/${wine_build_dll}.dll" &>/dev/null
                    fi
            done
    fi
}

check_dxvk_async() {
    if [ ! -z "$1" ] ; then export DXVKASYNC="$1" ; fi
    if [[ "$DXVKASYNC" == 1 && "$WINED3D" != 1 && "$DXVK" == 1 ]]
        then
            export DXVK_ASYNC=1
        else
            unset DXVK_ASYNC
    fi
}

check_dxvk() {
    if [ ! -z "$1" ] ; then export DXVK="$1" ; if [ ! -z "$2" ] ; then export DXVK_VERSION="$2" ; fi ; fi
    export ALLDXVKDLLS="d3d11,d3d10,d3d10core,d3d10_1,d3d9,dxgi"
    if [ "$DXVK_VERSION" == "Default" ]
        then
            export "$(grep -wo 'DXVK_VERSION.*$' "$LW_DEF_CFG"|tr -d \')"
    fi
    if [[ "$DXVK" == 1 && "$WINED3D" != 1 ]]
        then
            if [ ! -z "$DXVK_GIT_RELEASE_URL" ]
                then
                    GIT_RELEASE_URL="$DXVK_GIT_RELEASE_URL"
            fi
            if [[ -f "$LW_RUNTIME_DIR/dxvk/$DXVK_VERSION/x64/d3d12.dll" || -f "$LW_RUNTIME_DIR/dxvk/$DXVK_VERSION/x32/d3d12.dll" ]]
                then
                    try_rm "$LW_RUNTIME_DIR/dxvk/$DXVK_VERSION/x64/d3d12.dll" "$LW_RUNTIME_DIR/dxvk/$DXVK_VERSION/x32/d3d12.dll"
            fi
            if dll_manager "dxvk" "$DXVK_VERSION"
                then
                    if [ "$WINE_DXGI" == 1 ]
                        then
                            if ! try_ln "$WINEDIR/lib/wine/fakedlls/dxgi.dll" "$PFX_DLL32_PTH" &>/dev/null
                                then
                                    try_ln "$WINEDIR/lib/wine/i386-windows/dxgi.dll" "$PFX_DLL32_PTH" &>/dev/null
                            fi
                            if ! try_ln "$WINEDIR/lib64/wine/fakedlls/dxgi.dll" "$PFX_DLL64_PTH" &>/dev/null
                                then
                                    try_ln "$WINEDIR/lib64/wine/x86_64-windows/dxgi.dll" "$PFX_DLL64_PTH" &>/dev/null
                            fi
                            wdllover_upd "$(echo $check_dlls_slk|sed 's/ dxgi//'|sed 's/.dll//g'|tr ' ' ',')=n;dxgi=b"
                            print_info notify "Used DXGI from Wine!"
                        else
                            wdllover_upd "$(echo $check_dlls_slk|sed 's/.dll//g'|tr ' ' ',')=n"
                    fi
                    try_mkdir "$DEF_CACHE/dxvk_cache"
                    export DXVK_STATE_CACHE_PATH="$DEF_CACHE/dxvk_cache"
                    export DXVK_STATE_CACHE=1
                    export __GL_DXVK_OPTIMIZATIONS=1
                    unset GIT_RELEASE_URL
                else
                    export DXVK=0
                    wdllover_upd "${ALLDXVKDLLS}=b"
                    print_error yad "DLL Manager" "DXVK is disabled!"
            fi
        else
            export DXVK=0
            wdllover_upd "${ALLDXVKDLLS}=b"
            print_info "DXVK is disabled!"
    fi
}

check_vkd3d() {
    if [ ! -z "$1" ] ; then export VKD3D="$1" ; if [ ! -z "$2" ] ; then export VKD3D_VERSION="$2" ; fi ; fi
    export ALLVKD3DDLLS="d3d12"
    if [ "$VKD3D_VERSION" == "Default" ]
        then
            export "$(grep -wo 'VKD3D_VERSION.*$' "$LW_DEF_CFG"|tr -d \')"
    fi
    if [[ "$VKD3D" == 1 && "$WINED3D" != 1 ]]
        then
            if [ ! -z "$VKD3D_GIT_RELEASE_URL" ]
                then
                    GIT_RELEASE_URL="$VKD3D_GIT_RELEASE_URL"
            fi
            if dll_manager "vkd3d" "$VKD3D_VERSION"
                then
                    wdllover_upd "$(echo $check_dlls_slk|sed 's/.dll//g'|tr ' ' ',')=n"
                    unset GIT_RELEASE_URL
                else
                    export VKD3D=0
                    wdllover_upd "${ALLVKD3DDLLS}=b"
                    print_error yad "DLL Manager" "VKD3D is disabled!"
            fi
        else
            export VKD3D=0
            wdllover_upd "${ALLVKD3DDLLS}=b"
            print_info "VKD3D is disabled!"
    fi
}

check_dxvk-nvapi() {
    if [ ! -z "$1" ] ; then export DXVK_NVAPI="$1" ; if [ ! -z "$2" ] ; then export DXVK_NVAPI_VERSION="$2" ; fi ; fi
    export ALLNVAPIDLLS="nvapi,nvapi64,nvml,nvcuda"
    if [ "$DXVK_NVAPI_VERSION" == "Default" ]
        then
            export "$(grep -wo 'DXVK_NVAPI_VERSION.*$' "$LW_DEF_CFG"|tr -d \')"
    fi
    if [[ "$DXVK_NVAPI" == 1 && "$DXVK" != 0 && ! -z "$(lspci|grep VGA|grep -o NVIDIA)" && "$WINED3D" != 1 ]]
        then
            if [ ! -z "$NVAPI_GIT_RELEASE_URL" ]
                then
                    GIT_RELEASE_URL="$NVAPI_GIT_RELEASE_URL"
            fi
            if dll_manager "dxvk-nvapi" "$DXVK_NVAPI_VERSION"
                then
                    if [[ ! -f "$PFX_DLL64_PTH/nvngx.dll" || ! -f "$PFX_DLL64_PTH/_nvngx.dll" ]]
                        then
                            CPNVNGX="$(find /usr/* -type f -name "*nvngx.dll" 2>/dev/null|awk '{print $1}'|grep 'lib')"
                            if [ ! -z "$CPNVNGX" ]
                                then
                                    for CPNVNGXFLS in $CPNVNGX
                                        do
                                            try_ln "$CPNVNGXFLS" "$PFX_DLL64_PTH/"
                                    done
                                else
                                    print_error yad "nvngx.dll not found in your system!"
                            fi
                    fi
                    wdllover_upd "$(echo $check_dlls_slk|sed 's/.dll//g'|tr ' ' ',')=n;nvcuda=b"
                    export DXVK_NVAPIHACK=0
                else
                    export DXVK_NVAPI=0
                    wdllover_upd "${ALLNVAPIDLLS}=b"
                    print_error yad "DLL Manager" "DXVK NVAPI is disabled!"
            fi
        else
            export DXVK_NVAPI=0
            wdllover_upd "${ALLNVAPIDLLS}=b"
            print_info "DXVK NVAPI is disabled!"
    fi
}

check_d3d_extras() {
    if [ ! -z "$1" ] ; then export D3D_EXTRAS="$1" ; if [ ! -z "$2" ] ; then export D3D_EXTRAS_VERSION="$2" ; fi ; fi
    export ALLD3DEXTRADLLS="d3dcompiler_33,d3dcompiler_34,d3dcompiler_35,d3dcompiler_36,d3dcompiler_37,d3dcompiler_38,d3dcompiler_39,d3dcompiler_40,d3dcompiler_41,d3dcompiler_42,d3dcompiler_43,d3dcompiler_46,d3dcompiler_47,d3dx10_33,d3dx10_34,d3dx10_35,d3dx10_36,d3dx10_37,d3dx10_38,d3dx10_39,d3dx10_40,d3dx10_41,d3dx10_42,d3dx10_43,d3dx10,d3dx11_42,d3dx11_43,d3dx9_24,d3dx9_25,d3dx9_26,d3dx9_27,d3dx9_28,d3dx9_29,d3dx9_30,d3dx9_31,d3dx9_32,d3dx9_33,d3dx9_34,d3dx9_35,d3dx9_36,d3dx9_37,d3dx9_38,d3dx9_39,d3dx9_40,d3dx9_41,d3dx9_42,d3dx9_43"
    if [ "$D3D_EXTRAS_VERSION" == "Default" ]
        then
            export "$(grep -wo 'D3D_EXTRAS_VERSION.*$' "$LW_DEF_CFG"|tr -d \')"
    fi
    if [[ "$D3D_EXTRAS" == 1 ]]
        then
            if [ ! -z "$D3D_GIT_RELEASE_URL" ]
                then
                    GIT_RELEASE_URL="$D3D_GIT_RELEASE_URL"
            fi
            if dll_manager "d3d_extras" "$D3D_EXTRAS_VERSION"
                then
                    wdllover_upd "$(echo $check_dlls_slk|sed 's/.dll//g'|tr ' ' ',')=n"
                else
                    export D3D_EXTRAS=0
                    wdllover_upd "${ALLD3DEXTRADLLS}=b"
                    print_error yad "DLL Manager" "D3D EXTRAS is disabled!"
            fi
        else
            export D3D_EXTRAS=0
            wdllover_upd "${ALLD3DEXTRADLLS}=b"
            print_info "D3D EXTRAS is disabled!"
    fi
}

check_dgvoodoo2() {
    if [ ! -z "$1" ] ; then export DGVOODOO2="$1" ; if [ ! -z "$2" ] ; then export DGVOODOO2_VERSION="$2" ; fi ; fi
    export ALLDGVOODOO2DLLS="d3dimm,ddraw,glide2x,glide3x,glide"
    if [ "$DGVOODOO2_VERSION" == "Default" ]
        then
            export "$(grep -wo 'DGVOODOO2_VERSION.*$' "$LW_DEF_CFG"|tr -d \')"
    fi
    if [[ "$DGVOODOO2" == 1 ]]
        then
            if [ ! -z "$DGVO_GIT_RELEASE_URL" ]
                then
                    GIT_RELEASE_URL="$DGVO_GIT_RELEASE_URL"
            fi
            if dll_manager "dgvoodoo2" "$DGVOODOO2_VERSION"
                then
                    wdllover_upd "$(echo $check_dlls_slk|sed 's/.dll//g'|tr ' ' ',')=n"
                else
                    export DGVOODOO2=0
                    wdllover_upd "${ALLDGVOODOO2DLLS}=b"
                    print_error yad "DLL Manager" "DGVOODOO2 is disabled!"
            fi
        else
            export DGVOODOO2=0
            wdllover_upd "${ALLDGVOODOO2DLLS}=b"
            print_info "DGVOODOO2 is disabled!"
    fi
}

check_battleye() {
    if [ ! -z "$1" ] ; then export BATTLEYE="$1" ; fi
    if [ "$BATTLEYE" == 1 ]
        then
            if runtime_manager "battleye"
                then
                    export PROTON_BATTLEYE_RUNTIME="$LW_RUNTIME_DIR/battleye_runtime"
                else
                    unset PROTON_BATTLEYE_RUNTIME
            fi
    fi
}

runtime_manager() {
    try_mkdir "$LW_RUNTIME_DIR"
    if [ "$1" == "winetricks" ]
        then
            GIT_RELEASE_URL="$WTRX_GIT_RELEASE_URL"
        else
            GIT_RELEASE_URL="$BUILD_GIT_RELEASE_URL"
    fi
    if [ -z "$(cd "$LW_RUNTIME_DIR" ; find ~+ -type d -name "$1"* -print 2>/dev/null)" ]
        then
            FORCE_UPDATE=1
    fi
    if [[ ! -z "$CHK_UPDATE" && "$CHK_UPDATE" != 0 && "$NETSTATUS" != 0 && -z "$(cd "$LW_RUNTIME_DIR" ; find ~+ -type d -name "$1"* -mtime -$CHK_UPDATE -print 2>/dev/null)" ]] || [ ! -z "$FORCE_UPDATE" ]
        then
            if [[ "$NETSTATUS" == 1 ]]
                then
                    try_rm "$(cd "$LW_RUNTIME_DIR" ; find ~+ -type d -name "$1"* -print 2>/dev/null)" &>/dev/null
                    print_info notify "Checking updates for $1 runtime..."
                    if check_git_release "$1"
                        then
                            print_info notify "Download and install $1 runtime..."
                            if try_download "$GIT_RELEASE" "$LW_RUNTIME_DIR"
                                then
                                    for archive_type in "gz" "xz" "zst"
                                        do
                                            dll_archive="$(ls "$LW_RUNTIME_DIR"/"$1"*.tar.${archive_type} 2>/dev/null)"
                                            if [ -f "$dll_archive" ]
                                                then
                                                    if unpack_tar_${archive_type} "$dll_archive" "$LW_RUNTIME_DIR/"
                                                        then
                                                            try_rm "$dll_archive"*
                                                            touch "$(cd "$LW_RUNTIME_DIR" ; find ~+ -type d -name "$1"* -print 2>/dev/null)"
                                                            if [ "$1" == "winetricks" ]; then try_fix_wrtx; fi
                                                            unset FORCE_UPDATE
                                                            check_$1 2>/dev/null
                                                        else
                                                            try_rm "$dll_archive"*
                                                            try_rm "$(cd "$LW_RUNTIME_DIR" ; find ~+ -type d -name "$1"* -print 2>/dev/null)"
                                                            download_error && check_$1 2>/dev/null
                                                    fi
                                            fi
                                    done
                                else
                                    download_error && check_$1 2>/dev/null
                            fi
                        else
                            print_error "$1 not installed!"
                            unset FORCE_UPDATE
                            return 1
                    fi
            else
                if [ "$NETSTATUS" == 0 ]
                    then
                        print_error yad "Runtime Manager" "No internet connection, it is not possible to download $1"
                fi
                return 1
        fi
    fi
}

check_winepfx() {
    if [ ! -z "$1" ] ; then export WINEPREFIX="$1" ; fi
    DESKTOP_XDG=("DESKTOP" "DOCUMENTS" "MUSIC" "VIDEOS" "PICTURES" "DOWNLOAD" "TEMPLATES")
    DEF_WDESK_MYDIR=("Desktop" "My Documents" "My Music" "My Videos" "My Pictures" "My Downloads" "My Templates")
    DEF_WDESK_DIR=("Desktop" "Documents" "Music" "Videos" "Pictures" "Downloads" "Templates")
    export WTRX_LOG="$WINEPREFIX/winetricks.log"
    export PFX_DLL32_PTH=""$WINEPREFIX"/drive_c/windows/syswow64"
    export PFX_DLL64_PTH=""$WINEPREFIX"/drive_c/windows/system32"
    try_mkdir "$WINEPREFIX"
    try_mkdir "$PFX_DLL32_PTH"
    try_mkdir "$PFX_DLL64_PTH"
    try_mkdir "$WINEPREFIX/drive_c"
    try_mkdir "$WINEPREFIX/dosdevices"
    try_mkdir "$WINEPREFIX/drive_c/users/steamuser"
    [ ! -d "$WINEPREFIX/dosdevices/c:" ] && try_ln "$WINEPREFIX/drive_c" "$WINEPREFIX/dosdevices/c:"
    [ ! -d "$WINEPREFIX/dosdevices/z:" ] && try_ln "/" "$WINEPREFIX/dosdevices/z:"
    if [[ -d "$WINEPREFIX/drive_c/users/$USER" && ! -L "$WINEPREFIX/drive_c/users/$USER" ]]
        then
            if try_cp "$WINEPREFIX/drive_c/users/$USER/"* "$WINEPREFIX/drive_c/users/steamuser/"
                then
                    try_rm "$WINEPREFIX/drive_c/users/$USER"
            fi
    fi
    [ ! -d "$WINEPREFIX/drive_c/users/$USER" ] && try_ln "$WINEPREFIX/drive_c/users/steamuser" "$WINEPREFIX/drive_c/users/$USER"
    for comprt in $(seq 1 32)
        do
            if [ ! -L "$WINEPREFIX/dosdevices/com$comprt" ]
                then
                    ln -sf "/dev/ttyS$(( $comprt - 1 ))" "$WINEPREFIX/dosdevices/com$comprt"
            fi
    done
    if [[ ! -f "$WINEPREFIX/userdef.reg" || ! -f "$WINEPREFIX/system.reg" || ! -f "$WINEPREFIX/user.reg" || ! -f "$WINEPREFIX/.update-timestamp" ]]
        then
            if [[ ! -z "$OLD_WINE" && -f "$OLD_WINE" ]]
                then
                    "$OLD_WINE" wineboot -i &>/dev/null
            elif [ -f "$WINE" ]
                then
                    "$WINE" wineboot -i &>/dev/null
            else
                print_error yad "Wine prefix initialization completed with error!"
                return 1
            fi
            print_info notify "Wine prefix initialization successfully completed!"
            try_shutdown_wine
            export NEEDCHKDLL=1
    fi
    (IFS=$'\n' ; while read XDGDESK_DIR <&3 && read WINEDESK_DIR <&4
        do
            XDGUSERDIRPTH="$(xdg-user-dir $XDGDESK_DIR)"
            WDESKDIRPTH="$WINEPREFIX/drive_c/users/steamuser/$WINEDESK_DIR"
            if [[ ! -z "$WINE_SANDBOX" && "$WINE_SANDBOX" == 0 ]]
                then
                    if [ "$DESKLNK" != "$XDGUSERDIRPTH" ]
                        then
                            if [[ ! -L "$WDESKDIRPTH" && -d "$WDESKDIRPTH" ]]
                                then
                                    try_mv "$WDESKDIRPTH" "$WDESKDIRPTH.bc"
                            elif [[ -L "$WDESKDIRPTH" && ! -d "$WDESKDIRPTH" ]]
                                then
                                    try_rm "$WDESKDIRPTH"
                            fi
                            [ ! -d "$WDESKDIRPTH" ] && try_ln "$XDGUSERDIRPTH" "$WDESKDIRPTH"
                    fi
            elif [[ ! -z "$WINE_SANDBOX" && "$WINE_SANDBOX" == 1 ]]
                then
                    if [[ -L "$WDESKDIRPTH" && -d "$WDESKDIRPTH.bc" ]]
                        then
                            try_rm "$WDESKDIRPTH"
                            try_mv "$WDESKDIRPTH.bc" "$WDESKDIRPTH"
                    elif [[ -L "$WDESKDIRPTH" && ! -d "$WDESKDIRPTH.bc" ]]
                        then
                            try_rm "$WDESKDIRPTH"
                            try_mkdir $WDESKDIRPTH
                    fi
            fi
    done 3< <(printf '%s\n' "${DESKTOP_XDG[@]}") 4< <(printf '%s\n' "${DEF_WDESK_DIR[@]}"))
    (IFS=$'\n' ; for winedir_ln in ${DEF_WDESK_MYDIR[@]/Desktop}
        do
            DESKDIRLNK="$WINEPREFIX/drive_c/users/steamuser/$winedir_ln"
            NOMYDESKDIR="$WINEPREFIX/drive_c/users/steamuser/$(echo "$winedir_ln"|sed 's/^My //')"
            check_symlink "$DESKDIRLNK"
            if [[ ! -L "$DESKDIRLNK" && ! -d "$DESKDIRLNK" ]]
                then
                    try_mkdir "$NOMYDESKDIR"
                    try_ln "$NOMYDESKDIR" "$DESKDIRLNK"
            elif [[ -L "$DESKDIRLNK" && -z "$(readlink -f "$DESKDIRLNK"|grep -o 'steamuser')" ]]
                then
                    try_rm "$DESKDIRLNK"
                    try_ln "$NOMYDESKDIR" "$DESKDIRLNK"
            fi
    done)
    DESKAPPDATA="$WINEPREFIX/drive_c/users/steamuser/Application Data"
    DESKLOCSETT="$WINEPREFIX/drive_c/users/steamuser/Local Settings"
    if [[ ! -d "$DESKAPPDATA" || -z "$(readlink -f "$DESKAPPDATA"|grep -o 'steamuser')" ]]
        then
            try_rm "$DESKAPPDATA" &>/dev/null
            try_ln "$WINEPREFIX/drive_c/users/steamuser/AppData/Roaming" "$DESKAPPDATA"
    fi
    if [[ ! -d "$DESKLOCSETT" || -z "$(readlink -f "$DESKLOCSETT"|grep -o 'steamuser')" ]]
        then
            try_rm "$DESKLOCSETT" &>/dev/null
            try_ln "$WINEPREFIX/drive_c/users/steamuser/AppData/Local" "$DESKLOCSETT"
    fi
    try_mkdir "$WINEPREFIX/drive_c/windows/Fonts/"
    if [ "$WINE_VERSION" == "System" ]
        then
            try_ln "/usr/share/wine/fonts/"tahoma.ttf "$WINEPREFIX/drive_c/windows/Fonts/"tahoma.ttf &>/dev/null
        else
            try_ln "$WINEDIR/share/fonts/"LiberationSans-Regular.ttf "$WINEPREFIX/drive_c/windows/Fonts/"arial.ttf &>/dev/null
            try_ln "$WINEDIR/share/fonts/"LiberationSans-Bold.ttf "$WINEPREFIX/drive_c/windows/Fonts/"arialbd.ttf &>/dev/null
            try_ln "$WINEDIR/share/fonts/"LiberationSerif-Regular.ttf "$WINEPREFIX/drive_c/windows/Fonts/"times.ttf &>/dev/null
            try_ln "$WINEDIR/share/fonts/"LiberationMono-Regular.ttf "$WINEPREFIX/drive_c/windows/Fonts/"cour.ttf &>/dev/null
            try_ln "$WINEDIR/share/fonts/"LiberationMono-Bold.ttf "$WINEPREFIX/drive_c/windows/Fonts/"courbd.ttf &>/dev/null
            try_ln "$WINEDIR/share/fonts/"msyh.ttf "$WINEPREFIX/drive_c/windows/Fonts/"msyh.ttf &>/dev/null
            try_ln "$WINEDIR/share/fonts/"malgun.ttf "$WINEPREFIX/drive_c/windows/Fonts/"malgun.ttf &>/dev/null
            try_ln "$WINEDIR/share/fonts/"micross.ttf "$WINEPREFIX/drive_c/windows/Fonts/"micross.ttf &>/dev/null
            try_ln "$WINEDIR/share/fonts/"nirmala.ttf "$WINEPREFIX/drive_c/windows/Fonts/"nirmala.ttf &>/dev/null
            try_ln "$WINEDIR/share/fonts/"simsun.ttc "$WINEPREFIX/drive_c/windows/Fonts/"simsun.ttc &>/dev/null
            try_ln "$WINEDIR/share/fonts/"msgothic.ttc "$WINEPREFIX/drive_c/windows/Fonts/"msgothic.ttc &>/dev/null
            try_ln "$WINEDIR/share/wine/fonts/"tahoma.ttf "$WINEPREFIX/drive_c/windows/Fonts/"tahoma.ttf &>/dev/null
    fi
}

check_vulkan_icd() {
    if [ ! -z "$1" ] ; then export VKICDFILES="$1" ; fi
    if [ "$VKICDFILES" == "AUTO" ]
        then
            export VK_ICD_FILENAMES="$(find "$VLK_ICD_DIR" -type f 2>/dev/null|tr '\n' ':'|sed 's/.$//')"
    elif [ "$VKICDFILES" == "Nvidia" ]
        then
            export VK_ICD_FILENAMES="$(find "$VLK_ICD_DIR"/nvidia* -type f 2>/dev/null|tr '\n' ':'|sed 's/.$//')"
    elif [ "$VKICDFILES" == "Intel" ]
        then
            export VK_ICD_FILENAMES="$(find "$VLK_ICD_DIR"/intel* -type f 2>/dev/null|tr '\n' ':'|sed 's/.$//')"
    elif [ "$VKICDFILES" == "AMD" ]
        then
            export VK_ICD_FILENAMES="$(find "$VLK_ICD_DIR"/radeon* -type f 2>/dev/null|tr '\n' ':'|sed 's/.$//')"
    elif [ "$VKICDFILES" == "Lvp" ]
        then
            export VK_ICD_FILENAMES="$(find "$VLK_ICD_DIR"/lvp* -type f 2>/dev/null|tr '\n' ':'|sed 's/.$//')"
    fi
}

check_prime() {
    if [ ! -z "$1" ] ; then export PRIME="$1" ; fi
    if [ "$PRIME" == 1 ]
        then
            export __GLX_VENDOR_LIBRARY_NAME="nvidia"
            export __NV_PRIME_RENDER_OFFLOAD=1
            export __VK_LAYER_NV_optimus="NVIDIA_only"
        else
            unset __GLX_VENDOR_LIBRARY_NAME __NV_PRIME_RENDER_OFFLOAD __VK_LAYER_NV_optimus
    fi
}

check_esync() {
    if [ ! -z "$1" ] ; then export ESYNC="$1" ; fi
    if [ "$ESYNC" == 1 ]
        then
            export WINEESYNC=1
        else
            unset WINEESYNC
    fi
}

check_fsync() {
    if [ ! -z "$1" ] ; then export FSYNC="$1" ; fi
    if [ "$FSYNC" == 1 ]
        then
            export WINEFSYNC=1
            export WINEFSYNC_FUTEX2=1
        else
            unset WINEFSYNC WINEFSYNC_FUTEX2
    fi
}

check_vsync() {
    if [ ! -z "$1" ] ; then export VSYNC="$1" ; fi
    case "$VSYNC" in
        Enabled) export vblank_mode=1
                 export __GL_SYNC_TO_VBLANK=1
                 print_info notify "Vsync in force enabled mode!" ;;
        Disabled) unset vblank_mode
                  unset __GL_SYNC_TO_VBLANK ;;
    esac
}

check_fsr() {
    if [ ! -z "$1" ] ; then export FSR="$1" ; fi
    if [[ ! -z "$FSR" && "$FSR" != "Disabled" ]]
        then
            export WINE_FULLSCREEN_FSR=1
            export WINE_FULLSCREEN_FSR_STRENGTH="$FSR"
        else
            unset WINE_FULLSCREEN_FSR WINE_FULLSCREEN_FSR_STRENGTH
    fi
}

check_runtime() {
    if [ ! -z "$1" ] ; then export RUNTIME="$1" ; if [ ! -z "$2" ] ; then export PREF_SYS_LIBS="$2" ; fi ; fi
    if [ "$RUNTIME" != 1 ]
        then
            export LD_LIBRARY_PATH="$LD_LIBRARY_PATH"
        else
            #check_gamecontrollerdb
            #check_innoextract
            #check_network-tools
            #check_p7zip
            check_ubuntu1804-i686
            check_ubuntu1804-x86_64
            if [ "$PREF_SYS_LIBS" == 1 ]
                then
                    export LD_LIBRARY_PATH="$WINEDIR/lib64:$WINEDIR/lib:/usr/lib:/usr/lib32:/opt/cuda/lib64:/usr/lib/openmpi:/opt/cuda/extras/CUPTI/lib64:/opt/cuda/nvvm/lib64:/usr/lib/libfakeroot:/usr/lib64:$LW_RUNTIME_DIR/Ubuntu-18.04-i686:$LW_RUNTIME_DIR/steam/i386/lib/i386-linux-gnu:$LW_RUNTIME_DIR/steam/i386/lib:$LW_RUNTIME_DIR/steam/i386/usr/lib/i386-linux-gnu:$LW_RUNTIME_DIR/steam/i386/usr/lib:$LW_RUNTIME_DIR/Ubuntu-18.04-x86_64:$LW_RUNTIME_DIR/steam/amd64/lib/x86_64-linux-gnu:$LW_RUNTIME_DIR/steam/amd64/lib:$LW_RUNTIME_DIR/steam/amd64/usr/lib/x86_64-linux-gnu:$LW_RUNTIME_DIR/steam/amd64/usr/lib"
                else
                    export LD_LIBRARY_PATH="$WINEDIR/lib64:$WINEDIR/lib:$LW_RUNTIME_DIR/Ubuntu-18.04-i686:$LW_RUNTIME_DIR/steam/i386/lib/i386-linux-gnu:$LW_RUNTIME_DIR/steam/i386/lib:$LW_RUNTIME_DIR/steam/i386/usr/lib/i386-linux-gnu:$LW_RUNTIME_DIR/steam/i386/usr/lib:$LW_RUNTIME_DIR/Ubuntu-18.04-x86_64:$LW_RUNTIME_DIR/steam/amd64/lib/x86_64-linux-gnu:$LW_RUNTIME_DIR/steam/amd64/lib:$LW_RUNTIME_DIR/steam/amd64/usr/lib/x86_64-linux-gnu:$LW_RUNTIME_DIR/steam/amd64/usr/lib:$LD_LIBRARY_PATH"
            fi
    fi
}

check_ld_library() {
    if [ ! -z "$1" ] ; then export LD_LIBRARY_PATH="$1" ; fi
    if [ ! -z "$LD_LIBRARY_PATH" ]
        then
            if [ -z "$(echo $LD_LIBRARY_PATH|grep "$WINEDIR/lib64:$WINEDIR/lib")" ]
                then
                    export LD_LIBRARY_PATH="$WINEDIR/lib64:$WINEDIR/lib:$LD_LIBRARY_PATH"
            fi
        else
            export LD_LIBRARY_PATH="$WINEDIR/lib64:$WINEDIR/lib"
    fi
}

check_path() {
    if [ ! -z "$1" ] ; then export PATH="$1" ; fi
    if [ ! -z "$PATH" ]
        then
            export PATH="$WINEDIR/bin:$PATH"
        else
            export PATH="$WINEDIR/bin"
    fi
}

check_hold_terminal() {
    if [[ "$HOLD_TERMINAL" == 1 ]]
        then
            if [[ "$1" == "gnome" || ! -z "$(echo "$LW_TERM_APP"|grep -wo "gnome-terminal")" ]]
                then
                    unset HOLD_TERMINAL
            elif [[ "$1" == "lxterm" || ! -z "$(echo "$LW_TERM_APP"|grep -wo "lxterminal")" ]]
                then
                    unset HOLD_TERMINAL
            elif [[ "$1" == "xterm" || ! -z "$(echo "$LW_TERM_APP"|grep -wo 'xterm')" ]]
                then
                    export TERM_HOLD="-hold"
            elif [[ "$1" == "deepin" || ! -z "$(echo "$LW_TERM_APP"|grep -wo 'deepin')" ]]
                then
                    export TERM_HOLD="--keep-open"
            else
                export TERM_HOLD="--hold"
            fi
    fi
}

check_terminal() {
    if [ ! -z "$1" ] ; then export LW_TERM_APP="$1" ; fi
    check_hold_terminal
    if [[ ! -z "$LW_TERM_APP" && ! -z "$(which "$(basename "$LW_TERM_APP")" 2>/dev/null)" ]]
        then
            if [ ! -z "$(echo "$LW_TERM_APP"|grep -wo "gnome-terminal")" ]
                then
                    export TERM_APP="$LW_TERM_APP --wait --"
            elif [ ! -z "$(echo "$LW_TERM_APP"|grep -wo "lxterminal")" ]
                then
                    export TERM_APP="lxterminal -e"
            elif [ ! -z "$(echo "$LW_TERM_APP"|grep -wo "xfce4-terminal")" ]
                then
                    export TERM_APP="$LW_TERM_APP $TERM_HOLD -x"
            else
                export TERM_APP="$LW_TERM_APP $TERM_HOLD -e"
            fi
        else
            if [ ! -z "$(which konsole 2>/dev/null)" ]
                then
                    export TERM_APP="konsole $TERM_HOLD -e"
            elif [ ! -z "$(which gnome-terminal 2>/dev/null)" ]
                then
                    check_hold_terminal gnome
                    export TERM_APP="gnome-terminal --wait --"
            elif [ ! -z "$(which kitty 2>/dev/null)" ]
                then
                    export TERM_APP="kitty $TERM_HOLD -e"
            elif [ ! -z "$(which deepin-terminal 2>/dev/null)" ]
                then
                    check_hold_terminal deepin
                    export TERM_APP="deepin-terminal $TERM_HOLD -e"
            elif [ ! -z "$(which lxterminal 2>/dev/null)" ]
                then
                    check_hold_terminal lxterm
                    export TERM_APP="lxterminal -e"
            elif [ ! -z "$(which xfce4-terminal 2>/dev/null)" ]
                then
                    export TERM_APP="xfce4-terminal $TERM_HOLD -x"
            else
                check_hold_terminal xterm
                export TERM_APP="xterm $TERM_HOLD -e"
            fi
    fi
}

check_pulse_latency() {
    if [ ! -z "$1" ] ; then export PULSE_LTCY="$1" ; fi
    if [ "$PULSE_LTCY" == 1 ]
        then
            export PULSE_LATENCY_MSEC="60"
    fi
}

check_vkbasalt_cfg() {
    try_mkdir "$(dirname "$VKBASALT_CONFIG_FILE")"
    if [[ ! -f "$VKBASALT_CONFIG_FILE" && -d "$RESHADE_DIR" ]] || [[ -f "$VKBASALT_CONFIG_FILE" && -d "$RESHADE_DIR" && -z "$(grep -wo 'reshadeTexturePath' "$VKBASALT_CONFIG_FILE" 2>/dev/null)" ]]
        then
            echo -e "reshadeTexturePath = "$RESHADE_DIR"/textures\nreshadeIncludePath = "$RESHADE_DIR"/shaders" > "$VKBASALT_CONFIG_FILE"
            (while read RES_NAME <&3 && read RES_FLPTH <&4
                do
                    echo "$RES_NAME = $RES_FLPTH"
            done 3< <(ls -1 "$RESHADE_DIR"/shaders/*.fx|sed 's/.fx$//'|xargs -I {} basename {}) \
                 4< <(ls -1 "$RESHADE_DIR"/shaders/*.fx)) >> "$VKBASALT_CONFIG_FILE"
    elif [[ -f "$VKBASALT_CONFIG_FILE" && ! -d "$RESHADE_DIR" && ! -z "$(grep -wo 'reshadeTexturePath' "$VKBASALT_CONFIG_FILE" 2>/dev/null)" ]]
        then
            try_rm "$VKBASALT_CONFIG_FILE"
            export VKBASALT_EFFECTS="cas"
    elif [[ ! -f "$VKBASALT_CONFIG_FILE" && ! -d "$RESHADE_DIR" ]]
        then
            export VKBASALT_EFFECTS="cas"
    fi
    if [ -z "$(grep -wo 'toggleKey' "$VKBASALT_CONFIG_FILE" 2>/dev/null)" ]
        then
            echo "toggleKey = Home" >> "$VKBASALT_CONFIG_FILE"
    fi
}

check_vkbasalt_eff() {
    if [ ! -z "$1" ] ; then export VKBASALT="$1" ; fi
    if [[ "$VKBASALT" == 1 ]]
        then
            export ENABLE_VKBASALT=1
            if [ -z "$(grep -wo "effects" "$VKBASALT_CONFIG_FILE" 2>/dev/null)" ]
                then
                    echo "effects = $VKBASALT_EFFECTS" >> "$VKBASALT_CONFIG_FILE"
                else
                    if [ "$(grep "effects = $VKBASALT_EFFECTS" "$VKBASALT_CONFIG_FILE" 2>/dev/null|sed 's/effects = //')" != "$VKBASALT_EFFECTS" ]
                        then
                            sed -i "s/effects = .*/effects = $VKBASALT_EFFECTS/g" "$VKBASALT_CONFIG_FILE"
                    fi
            fi
            if [ "$VKBASALT_FFX_CAS" != "Disabled" ]
                then
                    if [ -z "$(grep -wo "casSharpness" "$VKBASALT_CONFIG_FILE" 2>/dev/null)" ]
                        then
                            echo "casSharpness = $VKBASALT_FFX_CAS" >> "$VKBASALT_CONFIG_FILE"
                        else
                            if [ "$(grep "casSharpness = $VKBASALT_FFX_CAS" "$VKBASALT_CONFIG_FILE" 2>/dev/null|sed 's/casSharpness = //')" != "$VKBASALT_FFX_CAS" ]
                                then
                                    sed -i "s/casSharpness.*/casSharpness = $VKBASALT_FFX_CAS/g" "$VKBASALT_CONFIG_FILE"
                            fi
                    fi
                else
                    VKBASALT_OTHEFF="$(grep -w "effects" "$VKBASALT_CONFIG_FILE" 2>/dev/null|sed 's/effects = //'|sed 's/cas//'|sed 's/::/:/'|sed 's/^://'|sed 's/:$//')"
                    if [ ! -z "$VKBASALT_OTHEFF" ]
                        then
                            sed -i "s/effects = .*/effects = $VKBASALT_OTHEFF/" "$VKBASALT_CONFIG_FILE"
                        else
                            sed -i "/effects.*/d" "$VKBASALT_CONFIG_FILE" 2>/dev/null
                            sed -i "s/export VKBASALT.*/export VKBASALT='0'/" "$LW_CFG" 2>/dev/null
                            export DISABLE_VKBASALT=1
                            unset VKBASALT
                    fi
                    sed -i "/casSharpness.*/d" "$VKBASALT_CONFIG_FILE" 2>/dev/null
            fi
            if [ ! -z "$VK_INSTANCE_LAYERS" ]
                then
                    export VK_INSTANCE_LAYERS="VK_LAYER_VKBASALT_post_processing:$VK_INSTANCE_LAYERS"
                else
                    export VK_INSTANCE_LAYERS="VK_LAYER_VKBASALT_post_processing"
            fi
        else
            export DISABLE_VKBASALT=1
            unset VKBASALT
            print_info notify "VkBasalt is disabled!"
    fi
}

check_reset_pulse() {
    if [ ! -z "$1" ] ; then export RESET_PULSE="$1" ; fi
    if [ "$RESET_PULSE" == 1 ]
        then
            if [[ ! -z "$(pgrep pulseeffects)" && ! -z "$(pgrep pulseaudio)" ]]
                then
                    pkill -15 pulseeffects
                    pulseaudio -k
                    if [ -z "$(pgrep pulseaudio)" ]
                        then
                            pulseaudio --start
                    fi
                    pulseeffects --gapplication-service
                    print_info notify "Pulseaudio and Pulseeffects restarted!"
            elif [ ! -z "$(pgrep pulseaudio)" ]
                then
                    pulseaudio -k
                    if [ -z "$(pgrep pulseaudio)" ]
                        then
                            pulseaudio --start
                    fi
                    print_info notify "Pulseaudio restarted!"
            else
                print_error notify "Pulseaudio not running!"
            fi
    fi
}

check_win_version() {
    if [ ! -z "$1" ] ; then export WIN_VER="$1" ; fi
    if [ -z "$(cat "$WINEPREFIX/system.reg" 2>/dev/null|grep -i "Microsoft Windows $WIN_VER" 2>/dev/null)" ]
        then
            if [[ ! -z "$WIN_VER" && "$WIN_VER" == "xp" ]]
                then
                    export WIN_VER="xp64"
            fi
            if [[ ! -z "$OLD_WINE" && -f "$OLD_WINE" ]]
                then
                    "$OLD_WINE" winecfg -v win$WIN_VER &>/dev/null
            elif [ -f "$WINE" ]
                then
                    "$WINE" winecfg -v win$WIN_VER &>/dev/null
            else
                print_error notify "Windows version not changed to Windows $WIN_VER"
                return 1
            fi
            print_info notify "Windows version changed to Windows $WIN_VER"
            try_shutdown_wine
        else
            return 1
    fi
}

check_crash_dialog() {
    if [ ! -z "$1" ] ; then export SHOW_WINEDBG="$1" ; fi
    if [ "$SHOW_WINEDBG" == 1 ]
        then
            wdllover_upd "winedbg.exe=b"
    elif [[ "$SHOW_WINEDBG" == 0 && ! -z "$(echo "$WINEDLLOVERRIDES"|grep -o "winedbg.exe=b")" ]]
        then
            export WINEDLLOVERRIDES="$(echo "$WINEDLLOVERRIDES"|sed 's/winedbg.exe=b//'|sed 's/;;/;/'|sed 's/^;//'|sed 's/;$//')"
    else
        wdllover_upd "winedbg.exe="
    fi
}

check_single_cpu() {
    if [ ! -z "$1" ] ; then export SINGLE_CPU="$1" ; fi
    if [ "$SINGLE_CPU" == 1 ]
        then
            export RUN_SINGLE_CPU="taskset -c 0"
            print_info notify "Application will run on a single CPU core"
    fi
}

check_vkd3dconfig() {
    if [ ! -z "$1" ] ; then export VKD3DCFG="$1" ; fi
    if [[ ! -z "$VKD3DCFG" && "$VKD3DCFG" != "Disabled" ]]
        then
            vkd3dcfg_upd "$VKD3DCFG"
    fi
}

check_dxr() {
    if [ ! -z "$1" ] ; then export DXR="$1" ; fi
    if [ "$DXR" == "1.1" ]
        then
            vkd3dcfg_upd "dxr11"
    elif [ "$DXR" == "1.0" ]
        then
            vkd3dcfg_upd "dxr"
    elif [[ "$DXR" == "Disabled" && ! -z "$(echo "$VKD3D_CONFIG"|grep -o "dxr")" ]]
        then
            export VKD3D_CONFIG="$(echo "$VKD3D_CONFIG"|sed 's/dxr11//'|sed 's/dxr//'|sed 's/,,/,/'|sed 's/^,//'|sed 's/,$//')"
    fi
}

check_winetricks() {
    runtime_manager "winetricks"
}

check_gamecontrollerdb() {
    runtime_manager "gamecontrollerdb"
}

check_innoextract() {
    runtime_manager "innoextract-1.9-linux"
}

check_network-tools() {
    runtime_manager "network-tools"
}

check_p7zip() {
    runtime_manager "p7zip"
}

check_ubuntu1804-i686() {
    runtime_manager "Ubuntu-18.04-i686"
}

check_ubuntu1804-x86_64() {
    runtime_manager "Ubuntu-18.04-x86_64"
}

upd_winetricks() {
    export FORCE_UPDATE=1
    check_winetricks
}
upd_battleye() {
    export FORCE_UPDATE=1
    check_battleye
}
upd_gamecontrollerdb() {
    export FORCE_UPDATE=1
    check_gamecontrollerdb
}
upd_innoextract() {
    export FORCE_UPDATE=1
    check_innoextract
}
upd_network-tools() {
    export FORCE_UPDATE=1
    check_network-tools
}
upd_p7zip() {
    export FORCE_UPDATE=1
    check_p7zip
}
upd_ubuntu1804-i686() {
    export FORCE_UPDATE=1
    check_ubuntu1804-i686
}
upd_ubuntu1804-x86_64() {
    export FORCE_UPDATE=1
    check_ubuntu1804-x86_64
}
upd_d3d_extras() {
    sed -i '/export D3D_EXTRAS_VERSION.*/d' "$LW_CFG" 2>/dev/null
    unset D3D_EXTRAS_VERSION
    export D3D_EXTRAS=1
    export NEEDCHKDLL=1
    export FORCE_DLL_UPDATE=1
    check_d3d_extras
}
upd_dgvoodoo2() {
    sed -i '/export DGVOODOO2_VERSION.*/d' "$LW_CFG" 2>/dev/null
    unset DGVOODOO2_VERSION
    export DGVOODOO2=1
    export NEEDCHKDLL=1
    export FORCE_DLL_UPDATE=1
    check_dgvoodoo2
}
upd_dxvk() {
    sed -i '/export DXVK_VERSION.*/d' "$LW_CFG" 2>/dev/null
    unset DXVK_VERSION
    export DXVK=1
    export NEEDCHKDLL=1
    export FORCE_DLL_UPDATE=1
    check_dxvk
}
upd_dxvk_nvapi() {
    sed -i '/export DXVK_NVAPI_VERSION.*/d' "$LW_CFG" 2>/dev/null
    unset DXVK_NVAPI_VERSION
    export DXVK_NVAPI=1
    export NEEDCHKDLL=1
    export FORCE_DLL_UPDATE=1
    check_dxvk-nvapi
}
upd_vkd3d() {
    sed -i '/export VKD3D_VERSION.*/d' "$LW_CFG" 2>/dev/null
    unset VKD3D_VERSION
    export VKD3D=1
    export NEEDCHKDLL=1
    export FORCE_DLL_UPDATE=1
    check_vkd3d
}
upd_all() {
    upd_battleye &
    sleep 0.2
    upd_gamecontrollerdb &
    sleep 0.2
    upd_innoextract &
    sleep 0.2
    upd_network-tools &
    sleep 0.2
    upd_p7zip &
    sleep 0.2
    upd_ubuntu1804-i686 &
    sleep 0.2
    upd_ubuntu1804-x86_64 &
    sleep 0.2
    upd_d3d_extras &
    sleep 0.2
    upd_dgvoodoo2 &
    sleep 0.2
    upd_dxvk &
    sleep 0.2
    upd_dxvk_nvapi &
    sleep 0.2
    upd_vkd3d &
    sleep 0.2
    upd_winetricks $
    wait
}

lu_update() {
    LWRUNTIMELST="dxvk vkd3d dxvk-nvapi d3d_extras dgvoodoo2 battleye_runtime winetricks gamecontrollerdb innoextract network-tools p7zip ubuntu1804-i686 ubuntu1804-x86_64"
    if [ "$2" == "all" ]
        then
            upd_all|settingbar
    elif [[ -z "$2" || "$2" == "openupdtr" ]]
        then
            if [ -z "$(pgrep -fa yad|grep "Runtime Updater"|awk '{print$1}')" ]; then :
                else
                    print_error yad "Runtime Updater" "Runtime Updater already runing!"
                    exit 1
            fi
            LW_RUN_UPD="$(echo -e "\n$(echo "$LWRUNTIMELST"|tr ' ' '\n'|sed 's/^ *//'|sed '/^[[:space:]]*$/d'|sed ':a;N;$!ba;s/\n/\n\n/g')"| \
            yad --title "Runtime Updater" --list --checklist --separator "\n" --column="" --column="Select runtime for update:" \
                --text-align=center --center --window-icon="$DEF_ICO" \
                --width=300 --height=500 --button="UPDATE ALL:2"  --button="EXIT:1" --button="OK:0" 2>/dev/null)"
            if [ "$?" == "2" ]
                then
                    upd_all|settingbar
            elif [ ! -z "$(echo "$LW_RUN_UPD"|head -1)" ]
                then
                    LW_RUN_UPD="$(echo "$LW_RUN_UPD"|sed '/^TRUE$/d'|sed '/^$/d')"
                    (IFS=$'\n' ; for LWRUNUPD in $LW_RUN_UPD
                        do
                            case "$LWRUNUPD" in
                                battleye_runtime) upd_battleye &
                                                  sleep 0.2 ;;
                                gamecontrollerdb) upd_gamecontrollerdb &
                                                  sleep 0.2 ;;
                                innoextract) upd_innoextract &
                                             sleep 0.2 ;;
                                network-tools) upd_network-tools &
                                               sleep 0.2 ;;
                                p7zip) upd_p7zip &
                                       sleep 0.2 ;;
                                ubuntu1804-i686) upd_ubuntu1804-i686 &
                                                 sleep 0.2 ;;
                                ubuntu1804-x86_64) upd_ubuntu1804-x86_64 &
                                                   sleep 0.2 ;;
                                d3d_extras) upd_d3d_extras &
                                            sleep 0.2 ;;
                                dgvoodoo2) upd_dgvoodoo2 &
                                           sleep 0.2 ;;
                                dxvk) upd_dxvk &
                                      sleep 0.2 ;;
                                dxvk-nvapi) upd_dxvk_nvapi &
                                            sleep 0.2 ;;
                                vkd3d) upd_vkd3d &
                                       sleep 0.2 ;;
                                winetricks) upd_winetricks &
                                            sleep 0.2 ;;
                            esac
                    done
                    wait)|settingbar
            fi
        else
            (while [[ ! -z "$2" ]]
                do
                    case "$2" in
                        bat|battleye|battleye_runtime) upd_battleye &
                                                       sleep 0.2 ;;
                        ga|gamecontrollerdb|gamectrlrdb) upd_gamecontrollerdb &
                                                         sleep 0.2 ;;
                        inn|innoextract) upd_innoextract &
                                         sleep 0.2 ;;
                        net|network-tools) upd_network-tools &
                                           sleep 0.2 ;;
                        p7|p7zip) upd_p7zip &
                                  sleep 0.2 ;;
                        ub1804_686|ubuntu1804-i686) upd_ubuntu1804-i686 &
                                                    sleep 0.2 ;;
                        ub1804_8664|ubuntu1804-x86_64) upd_ubuntu1804-x86_64 &
                                                       sleep 0.2 ;;
                        d3d|d3d_extras|d3d-extras) upd_d3d_extras &
                                                   sleep 0.2 ;;
                        dg|dgvoodoo2) upd_dgvoodoo2 &
                                      sleep 0.2 ;;
                        dx|dxvk) upd_dxvk &
                                 sleep 0.2 ;;
                        dxnv|dxvk-nvapi|dxvk_nvapi) upd_dxvk_nvapi &
                                                    sleep 0.2 ;;
                        vkd|vkd3d) upd_vkd3d &
                                   sleep 0.2 ;;
                        wtrx|winetricks) upd_winetricks &
                                         sleep 0.2 ;;
                        *) print_error "Invalid argument: '$2'" ;;
                    esac
                    shift
            done
            wait)|settingbar
    fi
}

check_no_async() {
    if [ ! -z "$1" ] ; then export VULKAN_NO_ASYNC="$1" ; fi
    if [ "$VULKAN_NO_ASYNC" == 1 ]
        then
            export RADV_DEBUG="llvm"
            if [ ! -z "$(echo "$VKD3D_CONFIG"|grep -wo 'multi_queue')" ]
                then
                    export VKD3D_CONFIG="$(echo "$VKD3D_CONFIG"|sed 's/multi_queue/single_queue/')"
                else
                    vkd3dcfg_upd "single_queue"
            fi
    fi
}

check_us_switcher() {
    if [ ! -z "$1" ] ; then export US_LAYOUT="$1" ; fi
    if [[ "$US_LAYOUT" == 1 && -z "$(which xkb-switch 2>/dev/null)" ]]
        then
            export US_LAYOUT=0
            sed -i "s/export US_LAYOUT.*/export US_LAYOUT='0'/g" "$LW_CFG" 2>/dev/null
            print_error yad "Layout Switcher" "xkb-switch not found in your system! Keyboard layout not switch to US!"
    fi
}

check_other_fixes() {
    if [ ! -z "$(cat "$WINEPREFIX/system.reg" 2>/dev/null|grep -wm 1 "Origin.exe"|awk '{print $1}')" ]
        then
            sysreg_norig=$((($(cat -n "$WINEPREFIX/system.reg" 2>/dev/null|grep 'OriginWebHelperService'|awk '{print $1}') + 3)))
            sed -i "${sysreg_norig}s/dword:0000000[1-2]/dword:00000003/" "$WINEPREFIX/system.reg"
    fi
    for fix_reg in "PnkBstrA.exe" "PnkBstrB.exe"
        do
            if [ ! -z "$(cat "$WINEPREFIX/system.reg" 2>/dev/null|grep -wm 1 "$fix_reg"|awk '{print $1}')" ]
                then
                    sysreg_norig=$((($(cat -n "$WINEPREFIX/system.reg" | grep "$fix_reg" | awk '{print $1}') + 3)))
                    sed -i "${sysreg_norig}s/dword:0000000[1-2]/dword:00000003/" "$WINEPREFIX/system.reg"
            fi
    done
    sed -i '/steam.exe\\" -silent"/d' "$WINEPREFIX/user.reg" 2>/dev/null
    if [ "$LARGE_ADDRESS" == 1 ]
        then
            export WINE_LARGE_ADDRESS_AWARE=1
    fi
    if [ "$OLD_GL_STRING" == 1 ]
        then
            export MESA_EXTENSION_MAX_YEAR="2003" #mesa override
            export __GL_ExtensionStringVersion="17700" #nvidia override
    fi
    if [ "$NO_WRITE_WATCH" == 1 ]
        then
            export WINE_DISABLE_WRITE_WATCH=1
    fi
    if [ "$HIDE_NVIDIA_GPU" == 1 ]
        then
            export WINE_HIDE_NVIDIA_GPU=1
    fi
    if [ "$HEAP_DELAY_FREE" == 1 ]
        then
            export WINE_HEAP_DELAY_FREE=1
    fi
    if [ "$ALLOW_XIM" == 1 ]
        then
            export WINE_ALLOW_XIM=1
    fi
    if [ "$SHARED_MEMORY" == 1 ]
        then
            export STAGING_SHARED_MEMORY=1
    fi
    if [ "$DIS_LAYER_AMD" == 1 ]
        then
            export DISABLE_LAYER_AMD_SWITCHABLE_GRAPHICS_1=1
    fi
    if [ "$GL_THRD_OPTI" == 1 ]
        then
            export __GL_THREADED_OPTIMIZATIONS=1
    fi
    try_mkdir "$DEF_CACHE/gl_shader_cache"
    try_mkdir "$DEF_CACHE/mesa_shader_cache"
    export MESA_GLSL_CACHE_DIR="$DEF_CACHE"
    export __GL_SHADER_DISK_CACHE_PATH="$DEF_CACHE/gl_shader_cache"
    export __GL_SHADER_DISK_CACHE=1
    export __GL_SHADER_DISK_CACHE_SIZE="1000000000"
}

check_videodrv() {
    disable_native_d3dlls() {
        unset DXVK DXVK_NVAPI VKD3D
        export WINED3D=1
        export NOVULKAN=1
        print_info notify "Vulkan API is unavailable in your system!"
    }
    #SYSGLXINFO="$(DISABLE_MANGOHUD=1 glxinfo -B 2>/dev/null|grep "Device")"
    SYSVKINFO="$(DISABLE_MANGOHUD=1 DISABLE_VKBASALT=1 vulkaninfo --summary 2>/dev/null|grep driverName|awk '{print$3}')"
    if [ -z "$(echo "$SYSVKINFO"|head -1)" ]
        then
            disable_native_d3dlls
    elif [[ ! -z "$(echo "$SYSVKINFO"|grep -wo "llvmpipe")" && "$(echo "$SYSVKINFO"|wc -l)" == 1 ]]
        then
            disable_native_d3dlls
    elif [[ ! -z "$(echo "$SYSGLXINFO"|grep -wo "virgl")" && "$(echo "$SYSGLXINFO"|wc -l)" == 1 ]]
        then
            disable_native_d3dlls
    fi
}

exeargs_upd() {
    if [ ! -z "$EXE_ARG" ]
        then
            if [ -z "$(echo "$EXE_ARG"|grep -ow "$1" 2>/dev/null)" ]
                then
                    export EXE_ARG="$1 $EXE_ARG"
            fi
        else
            export EXE_ARG="$1"
    fi
}

check_exe_args() {
    if [ ! -z "$1" ] ; then export EXEARGS="$1" ; fi
    if [ ! -z "$EXEARGS" ]
        then
            exeargs_upd "$EXEARGS"
    fi
}

check_wmonover() {
    if [ ! -z "$1" ] ; then export WMONOVER="$1" ; fi
    if [[ ! -z "$WMONOVER" && "$WMONOVER" != "Disabled" && "$DIS_NETCORE" != "1" ]]
        then
            wmonover_upd "$WMONOVER"
    fi
}

check_wdllover() {
    if [ ! -z "$1" ] ; then export WDLLOVER="$1" ; fi
    if [[ ! -z "$WDLLOVER" && "$WDLLOVER" != "Disabled" ]]
        then
            wdllover_upd "$WDLLOVER"
    fi
}

export_all_functions() {
    export -f print_var print_error print_info check_lupid check_tray check_wine_pids check_luwine_pid check_vkd3dconfig try_rm check_themes \
        check_luwine_sh_pid check_exes noclosetray check_compositor try_mkdir check_symlink check_mono_gecko try_download check_single_cpu \
        download_error unpack_tar_xz unpack_tar_gz unpack_tar settingbar shell_is_death exe_is_death exes_is_death wine_is_death try_cp check_us_switcher \
        compositor_sw check_winetricks check_musthave_dll check_other_fixes wdllover_upd reg_edit exe2png add_to_lutris gamma_sw vkd3dcfg_upd \
        create_shortcut lu_debug clear_log dis_debug_msg dis_cmd_msg import_luwine_conf check_def_wine lu_prerun lu_run lu_prestart try_mv \
        lu_start lu_cmd lu_shell lu_regedit lu_control lu_winecfg lu_taskmgr lu_uninstaller winetricks lu_openpfx lu_exit lu_killshell check_dxr \
        lu_killtray lu_killwine lu_killexe lu_clearpfx lu_rmapp lu_shortcut lu_explorer lu_help lu_version lu_tray lu_winemgr updcfgchksum \
        us_layout_sw check_mangohud check_wd3dmode check_gamemode check_gstreamer check_dxvk check_vkd3d check_dxvk-nvapi check_d3d_extras check_dgvoodoo2 \
        check_battleye check_winepfx check_vulkan_icd check_crash_dialog lu_update check_fps_limit lu_config lw_init upd_winetricks check_shell \
        check_prime check_esync check_fsync check_fsr check_runtime check_path check_terminal check_pulse_latency check_ld_library check_wdllover \
        check_reset_pulse export_all_functions check_win_version check_hold_terminal dll_manager check_dll_symlink try_ln check_git_release cleanrun \
        runtime_manager check_gamecontrollerdb check_innoextract check_network-tools check_p7zip check_ubuntu1804-i686 upd_battleye upd_gamecontrollerdb \
        upd_innoextract upd_network-tools upd_p7zip upd_d3d_extras upd_dgvoodoo2 upd_dxvk upd_dxvk_nvapi upd_vkd3d upd_all check_ubuntu1804-x86_64 \
        upd_ubuntu1804-x86_64 upd_ubuntu1804-i686 check_wined3d check_vkbasalt_eff check_luwine_conf check_videodrv check_startfile init_def_config \
        settingbar_nostdout check_freespace initbar check_network_status check_no_async print_question print_input loadbar_cover check_first_run \
        run_db_script check_db_script stop_loadbar check_wmonover wmonover_upd check_exe_wcfg lu_appcfg try_fix_wrtx try_shutdown_wine check_fake_cur_res \
        check_display check_restore_resol resol_sw check_restore_gamma dis_displ_sw restore_resol check_virt_desktop check_vkbasalt_cfg exeargs_upd check_exe_args
}

initbar() {
    INIPRGRS="/tmp/iniprgrs$ENVKEY"
    touch "$INIPRGRS"
    while [ -f "$INIPRGRS" ]; do echo; sleep 0.1; done| \
    #yad --progress --text="Initialization in progress. Please wait..." --pulsate --no-buttons --undecorated --center --no-escape --auto-close --skip-taskbar --on-top --width=500 --height=50 &
    zenity --window-icon="$DEF_ICO" --progress --title="Startup initialization" --text="Initialization is in progress. Please wait..." --pulsate --auto-close --width=500 --height=40 --no-cancel &>/dev/null &
}

check_loadbar_cover() {
    if [[ ! -z "$LOADBARGIF" && "$LOADBARGIF" != "$DEF_LOAD_GIF" && -z "$(file "$LOADBARGIF"|grep -wo 'GIF image data')" ]]
        then
            if [ -f "$DEF_LOAD_GIF" ]
                then
                    export LOADBARGIF="$DEF_LOAD_GIF"
                    sed -i "s@export LOADBARGIF.*@export LOADBARGIF='$DEF_LOAD_GIF'@g" "$LW_CFG" 2>/dev/null
                    print_error yad "Cover Loader" "Unsupported loading bar cover file! Reset to default cover." &
                else
                    export LOADBAR=0
                    sed -i "s/export LOADBAR.*/export LOADBAR='0'/g" "$LW_CFG" 2>/dev/null
                    print_error yad "Cover Loader" "Not found default loading bar cover! Cover is disabled!" &
            fi
    fi
}

loadbar_cover() {
    if [ "$LOADBAR" != 0 ]
        then
            if [ ! -z "$1" ]
                then
                    GIF_FILE="$1"
                else
                    GIF_FILE="$LOADBARGIF"
            fi
            GIF_SIZE_X="$(file "$GIF_FILE"|awk '{print $7 + 20}')"
            GIF_SIZE_Y="$(file "$GIF_FILE"|awk '{print $9 + 20}')"
            yad --picture --filename="$GIF_FILE" --close-on-unfocus --no-buttons --undecorated --on-top \
                --center --skip-taskbar --width="$GIF_SIZE_X" --height="$GIF_SIZE_Y" $ENVKEY &>/dev/null &
            export LOADBARPID="$(pgrep -fa yad|grep "$(basename "$GIF_FILE")"|grep "$ENVKEY"|awk '{print$1}')"
    fi
}

stop_loadbar() {
    if [[ ! -z "$LOADBARPID" && ! -z "$(ps -ef|grep -wo "$LOADBARPID" 2>/dev/null)" ]]
        then
            kill "$LOADBARPID" 2>/dev/null
    fi
}

lu_appcfg() {
    if [ -z "$(pgrep -fa yad|grep "Applications Settings"|awk '{print$1}')" ]; then :
        else
            print_error yad "Applications Settings" "Applications Settings already runing!"
            exit 1
    fi
    (IFS=$'\n' ; for CHKLWAPPCFG in $(ls -1 -t "$LW_APPCFG_DIR"/*.wcfg 2>/dev/null)
        do
            check_symlink "$CHKLWAPPCFG"
    done)
    LWAPPSCFG="$(cd "$LW_APPCFG_DIR" 2>/dev/null && ls -1 -t *.wcfg 2>/dev/null)"
    if [[ ! -z "$(echo "$LWAPPSCFG"|head -1)" ]]
        then
            LW_APP_SETT="$(echo -e "\n$(echo "$LWAPPSCFG"|sed ':a;N;$!ba;s/\n/\n\n/g')"| \
            yad --title "Applications Settings" --list --radiolist --separator "\n" --column="" --column="Select app config for open:" \
                --text-align=center --center --window-icon="$DEF_ICO" \
                --width=300 --height=500 --button="RESET ALL:2" --button="EXIT:1" --button="OK:0" 2>/dev/null)"
            if [ "$?" == "2" ]
                then
                    sleep 0.3
                    print_question "Applications Settings" "Are you sure you want to reset all Lutris Wine applications config files?"
                    if [ $? -eq "0" ]
                        then
                            (IFS=$'\n' ; for RMLWAPPCFG in $(ls -1 -t "$LW_APPCFG_DIR"/*.wcfg 2>/dev/null)
                                do
                                    try_rm "$(readlink -f "$RMLWAPPCFG")"
                            done)
                            try_rm "$LW_APPCFG_DIR"
                            print_info notify "Lutris Wine applications config files deleted!"
                    fi
            elif [ ! -z "$(echo "$LW_APP_SETT"|head -1)" ]
                then
                    LW_APP_SETT="$(echo "$LW_APP_SETT"|sed '/^TRUE$/d'|sed '/^$/d')"
                    LW_APP_SETT_EXE="$(readlink -f "$LW_APPCFG_DIR/$LW_APP_SETT"|sed 's/.wcfg$/.exe/')"
                    cleanrun "'$BASH_SOURCE' -config '$LW_APP_SETT_EXE'"
            fi
        else
            print_error yad "Applications Settings" "Lutris Wine applications config files not found!"
    fi
}

if [ $(id -u) -eq 0 ]
    then
        print_error yad "Don't run Lutris Wine as root!" &
        exit 1
    else
        lw_init "$@"
        case $1 in
            -cmd) lu_cmd "$@" ;;
            -shell) lu_shell "$@" ;;
            -regedit) lu_regedit ;;
            -control) lu_control ;;
            -winecfg) lu_winecfg ;;
            -taskmgr) lu_taskmgr ;;
            -winemgr) lu_winemgr ;;
            -uninstaller) lu_uninstaller ;;
            -winetricks) winetricks ;;
            -openpfx) lu_openpfx ;;
            -killwine) lu_killwine ;;
            -killtray) lu_killtray ;;
            -killexe) lu_killexe ;;
            -killshell) lu_killshell ;;
            -exit) lu_exit ;;
            -clearpfx) lu_clearpfx ;;
            -rmapp) lu_rmapp ;;
            -shortcut) lu_shortcut "$@" ;;
            -addtolu) export ADDTOLU=1 ; lu_shortcut "$@" ;;
            -explorer) lu_explorer ;;
            -debug) export DEBUG=1 ; lu_start "$@" ;;
            -help) lu_help ;;
            -version) lu_version ;;
            -tray) lu_tray ;;
            -update) lu_update "$@" ;;
            -config) lu_config "$@" ;;
            -appcfg) lu_appcfg ;;
            -*) lu_help ;;
            *) lu_start "$@" ;;
        esac
fi
try_rm /tmp/envbackup$ENVKEY &>/dev/null
