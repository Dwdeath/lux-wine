#!/bin/bash
export LW_DEVELOPERS="VHSgunzo"
export LW_VERSION="0.52"

export BLUE='\033[1;94m'
export RED='\033[1;91m'
export GREEN='\033[1;92m'
export YELLOW='\033[1;33m'
export RESETCOLOR='\033[1;00m'

#export LOG=1
#export DEBUG=1
#export NO_TRAY=1
#export WIN_VER=10
#export TERMINAL=1
#export HOLD_TERMINAL=1
#export UNSET_CMPSTR_SW=1
#export EXE_ARG=""
export CHK_UPDATE=7
export LARGE_ADDRESS=1
#export OLD_GL_STRING=1
#export NO_WRITE_WATCH=1
#export VULKAN_NO_ASYNC=1
#export WINEDBG_DISABLE=1
#export HIDE_NVIDIA_GPU=1
#export HEAP_DELAY_FREE=1
#export ALLOW_XIM=1
export MANGOHUD_USER_CONF=1
#export MANGOHUD_CONFIG="font_size=24,position=top-left,toggle_hud=Shift_R+F12,no_display,resolution,wine,gpu_name,vulkan_driver,gpu_stats,vkbasalt"
export SHARED_MEMORY=1
export DIS_LAYER_AMD=1
export USE_GSTREAMER=1
export USE_VKBASALT=1
export USE_MANGOHUD=1
export USE_GAMEMODE=1
#export VKBASALT_EFFECTS="Tonemap:Colourfulness:FakeHDR:cas"
#export VKBASALT_FFX_CAS="0.7"
export DXR=1
#export DXR11=1
export MUST_HAVE_DLL="vcrun2019 mfc42 dotnet46"
export SHELL="/usr/bin/bash"
#export DGVO_GIT_RELEASE_URL=""
#export D3D_GIT_RELEASE_URL=""
#export NVAPI_GIT_RELEASE_URL=""
#export DXVK_GIT_RELEASE_URL="https://github.com/doitsujin/dxvk/releases"
#export VKD3D_GIT_RELEASE_URL="https://github.com/HansKristian-Work/vkd3d-proton/releases"

export LU_WINE_CONF="$HOME/.config/lutris/runners/wine.yml"
export LU_DIR="$HOME/.local/share/lutris"
export THEMES_DIR="/usr/share/lutris-wine/themes"
export LU_WINE_DIR="$LU_DIR/runners/wine"
export LU_RUNTIME="$HOME/.local/share/lutris/runtime"
export LU_DB="$LU_DIR/pga.db"
export MENUAPPDIR="$HOME/.local/share/applications"
export LW_APP_DIR="$MENUAPPDIR/LutrisWineApp"
export WTRX_DIR="$LU_RUNTIME/winetricks"
export VKBASALT_CONFIG_FILE="$HOME/.config/vkBasalt/vkBasalt.conf"

yaml_parser() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_o_Q_")}
         printf("%s%s%s=%s\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

print_var() {
    for varp in $@
        do
            echo -e "[VAR] $varp=\"${!varp}\""
    done
}

print_error() {
    echo -e "${RED}ERROR: $@ $RESETCOLOR"
}

print_info() {
    echo -e "${GREEN}INFO: $@ $RESETCOLOR"
}

check_lupid() {
    unset LU_PID
    export LU_PID="$(pgrep -fa python|grep lutris|awk '{print$1}')"
}

check_tray() {
    unset TRAY_PID FORCE_TRAY CHK_TRAY_PID CHK_FORCE_TRAY
    CHK_TRAY_PID="$(pgrep -fa yad|grep "\-\-notification"|grep -iF "Lutris Wine"|awk '{print $1}')"
    CHK_FORCE_TRAY="$(pgrep -fa "lutris-wine"|grep -o "noclose")"
    if [ ! -z "$CHK_TRAY_PID" ]
        then
            export TRAY_PID="$CHK_TRAY_PID"
    fi
    if [ ! -z "$CHK_FORCE_TRAY" ]
        then
            export FORCE_TRAY="$CHK_FORCE_TRAY"
    fi
}

check_wine_pids() {
    unset WINE_PIDS CHK_WINE_PIDS
    export CHK_WINE_PIDS="$(ls -l /proc/*/exe 2>/dev/null|grep -ie "$WINE_IN_USE"|grep -E 'wine(64)?-preloader|wineserver'|awk -F/ '{print $3}')"
    if [ ! -z "$CHK_WINE_PIDS" ]
        then
            export WINE_PIDS="$CHK_WINE_PIDS"
    fi
}

check_luwine_pid() {
    unset LU_WINE_PID CHK_LU_WINE_PID
    CHK_LU_WINE_PID="$(pgrep lutris-wine)"
    if [ ! -z "$CHK_LU_WINE_PID" ]
        then
            export LU_WINE_PID="$CHK_LU_WINE_PID"
    fi
}

check_luwine_sh_pid() {
    unset LW_SH_PID CHK_LW_SH_PID CHK_LW_SH_PIDS
    export CHK_LW_SH_PIDS="$(pgrep -fa lutris-wine|grep "\-shell"|awk '{print$1}' 2>/dev/null)"
    for lwshpid in $CHK_LW_SH_PIDS
        do
            export CHK_LW_SH_PID="$(pgrep -faP "$lwshpid"|grep "$terminal_app"|awk '{print$1}' 2>/dev/null)"
            if [ ! -z "$CHK_LW_SH_PID" ]
                then
                    export LW_SH_PID="$CHK_LW_SH_PID"
            fi
    done
}

check_exes() {
    unset EXE_PIDS CHK_EXES RUN_EXES RUN_EXE
    CHK_EXES="$(ps -ef|grep "$(ps -eo args|grep -iF ".exe"|rev|cut -d"\\" -f1|rev)"|grep -v windows|grep ":\\\\")"
    if [ ! -z "$CHK_EXES" ]
        then
            export EXE_PIDS="$(echo "$CHK_EXES"|awk '{print$2}')"
            export RUN_EXES="$(while read exepid ; do ps -p $exepid -o args|cut -d":" -f2|sed '/COMMAND/d'|sed 'y#\\#/#' ; done <<< "$EXE_PIDS")"
            export RUN_EXE=$(echo "$RUN_EXES"|grep -o "$EXE_DIR" 2>/dev/null)
        else
            unset RUN_EXE
    fi
}

noclosetray() {
    if [[ ! -z "$FORCE_TRAY" ]]
        then
            while : ; do sleep 1 ; done
    fi
}

check_compositor() {
    if [[ "$DESKTOP_SESSION" == "plasma" ]]
        then
            export CMPSTR_PLASMA="qdbus org.kde.KWin /Compositor active"
            export CMPSTR_ON="qdbus org.kde.KWin /Compositor resume"
            export CMPSTR_OFF="qdbus org.kde.KWin /Compositor suspend"
            export CMPSTR_PLASMA_CHECK="$(eval $CMPSTR_PLASMA)"
    elif [[ "$DESKTOP_SESSION" == "mate" ]]
        then
            export CMPSTR_MATE="gsettings get org.mate.Marco.general compositing-manager"
            export CMPSTR_ON="gsettings set org.mate.Marco.general compositing-manager true"
            export CMPSTR_OFF="gsettings set org.mate.Marco.general compositing-manager false"
            export CMPSTR_MATE_CHECK="$(eval $CMPSTR_MATE)"
    elif [[ "$DESKTOP_SESSION" == "xfce" ]]
        then
            export CMPSTR_XFCE="xfconf-query --channel=xfwm4 --property=/general/use_compositing"
            export CMPSTR_ON="xfconf-query --channel=xfwm4 --property=/general/use_compositing --set=true"
            export CMPSTR_OFF="xfconf-query --channel=xfwm4 --property=/general/use_compositing --set=false"
            export CMPSTR_XFCE_CHECK="$(eval $CMPSTR_XFCE)"
    elif [[ "$DESKTOP_SESSION" == "deepin" ]]
        then
            export CMPSTR_ON="dbus-send --session --dest=com.deepin.WMSwitcher --type=method_call /com/deepin/WMSwitcher com.deepin.WMSwitcher.RequestSwitchWM"
            export CMPSTR_OFF="$CMPSTR_ON"
            export CMPSTR_DEEPIN="dbus-send --session --dest=com.deepin.WMSwitcher --type=method_call --print-reply=literal /com/deepin/WMSwitcher com.deepin.WMSwitcher.CurrentWM"
            export CMPSTR_DEEPIN_CHECK="$(eval $CMPSTR_DEEPIN|grep -o "wm")"
    else
        export CMPSTR_NULL=""
    fi
}

check_mono_gecko() {
    try_mkdir "$LU_RUNTIME/gecko"
    try_mkdir "$LU_RUNTIME/mono"
    for mono_gecko in "mono" "gecko"
        do
            if [ ! -d "$WINEDIR/share/wine/$mono_gecko" ]
                then
                    try_ln "$LU_RUNTIME/$mono_gecko" "$WINEDIR/share/wine/"
            elif ! check_symlink "$WINEDIR/share/wine/$mono_gecko" && [[ -d "$WINEDIR/share/wine/$mono_gecko" ]]
                then
                    if try_cp "$WINEDIR/share/wine/$mono_gecko" "$LU_RUNTIME/"
                        then
                            try_rm "$WINEDIR/share/wine/$mono_gecko"
                            try_ln "$LU_RUNTIME/$mono_gecko" "$WINEDIR/share/wine/"
                    fi
            fi
    done
}

check_git_release() {
    if [[ "$2" == "latest" || -z "$2" ]]
        then
            CHECKDLLVERS="head -1"
            LATESTVERS="1"
        else
            dll_version="$(echo $2|sed 's/^v//g')"
            CHECKDLLVERS="grep -iE '($dll_version\.tar\.xz$|$dll_version\.tar\.gz$|$dll_version\.tar\.zst$)'"
    fi
    if [ -z "$GIT_RELEASE_URL" ]
        then
            GIT_RELEASE_DEFURL="https://github.com/lutris/$1/releases"
            GREPARCHURL="grep -iE '(.tar.gz|.tar.xz|.tar.zst)'|grep -v 'tags'|grep 'href'|sed 's/.*releases//g'|cut -d'\"' -f1|awk '{print \"$GIT_RELEASE_DEFURL\" \$0}'|grep '$1'"
            GIT_RELEASE_CHK="$(curl -s "$GIT_RELEASE_DEFURL"|eval "$GREPARCHURL"|eval "$CHECKDLLVERS")"
            if [ ! -z "$GIT_RELEASE_CHK" ]
                then
                    dll_version="$(basename "$GIT_RELEASE_CHK"|sed "s/$1//"|sed -r 's/^[^0-9]+//'|sed 's/.tar.gz//'|sed 's/.tar.xz//'|sed 's/.tar.zst//')"
                    GIT_RELEASE="$GIT_RELEASE_CHK"
                    unset GIT_RELEASE_CHK
                    if [ "$1" == "dxvk-nvapi" ]
                        then
                            if [ -z "$(grep -o "dxvk_nvapi_version" "$LU_WINE_CONF")" ]
                                then
                                    sed -i "s/^wine:.*/&\n  dxvk_nvapi_version: v$dll_version/" "$LU_WINE_CONF"
                                    import_luwine_conf
                            fi
                        else
                            if [ -z "$(grep -o "$1_version" "$LU_WINE_CONF")" ]
                                then
                                    sed -i "s/^wine:.*/&\n  $1_version: v$dll_version/" "$LU_WINE_CONF"
                                    import_luwine_conf
                            fi
                    fi
                    return 0
                else
                    print_error "$1 $2 GIT release not found!"
                    zenity --error --text "$1 $2 GIT release not found!" --no-wrap &>/dev/null &
                    return 1
            fi
        else
            GREPARCHURL="grep -iE '(.tar.gz|.tar.xz|.tar.zst)'|grep -v 'tags'|grep 'href'|sed 's/.*releases//g'|cut -d'\"' -f1|awk '{print \"$GIT_RELEASE_URL\" \$0}'|grep '$1'"
            GIT_RELEASE_CHK="$(curl -s "$GIT_RELEASE_URL"|eval "$GREPARCHURL"|eval "$CHECKDLLVERS")"
            if [ -z "$GIT_RELEASE_CHK" ]
                then
                    if [[ -z "$(echo "$GIT_RELEASE_URL"|grep -o "buildbot")" && "$1" != "winetricks" ]]
                        then
                            unset GIT_RELEASE_URL
                            print_error "$1 $2 GIT release not found in custom repository! Try found $1 in Lutris repository..."
                            check_git_release $1 $2
                        else
                            print_error "Unable to check $1 GIT release!"
                            return 1
                    fi
                else
                    GIT_RELEASE="$GIT_RELEASE_CHK"
                    if [[ -z "$(echo "$GIT_RELEASE_URL"|grep -o "buildbot")" && "$1" != "winetricks" ]]
                        then
                            dll_version="$(basename "$GIT_RELEASE_CHK"|sed "s/$1//"|sed -r 's/^[^0-9]+//'|sed 's/.tar.gz//'|sed 's/.tar.xz//'|sed 's/.tar.zst//')"
                            unset GIT_RELEASE_CHK
                            if [ "$1" == "dxvk-nvapi" ]
                                then
                                    if [ -z "$(grep -o "dxvk_nvapi_version" "$LU_WINE_CONF")" ]
                                        then
                                            sed -i "s/^wine:.*/&\n  dxvk_nvapi_version: v$dll_version/" "$LU_WINE_CONF"
                                            import_luwine_conf
                                    fi
                                else
                                    if [ -z "$(grep -o "$1_version" "$LU_WINE_CONF")" ]
                                        then
                                            sed -i "s/^wine:.*/&\n  $1_version: v$dll_version/" "$LU_WINE_CONF"
                                            import_luwine_conf
                                    fi
                            fi
                            return 0
                    fi
                    return 0
            fi
    fi
}

dll_manager() {
    if [ -z "$all_dlls" ]
        then
            if [[ -f "$LU_RUNTIME/$1/$2/.all_dlls" || -f "$LU_RUNTIME/$1/v$2/.all_dlls" ]]
                then
                    if [ -f "$LU_RUNTIME/$1/$2/.all_dlls" ]
                        then
                            all_dlls="$(cat "$LU_RUNTIME"/$1/$2/.all_dlls 2>/dev/null)"
                    elif [ -f "$LU_RUNTIME/$1/v$2/.all_dlls" ]
                        then
                            all_dlls="$(cat "$LU_RUNTIME"/$1/v$2/.all_dlls 2>/dev/null)"
                    fi
                else
                    for dlls_arch in "x32" "x86" "x64"
                        do
                            if [ -d "$LU_RUNTIME/$1/$2/$dlls_arch" ]
                                then
                                    all_dlls="$(ls "$LU_RUNTIME"/$1/$2/$dlls_arch/*.dll 2>/dev/null|awk -F"/" '{print $NF}' 2>/dev/null)\n$all_dlls"
                            fi
                            if [ -d "$LU_RUNTIME/$1/v$2/$dlls_arch" ]
                                then
                                    all_dlls="$(ls "$LU_RUNTIME"/$1/v$2/$dlls_arch/*.dll 2>/dev/null|awk -F"/" '{print $NF}' 2>/dev/null)\n$all_dlls"
                            fi
                    done
                    all_dlls="$(echo -en "$all_dlls"|sort -u)"
                    if [[ -d "$LU_RUNTIME/$1/$2" && ! -z "$all_dlls" ]]
                        then
                            echo "$all_dlls" > "$LU_RUNTIME"/$1/$2/.all_dlls
                    elif [[ -d "$LU_RUNTIME/$1/v$2" && ! -z "$all_dlls" ]]
                        then
                            echo "$all_dlls" > "$LU_RUNTIME"/$1/v$2/.all_dlls
                    fi
            fi
    fi
    if [ ! -z "$all_dlls" ]
        then
            check_dlls_slk="$all_dlls"
            unset all_dlls
            if [ ! -z "$NEEDCHKDLL" ]
                then
                    check_dll_symlink $1 $2
            fi
        else
            if check_git_release $1 $2
                then
                    if [[ ! -z "$LATESTVERS" && -d "$LU_RUNTIME/$1/v$dll_version" ]]
                        then
                            print_info "Latest $1 v$dll_version dlls already installed!"
                            dll_manager $1 $dll_version
                            unset LATESTVERS
                    elif [ ! -d "$LU_RUNTIME/$1/v$dll_version" ]
                        then
                            print_info "Download and install $1 v$dll_version dlls..."
                            if try_download "$GIT_RELEASE" "$LU_RUNTIME/"
                                then
                                    try_mkdir "$LU_RUNTIME/$1"
                                    for archive_type in "gz" "xz" "zst"
                                        do
                                            dll_archive="$LU_RUNTIME/$(ls $LU_RUNTIME/|grep "$dll_version.tar.${archive_type}$")"
                                            if [ -f "$dll_archive" ]
                                                then
                                                    if unpack_tar_${archive_type} "$dll_archive" "$LU_RUNTIME/$1/"
                                                        then
                                                            if [ ! -d "$LU_RUNTIME/$1/v$dll_version" ]
                                                                then
                                                                    try_mv "$LU_RUNTIME/$1/$(ls $LU_RUNTIME/$1/|grep "$dll_version$")" "$LU_RUNTIME/$1/v$dll_version"
                                                            fi
                                                            try_rm "$dll_archive"*
                                                            check_$1 2>/dev/null
                                                        else
                                                            try_rm "$dll_archive"*
                                                            try_rm "$LU_RUNTIME/$1/$(ls $LU_RUNTIME/$1/|grep "$dll_version$")"
                                                            download_error && check_$1 2>/dev/null
                                                    fi
                                            fi
                                    done
                                else
                                    download_error && check_$1 2>/dev/null
                            fi
                        else
                            print_info "$1 v$dll_version dlls already installed!"
                            dll_manager $1 $dll_version
                    fi
                else
                    return 1
            fi
    fi
}

check_dll_symlink() {
    for dll_check in $check_dlls_slk
        do
            PFX_DLL32_VER="$(readlink -f "$PFX_DLL32_PTH"/$dll_check|sed "s/.*\($1\)/\1/g"|cut -d"/" -f2)"
            PFX_DLL64_VER="$(readlink -f "$PFX_DLL64_PTH"/$dll_check|sed "s/.*\($1\)/\1/g"|cut -d"/" -f2)"
            for x32_x86 in "x32" "x86"
                do
                    if [[ -f "$LU_RUNTIME/$1/$2/$x32_x86/$dll_check" && "$PFX_DLL32_VER" != "$2" ]]
                        then
                            if try_ln "$LU_RUNTIME/$1/$2/$x32_x86/$dll_check" "$PFX_DLL32_PTH/"
                                then print_info "$dll_check version of $1 $2 doesn't match with prefix version, new link to syswow64 created!"
                            fi
                    fi
                    if [[ -f "$LU_RUNTIME/$1/v$2/$x32_x86/$dll_check" && "$PFX_DLL32_VER" != "v$2" ]]
                        then
                            if try_ln "$LU_RUNTIME/$1/v$2/$x32_x86/$dll_check" "$PFX_DLL32_PTH/"
                                then print_info "$dll_check version of $1 v$2 doesn't match with prefix version, new link to syswow64 created!"
                            fi
                    fi
            done
            if [[ -f "$LU_RUNTIME/$1/$2/x64/$dll_check" && "$PFX_DLL64_VER" != "$2" ]]
                then
                    if try_ln "$LU_RUNTIME/$1/$2/x64/$dll_check" "$PFX_DLL64_PTH/"
                        then print_info "$dll_check version of $1 $2 doesn't match with prefix version, new link to system32 created!"
                    fi
            fi
            if [[ -f "$LU_RUNTIME/$1/v$2/x64/$dll_check" && "$PFX_DLL64_VER" != "v$2" ]]
                then
                    if try_ln "$LU_RUNTIME/$1/v$2/x64/$dll_check" "$PFX_DLL64_PTH/"
                        then print_info "$dll_check version of $1 v$2 doesn't match with prefix version, new link to system32 created!"
                    fi
            fi
    done
}

check_symlink() {
    CHK_SLK_FILE="$(file "$1")"
    if [ ! -z "$(echo "$CHK_SLK_FILE"|grep -v "broken"|grep "symbolic link to"|awk '{print $1}')" ]
        then
            return 0
    elif [ ! -z "$(echo "$CHK_SLK_FILE"|grep "broken symbolic link to"|awk '{print $1}')" ]
        then
            print_error "remove broken symlink: $CHK_SLK_FILE"
            try_rm "$CHK_SLK_FILE"
            return 1
    else
        return 1
    fi
}

try_mkdir() {
    if [ ! -d "$1" ]
        then
            mkdir -p "$1" 2>/dev/null
            [ "$?" != 0 ] && print_error "Failed to create directory '$1'" ; return 1 || return 0
    fi
}

try_ln() {
    if [[ -f "$1" || -d "$1" ]]
        then
            ln -sf "$@" 2>/dev/null
            [ "$?" != 0 ] && print_error "Failed to link '$1' to '$2'" || return 0
    elif [ -z "$(dirname "$2" 2>/dev/null)" ]
        then
            print_error "Destination path '$2' not found for link $1"
    else
        print_error "'$1' not found for link to '$2'"
    fi
    return 1
}

try_cp() {
    if [[ -f "$1" || -d "$1" ]]
        then
            cp -rf "$@" 2>/dev/null
            [ "$?" != 0 ] && print_error "Failed to copy '$1' to '$2'" || return 0
    elif [ -z "$(dirname "$2" 2>/dev/null)" ]
        then
            print_error "Destination path for '$2' not found!"
    else
        print_error "'$1' not found for copy!"
    fi
    return 1
}

try_mv() {
    if [[ -f "$1" || -d "$1" ]]
        then
            mv -f "$@" 2>/dev/null
            [ "$?" != 0 ] && print_error "Failed to move '$1' to '$2'" || return 0
    elif [ -z "$(dirname "$2" 2>/dev/null)" ]
        then
            print_error "Destination path for '$2' not found!"
    else
        print_error "'$1' not found for move!"
    fi
    return 1
}

try_rm() {
    if [[ -f "$1" || -d "$1" ]]
        then
            rm -rf "$@" 2>/dev/null
            [ "$?" != 0 ] && print_error "Failed to remove '$1'" || return 0
        else
            print_error "'$1' not found for remove!"
    fi
    return 1
}

try_download() {
    set -o pipefail
    wget --no-check-certificate --content-disposition -t 3 -T 5 "$1" --directory-prefix="$2" 2>&1 | \
    tr '\r' '\n' | sed -u 's/.* \([0-9]\+%\)\ \+\([0-9,.]\+.\) \(.*\)/\1\n#Downloading at \1\/, \2\/s, ETA \3/; s/^20[0-9][0-9].*/#Done./' | \
    zenity --progress --percentage=0 --title="Download $(basename $1)" --text="Starting downloading...\n$1" --auto-close --auto-kill --width=600 --height=90
    if [ "${PIPESTATUS[0]}" != 0 ]
        then
            print_error "Failed to download $1"
            return 1
        else
            return 0
    fi
}

download_error() {
    zenity --error --title "Error..." --text "You will need to check internet connettion!\nPress OK to repeet downloading" --no-wrap
    [ "$?" != 0 ] && exit 1 || return 0
}

unpack_tar_xz() {
    set -o pipefail
    tar -Jxvf "$1" -C "$2"|settingbar
    [ "${PIPESTATUS[0]}" != 0 ] && print_error "File '$1' unpacked with error!" && return 1 || return 0
}

unpack_tar_gz() {
    set -o pipefail
    tar -xzvf "$1" -C "$2"|settingbar
    [ "${PIPESTATUS[0]}" != 0 ] && print_error "File '$1' unpacked with error!" && return 1 || return 0
}

unpack_tar_zst() {
    set -o pipefail
    tar --use-compress-program=unzstd -xvf "$1" -C "$2"|settingbar
    [ "${PIPESTATUS[0]}" != 0 ] && print_error "File '$1' unpacked with error!" && return 1 || return 0
}

unpack_tar() {
    set -o pipefail
    tar -xvf "$1" -C "$2"|settingbar
    [ "${PIPESTATUS[0]}" != 0 ] && print_error "File '$1' unpacked with error!" && return 1 || return 0
}

settingbar() {
    zenity --progress --title="Settings..." --text="Updating parameters" --pulsate --auto-close --width=500 --height=90 --no-cancel
}

shell_is_death() {
    while true
        do
            check_luwine_sh_pid
            if  [ ! -z "$LW_SH_PID" ]
                then
                    sleep 1
                    continue
                else
                    break
            fi
    done
}

exe_is_death() {
    while true
        do
            check_exes
            if  [ ! -z "$RUN_EXE" ]
                then
                    sleep 1
                    continue
                else
                    break
            fi
    done
}

exes_is_death() {
    while true
        do
            check_exes
            if  [ ! -z "$RUN_EXES" ]
                then
                    sleep 1
                    continue
                else
                    break
            fi
    done
}

wine_is_death() {
    while true
        do
            check_wine_pids
            if  [ ! -z "$WINE_PIDS" ]
                then
                    sleep 1
                    continue
                else
                    break
            fi
    done
}

compositor_sw() {
    if [[ ! -z "$disable_compositor" && "$disable_compositor" == true && -z "$CMPSTR_NULL" && "$UNSET_CMPSTR_SW" != 1 ]]
        then
            export CHK_CMPSTROFF_OTH="ls -1 /tmp/CMPSTROFF.* 2>/dev/null"
            compositor_on() {
                if exe_is_death && [[ -f "/tmp/CMPSTROFF.$CMPSTROFF" && -z "$(eval $CHK_CMPSTROFF_OTH|grep -v $CMPSTROFF 2>/dev/null)" ]]
                    then
                        $CMPSTR_ON
                        restore_gamma
                        try_rm /tmp/CMPSTROFF.*
                    else
                        try_rm /tmp/CMPSTROFF.$CMPSTROFF
                fi
            }
            compositor_off() {
                $CMPSTR_OFF
                CMPSTROFF=$BASHPID
                echo 1 > /tmp/CMPSTROFF.$CMPSTROFF
            }
            compositor_noff() {
                CMPSTROFF=$BASHPID
                echo 1 > /tmp/CMPSTROFF.$CMPSTROFF
            }
            cmpstr_dirty_noff() {
                check_wine_pids
                if [[ -z "$WINE_PIDS" ]]
                    then
                        try_rm /tmp/CMPSTROFF.*
                        compositor_noff
                    else
                        compositor_noff
                fi
            }
            cmpstr_dirty_off() {
                check_wine_pids
                if [[ -z "$WINE_PIDS" && ! -z "$(eval $CHK_CMPSTROFF_OTH)" ]]
                    then
                        try_rm /tmp/CMPSTROFF.*
                        compositor_off
                fi
            }
            if [[ -f "/tmp/FORCE_EXIT" && ! -z "$(eval $CHK_CMPSTROFF_OTH)" ]]
                then
                    $CMPSTR_ON
                    restore_gamma
                    try_rm /tmp/CMPSTROFF.*
            elif [ ! -z "$CMPSTR_PLASMA_CHECK" ]
                then
                    if [[ "$(eval $CMPSTR_PLASMA)" == true && "$CMPSTR_PLASMA_CHECK" == true && -z "$(eval $CHK_CMPSTROFF_OTH)" ]]
                        then
                            compositor_off
                    elif [[ "$(eval $CMPSTR_PLASMA)" == false && ! -z "$CMPSTROFF" ]]
                        then
                            compositor_on
                    elif [[ "$(eval $CMPSTR_PLASMA)" == false && "$(eval $CHK_CMPSTROFF_OTH|wc -l)" -ge 1 ]]
                        then
                            cmpstr_dirty_noff
                    else
                        cmpstr_dirty_off
                    fi
            elif [ ! -z "$CMPSTR_MATE_CHECK" ]
                then
                    if [[ "$(eval $CMPSTR_MATE)" == true && "$CMPSTR_MATE_CHECK" == true && -z "$(eval $CHK_CMPSTROFF_OTH)" ]]
                        then
                            compositor_off
                    elif [[ "$(eval $CMPSTR_MATE)" == false && ! -z "$CMPSTROFF" ]]
                        then
                            compositor_on
                    elif [[ "$(eval $CMPSTR_MATE)" == false && "$(eval $CHK_CMPSTROFF_OTH|wc -l)" -ge 1 ]]
                        then
                            cmpstr_dirty_noff
                    else
                        cmpstr_dirty_off
                    fi
            elif [ ! -z "$CMPSTR_XFCE_CHECK" ]
                then
                    if [[ "$(eval $CMPSTR_XFCE)" == true && "$CMPSTR_XFCE_CHECK" == true && -z "$(eval $CHK_CMPSTROFF_OTH)" ]]
                        then
                            compositor_off
                    elif [[ "$(eval $CMPSTR_XFCE)" == false && ! -z "$CMPSTROFF" ]]
                        then
                            compositor_on
                    elif [[ "$(eval $CMPSTR_XFCE)" == false && "$(eval $CHK_CMPSTROFF_OTH|wc -l)" -ge 1 ]]
                        then
                            cmpstr_dirty_noff
                    else
                        cmpstr_dirty_off
                    fi
            elif [ ! -z "$CMPSTR_DEEPIN_CHECK" ]
                then
                    if [[ "$(eval $CMPSTR_DEEPIN|grep -o "wm")" == "wm" && "$CMPSTR_DEEPIN_CHECK" == "wm" && -z "$(eval $CHK_CMPSTROFF_OTH)" ]]
                        then
                            compositor_off
                    elif [[ "$(eval $CMPSTR_DEEPIN|grep -o "metacity")" == "metacity" && ! -z "$CMPSTROFF" ]]
                        then
                            compositor_on
                    elif [[ "$(eval $CMPSTR_DEEPIN|grep -o "metacity")" == "metacity" && "$(eval $CHK_CMPSTROFF_OTH|wc -l)" -ge 1 ]]
                        then
                            cmpstr_dirty_noff
                    else
                        cmpstr_dirty_off
                    fi
            fi
    fi
}

check_musthave_dll() {
    if [ ! -z "$MUST_HAVE_DLL" ]
        then
            export DLL_INSTALL="$MUST_HAVE_DLL $DLL_INSTALL"
    fi
    if [ ! -z "$DLL_INSTALL" ]
        then
            export DLL_NEED_INSTALL=""
            export USE_WT_FROM_DB=0
            if [ ! -f "$WTRX_LOG" ]
                then
                    touch "$WTRX_LOG"
            fi
            for need_install_dll_to_pfx in $DLL_INSTALL
                do
                    if [[ "$need_install_dll_to_pfx" == "vcrun2015" || "$need_install_dll_to_pfx" == "vcrun2017" ]]
                        then
                            need_install_dll_to_pfx="vcrun2019"
                            sed -i '/vcrun2015/d' "$WTRX_LOG"
                            sed -i '/vcrun2017/d' "$WTRX_LOG"
                    elif [ "$need_install_dll_to_pfx" == "vcrun2019" ]
                        then
                            sed -i '/vcrun2015/d' "$WTRX_LOG"
                            sed -i '/vcrun2017/d' "$WTRX_LOG"
                    fi
                    grep "$need_install_dll_to_pfx" "$WTRX_LOG" &>/dev/null
                    if [ "$?" == "1" ]
                        then
                            if [ -z "$DLL_NEED_INSTALL" ]
                                then
                                    export DLL_NEED_INSTALL="$need_install_dll_to_pfx"
                                else
                                    export DLL_NEED_INSTALL="$need_install_dll_to_pfx $DLL_NEED_INSTALL"
                            fi
                            export USE_WT_FROM_DB=1
                    fi
            done
            if [ "$USE_WT_FROM_DB" == "1" ]
                then
                    export UPDPFX_LOG="$WINEPREFIX/update_pfx.log"
                    echo "Try to install DLL in prefix: $DLL_NEED_INSTALL" >> "$UPDPFX_LOG"
                    print_info "Try to install DLL in prefix: $DLL_NEED_INSTALL"
                    $terminal_app $term_hold -e $SHELL -c "winetricks -q -f -r $DLL_NEED_INSTALL|& tee -a '$UPDPFX_LOG'"
            fi
    fi
}

vkd3dcfg_upd() {
    if [ ! -z "$VKD3D_CONFIG" ]
        then
            if [ -z "$(echo "$VKD3D_CONFIG"|grep -ow "$1" 2>/dev/null)" ]
                then
                    export VKD3D_CONFIG="${1};${VKD3D_CONFIG}"
            fi
        else
            export VKD3D_CONFIG="${1}"
    fi
}

wdllover_upd() {
    if [ ! -z "$WINEDLLOVERRIDES" ]
        then
            if [ -z "$(echo "$WINEDLLOVERRIDES"|grep -ow "$1" 2>/dev/null)" ]
                then
                    export WINEDLLOVERRIDES="${1};${WINEDLLOVERRIDES}"
            fi
        else
            export WINEDLLOVERRIDES="${1}"
    fi
}

reg_edit() {
    zenity --question --title "Lutris Wine Registry Editor" --text "Adding information can unintentionally change or delete values and cause components to stop working correctly.\nIf you do not trust the source of this information in "$1" do not add it to the registry.\nAre you sure you want to continue?" --no-wrap &>/dev/null
    if [ $? -eq "0" ]
        then
            REG_BC_DIR="$WINEPREFIX/registry_$(date +'%Y-%m-%d_%H%M%S')"
            echo "Registry backup to '$REG_BC_DIR'"
            mkdir "$REG_BC_DIR" 2>/dev/null
            for regbc in $(ls "$WINEPREFIX"/*.reg) ; do try_cp "$regbc" "$REG_BC_DIR/" ; done
            $WINE regedit "$1" >/dev/null 2>&1
            print_info "Data from "$1" has been successfully added to Lutris Wine registry!"
            zenity --info --title "Lutris Wine Registry Editor" --text "Registry backup to $REG_BC_DIR\nData from "$1" has been successfully added to Lutris Wine registry!" --no-wrap &>/dev/null
    fi
}

exe2png() {
    if [[ ! -z "$(which wrestool 2>/dev/null)" && ! -z "$(which convert 2>/dev/null)" ]]
        then
            export SHRT_NAME="$(basename "$1"|sed 's/.exe//')"
            export SHRT_PATH="$(cd "$(dirname "$1")" >/dev/null 2>&1 && pwd)"
            export LUJPG="$SHRT_PATH/${SHRT_NAME}.jpg"
            export LUPNG="$SHRT_PATH/${SHRT_NAME}.png"
            if [[ -f "$LUJPG" && -f "$LUPNG" ]]
                then
                    print_info "Converting ico already complete!"
                else
                    cd "$SHRT_PATH"
                    wrestool -x --output=./ -t14 "$1" 2>/dev/null
                    if [ ! -z "$(ls "${SHRT_NAME}"*.ico 2>/dev/null|head -1)" ]
                        then
                            (IFS=$'\n' ; for ico in $(ls "${SHRT_NAME}"*.ico 2>/dev/null)
                                do
                                    echo -en "${GREEN}Found ${RED}"$ico" ${GREEN}and converting to PNG and JPG...\n$RESETCOLOR"
                                    convert "$ico" "$(echo "$ico"|sed 's/ico$/png/g')"  2>/dev/null
                            done)
                            try_cp "$(ls -S -1 "${SHRT_NAME}"*_*.png|head -1)" "${SHRT_NAME}".png 2>/dev/null
                            convert "${SHRT_NAME}".png "${SHRT_NAME}".jpg 2>/dev/null
                            echo -en "${RED}$(ls "${SHRT_NAME}".png 2>/dev/null)\n$RESETCOLOR"
                            echo -en "${RED}$(ls "${SHRT_NAME}".jpg 2>/dev/null)\n$RESETCOLOR"
                            print_info "CLEANUP..."
                            try_rm "${SHRT_NAME}"*.ico *_*_*.png
                            print_info "Converting complete!"
                        else
                            print_error "Failed to get ico from executable file!"
                            zenity --error --text "Failed to get ico from executable file!" --no-wrap &>/dev/null
                    fi
            fi
        else
            print_error "You must install icoutils and imagemagick!"
            zenity --error --text "You must install icoutils and imagemagick!" --no-wrap &>/dev/null
            exit 1
    fi
}

add_to_lutris() {
    if [ ! -z "$LU_EXE" ]
        then
            exe2png "$LU_EXE"
            export YMLTOLU="${SHRT_PATH}/${SHRT_NAME}.yaml"
            if [ -z "$ADD_APP_NAME" ]
                then
                    zenity --question --title "Shortcuts Creator" --text "Change application name [ $SHRT_NAME ] ?" --no-wrap &>/dev/null
                    if [ $? -eq "0" ]
                        then
                            ADD_APP_NAME="$(zenity --entry --title "Enter name"  --text "Enter name for application")"
                    fi
            fi
            if [ ! -z "$ADD_APP_NAME" ]
                then
                    export SHRT_NAME="$ADD_APP_NAME"
                    try_cp "$LUJPG" "$LU_DIR"/banners/"$ADD_APP_NAME".jpg
                else
                    try_cp "$LUJPG" "$LU_DIR"/banners/
            fi
            echo "name: \"${SHRT_NAME}\"" > "$YMLTOLU"
            echo "game_slug: \"${SHRT_NAME}\"" >> "$YMLTOLU"
            echo "version: \"${SHRT_NAME}\"" >> "$YMLTOLU"
            echo "slug: \"${SHRT_NAME}\"" >> "$YMLTOLU"
            echo -e "runner: wine\n" >> "$YMLTOLU"
            echo "script:" >> "$YMLTOLU"
            echo "  game:" >> "$YMLTOLU"
            echo "    exe: \"$LU_EXE\"" >> "$YMLTOLU"
            if [ -z "$ADD_EXE_ARG" ]
                then
                    sleep 0.3
                    zenity --question --title "Shortcuts Creator" --text "Add launch arguments for EXE?" --no-wrap &>/dev/null
                    if [ $? -eq "0" ]
                        then
                            sleep 0.3
                            ADD_EXE_ARG="$(zenity --entry --title "Enter EXE arguments" --text "Specify additional launch arguments for EXE:")"
                    fi
            fi
            if [ ! -z "$ADD_EXE_ARG" ]
                then
                    echo "    args: "$ADD_EXE_ARG"" >> "$YMLTOLU"
            fi
            echo "  system: {}" >> "$YMLTOLU"
            echo "  wine: {}" >> "$YMLTOLU"
            LUTRIS_SKIP_INIT=1 lutris -i "$YMLTOLU" 2>/dev/null &
            ludb_md5sum1=$(md5sum "$LU_DB")
            timewait=15
            (IFS=$'\n' ; while true
                do
                    timesleep=$(($timesleep + 1))
                    if [ "$timesleep" != "$(($timewait + 1))" ]
                        then
                            sleep 1
                            ludb_md5sum2=$(md5sum "$LU_DB")
                            if [ "$ludb_md5sum1" != "$ludb_md5sum2" ]
                                then
                                    LUNEWAPP="$(ls $HOME/.config/lutris/games/"$SHRT_NAME"-*.yml 2>/dev/null)"
                                    sed -i 's/wine:\{1,\}$/wine: {}/' "$LUNEWAPP" 2>/dev/null
                                    sed -i '/  version: /d' "$LUNEWAPP" 2>/dev/null
                                    LUADDPID="$(ps -ef|grep "lutris -i"|grep -iF "$(basename "$YMLTOLU")"|grep -v grep|awk '{print$2}')"
                                    if [ ! -z "$LUADDPID" ]
                                        then
                                            zenity --question --title "Shortcuts Creator" --text "Application successfully added to Lutris!\nDo you want to close Lutris?" --no-wrap &>/dev/null
                                            if [ $? -eq "0" ]
                                                then
                                                    kill -9 "$LUADDPID" 2>/dev/null
                                            fi
                                    fi
                                    break
                            fi
                        else
                            LUADDPID="$(ps -ef|grep "lutris -i"|grep -iF "$(basename "$YMLTOLU")"|grep -v grep|awk '{print$2}')"
                            if [ ! -z "$LUADDPID" ]
                                then
                                    zenity --question --title "Shortcuts Creator" --text "The Lutris database hasn't changed, you may have canceled the app add to Lutris or are waiting for something else.\nDo you want to close Lutris?" --no-wrap &>/dev/null
                                    if [ $? -eq "0" ]
                                        then
                                            kill "$LUADDPID" 2>/dev/null
                                    fi
                            fi
                            break
                    fi
            done)
    fi
}

create_shortcut() {
    if [ ! -z "$LU_EXE" ]
        then
            exe2png "$LU_EXE"
            export DESKF="${SHRT_PATH}/${SHRT_NAME}.desktop"
            echo "[Desktop Entry]" > "$DESKF"
            zenity --question --title "Shortcuts Creator" --text "Change application name [ $SHRT_NAME ] ?" --no-wrap &>/dev/null
            if [ $? -eq "0" ]
                then
                    ADD_APP_NAME="$(zenity --entry --title "Enter name"  --text "Enter name for application")"
                    if [ ! -z "$ADD_APP_NAME" ]
                        then
                            export SHRT_NAME="$ADD_APP_NAME"
                    fi
            fi
            echo "Name=${SHRT_NAME}" >> "$DESKF"
            sleep 0.3
            zenity --question --title "Shortcuts Creator" --text "Add launch arguments for EXE?" --no-wrap &>/dev/null
            if [ $? -eq "0" ]
                then
                    sleep 0.3
                    ADD_EXE_ARG="$(zenity --entry --title "Enter EXE arguments" --text "Specify additional launch arguments for EXE:")"
                    if [ ! -z "$ADD_EXE_ARG" ]
                        then
                            echo "Exec=EXE_ARG=\"$ADD_EXE_ARG\" lutris-wine \"$LU_EXE\"" >> "$DESKF"
                        else
                            echo "Exec=lutris-wine \"$LU_EXE\"" >> "$DESKF"
                    fi
                else
                    echo "Exec=lutris-wine \"$LU_EXE\"" >> "$DESKF"
            fi
            sleep 0.3
            zenity --question --title "Shortcuts Creator" --text "Change advanced startup options for EXE?" --no-wrap &>/dev/null
            if [ $? -eq "0" ]
                then
                    sleep 0.3
                    SHRT_PARAM="$(echo -e "\nTERMINAL\n\nHOLD_TERMINAL\n\nLOG\n\nDEBUG\n\nUNSET_CMPSTR_SW\n\nNO_TRAY"| \
                    zenity --title "Shortcuts Creator" --text "Additional launch options:" --list --checklist --multiple --separator "\n" --column=1 --column=2 --hide-header --width=300 --height=500 2>/dev/null)"
                    if [ ! -z "$SHRT_PARAM" ]
                        then
                            (IFS=$'\n' ; for shrt_item in $SHRT_PARAM
                                do
                                    if [[ "$shrt_item" == "TERMINAL" ]]
                                        then
                                            sed -i 's/Exec=/Exec=TERMINAL=1  /g' "$DESKF"
                                    fi
                                    if [[ "$shrt_item" == "HOLD_TERMINAL" ]]
                                        then
                                            sed -i 's/Exec=/Exec=HOLD_TERMINAL=1 /g' "$DESKF"
                                    fi
                                    if [[ "$shrt_item" == "LOG" ]]
                                        then
                                            sed -i 's/Exec=/Exec=LOG=1 /g' "$DESKF"
                                    fi
                                    if [[ "$shrt_item" == "DEBUG" ]]
                                        then
                                            sed -i 's/\<TERMINAL=1\> //g' "$DESKF"
                                            sed -i 's/\<LOG=1\> //g' "$DESKF"
                                            sed -i 's/Exec=/Exec=DEBUG=1 /g' "$DESKF"
                                    fi
                                    if [[ "$shrt_item" == "UNSET_CMPSTR_SW" ]]
                                        then
                                            sed -i 's/Exec=/Exec=UNSET_CMPSTR_SW=1 /g' "$DESKF"
                                    fi
                                    if [[ "$shrt_item" == "NO_TRAY" ]]
                                        then
                                            sed -i 's/Exec=/Exec=NO_TRAY=1 /g' "$DESKF"
                                    fi
                            done)
                    fi
            fi
            echo "Type=Application" >> "$DESKF"
            echo "Categories=Lutris Wine App" >> "$DESKF"
            echo "StartupNotify=true" >> "$DESKF"
            echo "Path="$SHRT_PATH"" >> "$DESKF"
            echo "Icon="$LUPNG"" >> "$DESKF"
            chmod u+x "$DESKF"
            sleep 0.3
            echo -en "${GREEN}Creating ${RED}$(basename "$DESKF") ${GREEN}complete!\n$RESETCOLOR"
            zenity --question --title "Shortcuts Creator" --text "Shortcut [$(basename "$DESKF")] successfully created in the directory with the executable file.\nDo you want to add it to application menu?" --no-wrap &>/dev/null
            if [ $? -eq "0" ]
                then
                    if [ ! -d "$LW_APP_DIR" ]
                        then
                            mkdir -p "$LW_APP_DIR"
                    fi
                    try_cp "$DESKF" ${LW_APP_DIR}/
                    update-desktop-database -q "$MENUAPPDIR"
                    sleep 0.3
                    zenity --info --title "Shortcuts Creator" --text "Shortcut successfully added to application menu!" --no-wrap &>/dev/null
            fi
            zenity --question --title "Shortcuts Creator" --text "Do you want to add it to Lutris?" --no-wrap &>/dev/null
            if [ $? -eq "0" ]
                then
                    add_to_lutris
            fi
    fi
}

lu_debug() {
    if [[ ! -z "$DEBUG" && "$DEBUG" != 0 ]]
        then
            export LOG=1
            export TERMINAL=1
            lu_prerun
            UNSET_CMPSTR_SW=1
            #export VKD3D_LOG_FILE="$EXE_PATH/$(basename "$LU_EXE"|sed 's/.exe//')_vkd3d.log"
            #export VKBASALT_LOG_FILE="$EXE_PATH/$(basename "$LU_EXE"|sed 's/.exe//')_vkbasalt.log"
            export WINEDEBUG="fixme-all,err+loaddll,err+dll,err+file,err+reg"
            export DXVK_LOG_LEVEL="info"
            export DXVK_NVAPI_LOG_LEVEL="info"
            export DXVK_HUD="full"
            export VKD3D_DEBUG="warn"
            export WINE_MONO_TRACE="E:System.NotImplementedException"
            export VKBASALT_LOG_LEVEL="debug"
            export TMP_DEB="/tmp/${WINE_IN_USE}_$(date +'%Y-%m-%d_%H%M%S').debug"
            export PRINT_VARS="$(print_var "WINE_IN_USE" "WINEDIR" "WINE" "WINEARCH" "WINEPREFIX" "WIN_VER" "WINEDLLOVERRIDES" \
                "WINE_MONO_OVERRIDES" "EXE_PATH" "LU_EXE" "VKD3D_CONFIG" "LD_LIBRARY_PATH" "PATH" "WINEDEBUG" "DXVK_STATE_CACHE_PATH" \
                "VKD3D_DEBUG" "WINE_MONO_TRACE" "VKBASALT_LOG_LEVEL" "DXVK_LOG_LEVEL" "EXE_ARG" "PULSE_LATENCY_MSEC" \
                "LU_DIR" "LU_WINE_CONF" "GST_PLUGIN_SYSTEM_PATH_1_0" "WINE_GST_REGISTRY_DIR" "WINEESYNC" "VKBASALT_LOG_FILE" \
                "WINEFSYNC" "WINEFSYNC_FUTEX2" "WINE_FULLSCREEN_FSR" "WINE_FULLSCREEN_FSR_STRENGTH" "STAGING_SHARED_MEMORY" \
                "LOG_FILE" "WINE_LARGE_ADDRESS_AWARE" "terminal_app" "DXVK_NVAPIHACK" "RUN_MANGOHUD" "RUN_GAMEMODE" "VKD3D_LOG_FILE" \
                "VK_ICD_FILENAMES" "SDL_VIDEO_FULLSCREEN_DISPLAY" "DXVK_STATE_CACHE_PATH" "__GLX_VENDOR_LIBRARY_NAME" "__NV_PRIME_RENDER_OFFLOAD" \
                "DXVK_STATE_CACHE" "__GL_DXVK_OPTIMIZATIONS" "__GL_SHADER_DISK_CACHE_PATH" "__GL_SHADER_DISK_CACHE" "__GL_SHADER_DISK_CACHE_SIZE" \
                "MEDIACONV_AUDIO_DUMP_FILE" "MEDIACONV_AUDIO_TRANSCODED_FILE" "MEDIACONV_VIDEO_DUMP_FILE" "MEDIACONV_VIDEO_TRANSCODED_FILE")"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Date and time of start debug ] : $(date)" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ WINE version in LUTRIS ] : $WINE_IN_USE" >> "$TMP_DEB"
            [ -f "$WINEDIR/version" ] && cat "$WINEDIR/version" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Debug for program ] : $LU_EXE" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Operating system ] : $(lsb_release -d|sed 's/Description://g')" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ GLIBC version ] : $(ldd --version|grep -m1 ldd|awk '{print $NF}')" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Desktop Environment ] : $XDG_CURRENT_DESKTOP - $DESKTOP_SESSION" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Kernel ] : $(uname -r)" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ CPU ] :$(cat /proc/cpuinfo|grep "cpu cores"|sort -u|cut -d":" -f2)-physical $(cat /proc/cpuinfo| \
            grep "processor"|wc -l)-logical cores$(cat /proc/cpuinfo|grep "model name"|sort -u|cut -d":" -f2)" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Memory ] :" >> "$TMP_DEB"
            free -m >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            export DiskMP="$(mount|grep -w "on $(stat -c %m -- "$LU_EXE")")"
            echo "[ Disk info ] : $(echo $DiskMP|awk -F'type ' '{print $2}') " >> "$TMP_DEB"
            echo -en "$(df -h|head -1)\n$(df -h|grep "$(echo $DiskMP|awk '{print$1}')")\n" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Graphic cards and drivers ] :" >> "$TMP_DEB"
            echo $(lspci|grep -iF VGA) >> "$TMP_DEB"
            if [ ! -x "$(which glxinfo 2>/dev/null)" ]
                then
                    echo "[!]glxinfo not found[!]"  >> "$TMP_DEB"
                else
                    glxinfo -B >> "$TMP_DEB"
            fi
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            if [ ! -x "$(which vulkaninfo 2>/dev/null)" ]
                then
                    echo "[!]vulkaninfo not found[!]"  >> "$TMP_DEB"
                else
                    echo "[ Vulkan info device name ] : $(vulkaninfo|grep deviceName|cut -d"=" -f2)" >> "$TMP_DEB"
            fi
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            if [ ! -x "$(which vkcube 2>/dev/null)" ]
                then
                    echo "[!]vkcube not found[!]"  >> "$TMP_DEB"
                else
                    vkcube --c 50
                    if [ $? -eq 0 ]
                        then
                            echo "[ Vulkan cube test ] : Passed successfully!" >> "$TMP_DEB"
                        else
                            echo "[!] Vkcube test completed with error [!]" >> "$TMP_DEB"
                    fi
            fi
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            if [ ! -x "$(which gamemoderun 2>/dev/null)" ]
                then
                    echo "[!]gamemod not found[!]"  >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ -f "$WTRX_LOG" ]
                then
                    echo "[ Winetricks log ] :" >> "$TMP_DEB"
                    cat "$WTRX_LOG" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [[ ! -z "$dxvk" && "$dxvk" == true ]]
                then
                    echo "[ DXVK ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ DXVK ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ ! -z "$dxvk_version" ]
                then
                    echo "[ DXVK version ] : $dxvk_version" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [[ ! -z "$vkd3d" && "$vkd3d" == true ]]
                then
                    echo "[ VKD3D ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ VKD3D ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ ! -z "$vkd3d_version" ]
                then
                    echo "[ VKD3D version ] : $vkd3d_version" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [[ ! -z "$dxvk_nvapi" && "$dxvk_nvapi" == true ]]
                then
                    echo "[ DXVK-NVAPI ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ DXVK-NVAPI ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ ! -z "$dxvk_nvapi_version" ]
                then
                    echo "[ DXVK-NVAPI version ] : $dxvk_nvapi_version" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [[ ! -z "$d3d_extras" && "$d3d_extras" == true ]]
                then
                    echo "[ D3D EXTRAS ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ D3D EXTRAS ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ ! -z "$d3d_extras_version" ]
                then
                    echo "[ D3D EXTRAS version ] : $d3d_extras_version" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [[ ! -z "$dgvoodoo2" && "$dgvoodoo2" == true ]]
                then
                    echo "[ DGVOODOO2 ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ DGVOODOO2 ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ ! -z "$dgvoodoo2_version" ]
                then
                    echo "[ DGVOODOO2 version ] : $dgvoodoo2_version" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [[ ! -z "$battleye" && "$battleye" == true ]]
                then
                    echo "[ PROTON BATTLEYE ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ PROTON BATTLEYE ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            echo "[ Network status ] : $(ping -4 -q -c1 -W0.5 google.com &>/dev/null && echo ONLINE || echo OFFLINE)" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo " -------------------------------------------" >> "$TMP_DEB"
            echo "|[             Starting logging            ]|" >> "$TMP_DEB"
            echo " -------------------------------------------" >> "$TMP_DEB"
        else
            lu_prerun
            export WINEDEBUG="-all"
            export DXVK_LOG_LEVEL="none"
            export VKD3D_DEBUG="none"
            export DXVK_LOG_PATH="none"
            export VKBASALT_LOG_LEVEL="error"
    fi
}

clear_log() {
    sed -i '/gstreamer-1.0/d' "$LOG_FILE"
    sed -i '/winemenubuilder.exe/d' "$LOG_FILE"
    sed -i '/.fx$/d' "$LOG_FILE"
    sed -i '/HACK_does_openvr_work/d' "$LOG_FILE"
    sed -i '/dlopen failed - libgamemode.so/d' "$LOG_FILE"
    sed -i '/Uploading is disabled/d' "$LOG_FILE"
    sed -i '/gamemodeauto: /d' "$LOG_FILE"
    sed -i '/\[MANGOHUD\] \[info\] \[config.cpp:114\] skipping config:/d' "$LOG_FILE"
}

dis_debug_msg() {
    if [[ ! -z "$DEBUG" && "$DEBUG" != 0 ]]
        then
            print_error "Unable to start DEBUG for this file!"
            zenity --error --text "Unable to start DEBUG for this file!" --no-wrap &>/dev/null
            exit 1
    fi
}

dis_cmd_msg() {
    if [[ ! -z "$TERMINAL" && "$TERMINAL" != 0 ]]
        then
            print_error "Unable to start TERMINAL for this file!"
            zenity --error --text "Unable to start TERMINAL for this file!" --no-wrap &>/dev/null
            exit 1
    fi
}

import_luwine_conf() {
    export $(yaml_parser "$LU_WINE_CONF"|sed "s/wine_o_Q_//g"|sed "s/system_o_Q_//g"|sed "s/env_o_Q_//g")
    export WINE_IN_USE="$version"
    export WINEDIR="$LU_DIR/runners/wine/$WINE_IN_USE"
    export WINE="$WINEDIR/bin/wine"
    if [ ! -f "$LU_WINE_DIR/.lu_wine_cfg_chksum" ]
        then
            export NEEDCHKDLL=1
            echo "$(md5sum "$LU_WINE_CONF"|awk '{print$1}')" > "$LU_WINE_DIR/.lu_wine_cfg_chksum"
    elif [[ "$(cat $LU_WINE_DIR/.lu_wine_cfg_chksum 2>/dev/null)" != "$(md5sum "$LU_WINE_CONF"|awk '{print$1}')" ]]
        then
            export NEEDCHKDLL=1
            echo "$(md5sum "$LU_WINE_CONF"|awk '{print$1}')" > "$LU_WINE_DIR/.lu_wine_cfg_chksum"
    fi
}

check_def_wine() {
    if [[ ! -f "$WINE" && "$(ls -1 "$LU_WINE_DIR"|sed 's/^ *//g'|wc -l)" != 1 ]]
        then
            print_error "Default WINE not selected!"
            SETWINE="$(echo -e "\n$(echo "$(ls "$LU_WINE_DIR")"|sed ':a;N;$!ba;s/\n/\n\n/g')"| \
            zenity --title "Wine Manager" --text "Select default WINE:" --list --radiolist --separator "\n" --column=1 --column=2 --hide-header --width=300 --height=500  2>/dev/null)"
            if [ ! -z "$SETWINE" ]
                then
                    sed -i 's/^  version: .*/  version: '$SETWINE'/g' "$LU_WINE_CONF"
                    print_info "WINE $SETWINE select as default!"
                    import_luwine_conf
                else
                    check_def_wine
            fi
    elif [[ ! -f "$WINE" && "$(ls -1 "$LU_WINE_DIR"|sed 's/^ *//g'|wc -l)" != 1 ]] && [[ "$PLU_INST" == 1 || "$PGE_INST" == 1 || "$PPW_INST" == 1 || "$PK4_INST" == 1 ]]
        then
            print_error "Default WINE not selected!"
            SETWINE="$(echo -e "\n$(echo "$(ls "$LU_WINE_DIR")"|sed ':a;N;$!ba;s/\n/\n\n/g')"| \
            zenity --title "Wine Manager" --text "Select default WINE:" --list --radiolist --separator "\n" --column=1 --column=2 --hide-header --width=300 --height=500  2>/dev/null)"
            if [ ! -z "$SETWINE" ]
                then
                    sed -i 's/^  version: .*/  version: '$SETWINE'/g' "$LU_WINE_CONF"
                    print_info "WINE $SETWINE select as default!"
                    import_luwine_conf
                else
                    check_def_wine
            fi
    elif [[ -f "$WINE" && "$(ls -1 "$LU_WINE_DIR"|sed 's/^ *//g'|wc -l)" == 1 ]] && [[ "$PLU_INST" == 1 || "$PGE_INST" == 1 || "$PPW_INST" == 1 || "$PK4_INST" == 1 ]]
        then :
    elif [[ ! -f "$WINE" && "$(ls -1 "$LU_WINE_DIR"|sed 's/^ *//g'|wc -l)" == 1 ]] && [[ "$PLU_INST" == 1 || "$PGE_INST" == 1 || "$PPW_INST" == 1 || "$PK4_INST" == 1 ]]
        then
            export SETWINE="$(ls -1 "$LU_WINE_DIR"|head -1)"
            sed -i 's/^  version: .*/  version: '$SETWINE'/g' "$LU_WINE_CONF"
            print_info "WINE $SETWINE select as default!"
            import_luwine_conf
            zenity --info --title "Wine Manager" --text "WINE $SETWINE select as default!" --no-wrap &>/dev/null
    elif [[ "$PLU_INST" == 1 || "$PGE_INST" == 1 || "$PPW_INST" == 1 || "$PK4_INST" == 1 || "$SETDEFWINE" == 1 ]]
        then
            if [[ -z "$(pgrep -fa yad|grep "Wine Manager"|awk '{print$1}')" && -z "$(pgrep -fa zenity|grep "Wine Manager"|awk '{print$1}')" ]]
                then
                    print_info "Selecting default WINE..."
                    SETWINE="$(echo -e "\n$(echo "$(ls "$LU_WINE_DIR")"|sed ':a;N;$!ba;s/\n/\n\n/g')"| \
                    zenity --title "Wine Manager" --text "Select default WINE:" --list --radiolist --separator "\n" --column=1 --column=2 --hide-header --width=300 --height=500  2>/dev/null)"
                    if [ ! -z "$SETWINE" ]
                        then
                            sed -i 's/^  version: .*/  version: '$SETWINE'/g' "$LU_WINE_CONF"
                            print_info "WINE $SETWINE select as default!"
                            import_luwine_conf
                    fi
                else
                    print_error "Wine Manager already runing!"
                    zenity --error --title "Wine Manager" --text "Wine Manager already runing!" --no-wrap &>/dev/null
            fi
    elif [[ ! -f "$WINE" && "$(ls -1 "$LU_WINE_DIR"|sed 's/^ *//g'|wc -l)" == 1 ]]
        then
            export SETWINE="$(ls -1 "$LU_WINE_DIR"|head -1)"
            sed -i 's/^  version: .*/  version: '$SETWINE'/g' "$LU_WINE_CONF"
            print_info "WINE $SETWINE select as default!"
            import_luwine_conf
            zenity --info --title "Wine Manager" --text "WINE $SETWINE select as default!" --no-wrap &>/dev/null
    fi
}

lu_prerun() {
    if [ ! -z "$LU_EXE" ]
        then
            if [ -z "$EXE_PATH" ]
                then
                    export EXE_PATH="$(cd "$(dirname "$LU_EXE")" >/dev/null 2>&1 && pwd)"
                    export EXE_DIR="$(grep -o '[^/]*$' <<< "$EXE_PATH")"
                    cd "$EXE_PATH"
                    if [ "$LOG" == 1 ]
                        then
                            export LOG_FILE="$EXE_PATH/$(basename "$LU_EXE")_$(date +'%Y-%m-%d_%H%M%S').log"
                    fi
                else
                    cd "$EXE_PATH"
                    if [ "$LOG" == 1 ]
                        then
                            export LOG_FILE="$EXE_PATH/$(basename "$LU_EXE")_$(date +'%Y-%m-%d_%H%M%S').log"
                    fi
            fi
    elif [ ! -z "$LU_SHELL_EXE" ]
        then
            if [ -z "$LU_SHELL_EXE_PTH" ]
                then
                    export LU_SHELL_EXE_PTH="$(cd "$(dirname "$LU_SHELL_EXE")" >/dev/null 2>&1 && pwd)"
                    cd "$LU_SHELL_EXE_PTH"
                    if [ "$LOG" == 1 ]
                        then
                            export LOG_FILE="$LU_SHELL_EXE_PTH/$(basename "$LU_SHELL_EXE")_$(date +'%Y-%m-%d_%H%M%S').log"
                    fi
                else
                    cd "$LU_SHELL_EXE_PTH"
                    if [ "$LOG" == 1 ]
                        then
                            export LOG_FILE="$LU_SHELL_EXE_PTH/$(basename "$LU_SHELL_EXE")_$(date +'%Y-%m-%d_%H%M%S').log"
                    fi
            fi
    elif [ ! -z "$LU_PTH" ]
        then
            cd "$LU_PTH"
    elif [ ! -z "$LU_SHELL_PTH" ]
        then
            cd "$LU_SHELL_PTH"
    else
        cd "$WINEPREFIX/drive_c"
    fi
}

lu_run() {
    lu_tray
    us_layout_sw
    lu_debug 2>/dev/null
    compositor_sw 2>/dev/null
    if [[ "$LOG" == 1 && "$TERMINAL" == 1 ]]
        then
            if [ ! -z "$LU_SHELL_EXE" ]
                then
                    $terminal_app $term_hold -e $SHELL -c "echo -en '$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n\n'|& tee -a '$LOG_FILE' ; '$@'|& tee -a '$LOG_FILE'"
                    clear_log  2>/dev/null
                    xdg-open "$LOG_FILE" 2>/dev/null
            elif [ ! -z "$LU_SHELL_PTH" ]
                then
                    $terminal_app $term_hold -e $SHELL
            else
                $terminal_app $term_hold -e $SHELL -c "echo -en '$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n\n'|& tee -a '$LOG_FILE' ; $SINGLE_CPU $RUN_GAMEMODE $RUN_MANGOHUD '$WINE' '$@' $EXE_ARG|& tee -a '$LOG_FILE'"
                clear_log  2>/dev/null
                xdg-open "$LOG_FILE" 2>/dev/null
            fi
    elif [ "$LOG" == 1 ]
        then
            echo -en "$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n"
            $SINGLE_CPU $RUN_GAMEMODE $RUN_MANGOHUD "$WINE" "$@" $EXE_ARG|& tee -a "$LOG_FILE"
            clear_log  2>/dev/null
            xdg-open "$LOG_FILE" 2>/dev/null
    elif [ "$TERMINAL" == 1 ]
        then
            if [ ! -z "$LU_SHELL_EXE" ]
                then
                    if [ "$LOG" == 1 ]
                        then
                            $terminal_app $term_hold -e $SHELL -c "echo -en '$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n\n'|& tee -a '$LOG_FILE' ; '$@'|& tee -a '$LOG_FILE'"
                            clear_log  2>/dev/null
                            xdg-open "$LOG_FILE" 2>/dev/null
                        else
                            $terminal_app $term_hold -e $SHELL -c "$@"
                    fi
            elif [ ! -z "$LU_SHELL_PTH" ]
                then
                    $terminal_app $term_hold -e $SHELL
            else
                if [ ! -z "$LU_LNK" ]
                    then
                        export TMP_OUT="/tmp/${WINE_IN_USE}_$(date +'%Y-%m-%d_%H%M%S').out"
                        $terminal_app $term_hold -e $SHELL -c "echo -en '$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n' ; $SINGLE_CPU $RUN_GAMEMODE $RUN_MANGOHUD '$WINE' '$@' $EXE_ARG|& tee -a '$TMP_OUT'"
                    else
                        $terminal_app $term_hold -e $SHELL -c "echo -en '$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n' ; $SINGLE_CPU $RUN_GAMEMODE $RUN_MANGOHUD '$WINE' '$@' $EXE_ARG"
                fi
            fi
    else
        echo -en "$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n"
        $SINGLE_CPU $RUN_GAMEMODE $RUN_MANGOHUD "$WINE" "$@" $EXE_ARG
    fi
    compositor_sw 2>/dev/null
    try_rm "$TMP_DEB" "$TMP_OUT" &>/dev/null
    check_tray
    if [[ -z "$FORCE_TRAY" && ! -z "$TRAY_PID" ]]
        then
            if wine_is_death && shell_is_death
                then
                    check_tray; check_wine_pids; check_luwine_sh_pid
                    if [[ -z "$WINE_PIDS" && -z "$LW_SH_PID" && ! -z "$TRAY_PID" ]]
                        then
                            lu_killtray
                    fi
            fi
    fi
}

lu_prestart() {
    export LU_EXE="$(readlink -f "$LU_START")"
    export LU_MSI="$(basename "$LU_EXE"|grep -iF ".msi")"
    export LU_BAT="$(basename "$LU_EXE"|grep -iF ".bat")"
    export LU_REG="$(basename "$LU_EXE"|grep -iF ".reg")"
    export LU_LNK="$(basename "$LU_EXE"|grep -iF ".lnk")"
    if [[ ! -z "$LU_MSI" && ! -z "$(file "$LU_EXE"|grep "Os: Windows"|grep -o "MSI Installer")" ]]
        then
            dis_debug_msg
            UNSET_CMPSTR_SW=1
            lu_run "$LU_EXE"
    elif [ ! -z "$LU_BAT" ]
        then
            dis_debug_msg
            TERMINAL=1
            UNSET_CMPSTR_SW=1
            lu_run "$LU_EXE"
    elif [ ! -z "$LU_REG" ]
        then
            dis_debug_msg
            dis_cmd_msg
            reg_edit "$LU_EXE"
    else
        if [[ ! -z "$(file "$LU_EXE"|grep "for MS Windows"|grep -o "executable")" || ! -z "$(file "$LU_EXE"|grep "MS Windows"|grep -o "shortcut")" ]]
            then
                lu_run "$LU_EXE"
            else
                print_error "Unable to start Lutris Wine for this file!"
                zenity --error --text "Unable to start Lutris Wine for this file!" --no-wrap &>/dev/null
        fi
    fi
}

lu_start() {
    if [ -f "$1" ]
        then
            LU_START="$1"
            if [ -z "$EXE_ARG" ]
                then
                    export EXE_ARG="${*:2}"
            fi
    elif [ -f "$2" ]
        then
            LU_START="$2"
            if [ -z "$EXE_ARG" ]
                then
                    export EXE_ARG="${*:3}"
            fi
    fi
    if [ ! -z "$LU_START" ]
        then
            lu_prestart
        else
            if [[ ! -z "$DEBUG" && "$DEBUG" != 0 ]]
                then
                    export DEBUG_EXE="$(zenity --title "Specify the executable file to start DEBUG:" --file-selection --file-filter="*.exe")"
                    if [ -f "$DEBUG_EXE" ]
                        then
                            export DEBUG_FL="$(readlink -f "$DEBUG_EXE")"
                            if [ ! -z "$(file "$DEBUG_FL"|grep "for MS Windows"|grep -o "executable")" ]
                                then
                                    export LU_EXE="$DEBUG_FL"
                                    lu_run "$LU_EXE"
                                else
                                    print_error "Unable to start DEBUG for this file!"
                                    zenity --error --text "Unable to start DEBUG for this file!" --no-wrap &>/dev/null
                            fi
                    elif [ -d "$DEBUG_EXE" ]
                        then
                            print_error "Specify the executable file to start DEBUG!"
                            zenity --error --text "Specify the executable file to start DEBUG!" --no-wrap &>/dev/null
                            lu_start
                    fi
                else
                    export LU_START="$(zenity --title "Specify file to run in Lutris Wine:" --file-selection --file-filter="*.exe *.lnk *.bat *.msi *.reg")"
                    if [ -f "$LU_START" ]
                        then
                            lu_prestart
                    elif [ -d "$LU_START" ]
                        then
                            print_error "Specify file to run in Lutris Wine!"
                            zenity --error --text "Specify file to run in Lutris Wine!" --no-wrap &>/dev/null
                            unset LU_START
                            lu_start
                    fi
            fi
    fi
}

lu_cmd() {
    UNSET_CMPSTR_SW=1
    TERMINAL=1
    export DEBUG=0
    if [ -f "$2" ]
       then
           lu_start "$@"
    elif [ -d "$2" ]
       then
           export LU_PTH="$(readlink -f "$2")"
           lu_run cmd
    else
       lu_run cmd
    fi
}

lu_shell() {
    UNSET_CMPSTR_SW=1
    TERMINAL=1
    export DEBUG=0
    if [ -f "$2" ]
        then
            if [[ ! -z "$(file "$2"|grep "script"|grep -o "executable")" || ! -z "$(file "$2"|grep "ELF"|grep -o "executable")" ]]
                then
                    export LU_SHELL_EXE="$(readlink -f "$2")"
                    lu_run "$LU_SHELL_EXE"
                else
                    print_error "Unable to start Lutris Wine for this file!"
                    zenity --error --text "Unable to start Lutris Wine for this file!" --no-wrap &>/dev/null
            fi
        elif [ -d "$2" ]
            then
                export LU_SHELL_PTH="$(readlink -f "$2")"
                lu_run
        else
            export LU_SHELL_PTH="$HOME"
            lu_run
    fi
}

lu_regedit() {
    if [ -z "$(pgrep regedit.exe)" ]; then :
        else
            print_error "Registry Editor already runing!"
            zenity --error --title "Registry Editor" --text "Registry Editor already runing!" --no-wrap &>/dev/null
            exit 1
    fi
    UNSET_CMPSTR_SW=1
    export DEBUG=0
    unset EXE_ARG
    lu_run regedit
}

lu_control() {
    if [ -z "$(pgrep control.exe)" ]; then :
        else
            print_error "Control Panel already runing!"
            zenity --error --title "Control Panel" --text "Control Panel already runing!" --no-wrap &>/dev/null
            exit 1
    fi
    UNSET_CMPSTR_SW=1
    export DEBUG=0
    unset EXE_ARG
    lu_run control
}

lu_winecfg() {
    if [ -z "$(pgrep winecfg.exe)" ]; then :
        else
            print_error "Wine Settings already runing!"
            zenity --error --title "Wine Settings" --text "Wine Settings already runing!" --no-wrap &>/dev/null
            exit 1
    fi
    UNSET_CMPSTR_SW=1
    export DEBUG=0
    unset EXE_ARG
    lu_run winecfg
}

lu_taskmgr() {
    if [ -z "$(pgrep taskmgr.exe)" ]; then :
        else
            print_error "Task Manager already runing!"
            zenity --error --title "Task Manager" --text "Task Manager already runing!" --no-wrap &>/dev/null
            exit 1
    fi
    UNSET_CMPSTR_SW=1
    export DEBUG=0
    unset EXE_ARG
    lu_run taskmgr
}

lu_uninstaller() {
    if [ -z "$(pgrep uninstaller.exe)" ]; then :
        else
            print_error "Uninstaller already runing!"
            zenity --error --title "Uninstaller" --text "Uninstaller already runing!" --no-wrap &>/dev/null
            exit 1
    fi
    UNSET_CMPSTR_SW=1
    export DEBUG=0
    unset EXE_ARG
    lu_run uninstaller
}

winetricks() {
    if [ -z "$(pgrep winetricks)" ]; then :
        else
            print_error "Winetricks already runing!"
            zenity --error --title "Winetricks" --text "Winetricks already runing!" --no-wrap &>/dev/null
            exit 1
    fi
    if [[ ! -z "$system_winetricks" && "$system_winetricks" == true ]]
        then
            if [ ! -z "$(which winetricks 2>/dev/null)" ]
                then
                    print_info "Using SYSTEM winetricks!"
                    "$(which winetricks)" "$@"
                else
                    print_error "Winetricks not found in your system!"
                    print_info "Using LUTRIS winetricks!"
                    check_winetricks
                    "$WTRX_DIR/winetricks" "$@"
            fi
        else
            print_info "Using LUTRIS winetricks!"
            check_winetricks
            "$WTRX_DIR/winetricks" "$@"
    fi
}

lu_openpfx() {
    xdg-open "$WINEPREFIX/drive_c/" 2>/dev/null
}

lu_exit() {
    check_tray; check_wine_pids; check_exes; check_luwine_sh_pid
    if [[ ! -z "$WINE_PIDS" || ! -z "$EXE_PIDS" || ! -z "$TRAY_PID" || ! -z "$LW_SH_PID" ]]
        then
            echo 1 > /tmp/FORCE_EXIT
            lu_killtray
            lu_killshell
            lu_killexe
            lu_killwine
            pkill zenity
            pkill yad
            print_info "Lutris Wine successfully killed!"
            zenity --info --title "Lutris Wine Killer" --text "Lutris Wine successfully killed!" --no-wrap &>/dev/null &
            sleep 2
            try_rm /tmp/FORCE_EXIT
            pkill lutris-wine
        else
            print_error "Lutris Wine not runing!"
            zenity --error --title "Lutris Wine Killer" --text "Lutris Wine not runing!" --no-wrap &>/dev/null &
    fi
}

lu_killshell() {
    check_luwine_sh_pid
    if [ -f "/tmp/FORCE_EXIT" ]
        then
            while true
                do
                    check_luwine_sh_pid
                    if  [ ! -z "$LW_SH_PID" ]
                        then
                            kill -9 "$LW_SH_PID" 2>/dev/null
                        else
                            break
                    fi
            done
    elif [ ! -z "$LW_SH_PID" ]
        then
            while true
                do
                    check_luwine_sh_pid
                    if  [ ! -z "$LW_SH_PID" ]
                        then
                            kill -9 "$LW_SH_PID" 2>/dev/null
                        else
                            break
                    fi
            done
            print_info "Lutris Wine SHELL processes successfully killed!"
            zenity --info --title "SHELL Killer" --text "Lutris Wine SHELL processes successfully killed!" --no-wrap &>/dev/null &
    else
        print_error "Lutris Wine SHELL processes not found!"
        zenity --error --title "SHELL Killer" --text "Lutris Wine SHELL processes not found!" --no-wrap &>/dev/null &
    fi
}

lu_killtray() {
    check_tray
    if [ -f "/tmp/FORCE_EXIT" ]
        then
            kill -9 "$TRAY_PID" 2>/dev/null
    elif [ ! -z "$TRAY_PID" ]
        then
            echo 1 > /tmp/FORCE_EXIT
            kill -9 "$TRAY_PID" 2>/dev/null
            try_rm /tmp/FORCE_EXIT
    else
        print_error "Lutris Wine not runing in tray!"
        zenity --error --title "Tray Killer" --text "Lutris Wine not runing in tray!" --no-wrap &>/dev/null &
    fi
}

lu_killwine() {
    check_wine_pids
    if [ -f "/tmp/FORCE_EXIT" ]
        then
            kill -9 $WINE_PIDS 2>/dev/null
    elif [[ ! -z "$WINE_PIDS" ]]
        then
            echo 1 > /tmp/FORCE_EXIT
            kill -9 $WINE_PIDS 2>/dev/null
            print_info "Wine processes successfully killed!"
            zenity --info --title "Wine Killer" --text "Wine processes successfully killed!" --no-wrap &>/dev/null &
            try_rm /tmp/FORCE_EXIT
    else
        print_error "Wine processes not found!"
        zenity --error --title "Wine Killer" --text "Wine processes not found!" --no-wrap &>/dev/null &
    fi
}

lu_killexe() {
    check_exes
    if [ -f "/tmp/FORCE_EXIT" ]
        then
            kill -9 $EXE_PIDS 2>/dev/null
    elif [ ! -z "$EXE_PIDS" ]
        then
            echo 1 > /tmp/FORCE_EXIT
            kill -9 $EXE_PIDS 2>/dev/null
            print_info "Wine EXE processes successfully killed!"
            zenity --info --title "EXE Killer" --text "Wine EXE processes successfully killed!" --no-wrap &>/dev/null &
            try_rm /tmp/FORCE_EXIT
    else
        print_error "Wine EXE processes not found!"
        zenity --error --title "EXE Killer" --text "Wine EXE processes not found!" --no-wrap &>/dev/null &
    fi
}

lu_clearpfx() {
    if [ -z "$(pgrep -fa zenity|grep "Prefix Cleaner"|awk '{print$1}')" ]; then :
        else
            print_error "Prefix Cleaner already runing!"
            zenity --error --title "Prefix Cleaner" --text "Prefix Cleaner already runing!" --no-wrap &>/dev/null
            exit 1
    fi
    zenity --question --title "Prefix Cleaner" --text "Do you really want to clear prefix ["$WINEPREFIX"] ?" --no-wrap &>/dev/null
    if [ $? -eq "0" ]
        then
            try_rm "$WINEPREFIX/registry_"*
            try_rm "$WINEPREFIX/"*.reg
            try_rm "$WINEPREFIX/"*.log
            try_rm "$WINEPREFIX/.update-timestamp"
            try_rm "$WINEPREFIX/drive_c/.windows-serial"
            try_rm "$WINEPREFIX/drive_c/windows/"
            try_rm "$WINEPREFIX/drive_c/ProgramData/Setup"
            try_rm "$WINEPREFIX/drive_c/ProgramData/Windows"
            try_rm "$WINEPREFIX/drive_c/ProgramData/WindowsTask"
            try_rm "$WINEPREFIX/drive_c/ProgramData/Package Cache"
            try_rm "$WINEPREFIX/drive_c/users/Public/Local Settings/Application Data/Microsoft"
            try_rm "$WINEPREFIX/drive_c/users/Public/Local Settings/Application Data/Temp"
            try_rm "$WINEPREFIX/drive_c/users/Public/Local Settings/Temporary Internet Files"
            try_rm "$WINEPREFIX/drive_c/users/Public/Application Data/Microsoft"
            try_rm "$WINEPREFIX/drive_c/users/Public/Application Data/wine_gecko"
            try_rm "$WINEPREFIX/drive_c/users/Public/Temp"
            try_rm "$WINEPREFIX/drive_c/users/user/Local Settings/Application Data/Microsoft"
            try_rm "$WINEPREFIX/drive_c/users/user/Local Settings/Application Data/Temp"
            try_rm "$WINEPREFIX/drive_c/users/user/Local Settings/Temporary Internet Files"
            try_rm "$WINEPREFIX/drive_c/users/user/Application Data/Microsoft"
            try_rm "$WINEPREFIX/drive_c/users/user/Application Data/wine_gecko"
            try_rm "$WINEPREFIX/drive_c/users/user/Temp"
            try_rm "$WINEPREFIX/drive_c/Program Files/Internet Explorer"
            try_rm "$WINEPREFIX/drive_c/Program Files/Windows Media Player"
            try_rm "$WINEPREFIX/drive_c/Program Files/Windows NT"
            try_rm "$WINEPREFIX/drive_c/Program Files/Common Files"
            try_rm "$WINEPREFIX/drive_c/Program Files (x86)/Internet Explorer"
            try_rm "$WINEPREFIX/drive_c/Program Files (x86)/Common Files"
            try_rm "$WINEPREFIX/drive_c/Program Files (x86)/Windows Media Player"
            try_rm "$WINEPREFIX/drive_c/Program Files (x86)/Windows NT"
            try_rm "$__GL_SHADER_DISK_CACHE_PATH/"*
            try_rm "$DXVK_STATE_CACHE_PATH/"*
            try_rm "$WINE_GST_REGISTRY_DIR/"*
            try_rm "$HOME/.cache/mesa_shader_cache/"*
            print_info "Prefix cleared successfully!"
            zenity --info --title "Clearing prefix" --text "Prefix "$WINEPREFIX" cleared successfully!" --no-wrap &>/dev/null
    fi
}

lu_rmapp() {
    if [ -z "$(pgrep -fa yad|grep "Shortcuts Remover"|awk '{print$1}')" ]; then :
        else
            print_error "Shortcuts Remover already runing!"
            zenity --error --title "Shortcuts Remover" --text "Shortcuts Remover already runing!" --no-wrap &>/dev/null
            exit 1
    fi
    updmenuapp() {
        update-desktop-database -q "$MENUAPPDIR"
        sleep 0.3
        zenity --info --title "Shortcuts Remover" --text "Lutris Wine applications deleted from menu!" --no-wrap &>/dev/null
    }
    export LWAPPSHRT="$(grep "Categories=Lutris Wine App" -lr "$MENUAPPDIR")"
    if [[ ! -z "$(echo "$LWAPPSHRT"|head -1)" ]]
        then
            LW_APP_RM="$(echo -e "\n$(echo "$LWAPPSHRT"|xargs -d "\n" -I {} grep "^Name=" {}|sed 's/^Name=//g'|sed ':a;N;$!ba;s/\n/\n\n/g')"| \
            yad --title "Shortcuts Remover" --list --checklist --separator "\n" --column="" --column="Select shortcuts to remove:" \
            --text-align=center --center --window-icon="/usr/share/lutris-wine/icon/default_icon.png" \
            --width=300 --height=500 --button="REMOVE ALL:2"  --button="EXIT:1" --button="OK:0" 2>/dev/null)"
            if [ "$?" == "2" ]
                then
                    sleep 0.3
                    zenity --question --title "Shortcuts Remover" --text "Are you sure you want to remove all Lutris Wine applications from menu?" --no-wrap &>/dev/null
                    if [ $? -eq "0" ]
                        then
                            echo "$LWAPPSHRT"|xargs -d "\n" -I {} try_rm {}
                            try_rm "$LW_APP_DIR"
                            updmenuapp
                    fi
            elif [ ! -z "$(echo "$LW_APP_RM"|head -1)" ]
                then
                    export LW_APP_RM="$(echo "$LW_APP_RM"|sed '/^TRUE$/d'|sed '/^$/d')"
                    (IFS=$'\n' ; for LWAPPRM in $LW_APP_RM
                        do
                            export LWSHRTRM="$(echo "$LWAPPSHRT"|xargs -d "\n" -I {} grep -lo "Name=$LWAPPRM" {} 2>/dev/null)"
                            if [ ! -z "$LWSHRTRM" ]
                                then
                                    try_rm "$LWSHRTRM"
                            fi
                    done)
                    updmenuapp
            fi
        else
            zenity --error --title "Shortcuts Remover" --text "Lutris Wine applications not found in menu!" --no-wrap &>/dev/null
    fi
}

lu_shortcut() {
    if [ -z "$(pgrep -fa zenity|grep "Shortcuts Creator"|awk '{print$1}')" ]; then :
        else
            print_error "Shortcuts Creator already runing!"
            zenity --error --title "Shortcuts Creator" --text "Shortcuts Creator already runing!" --no-wrap &>/dev/null
            exit 1
    fi
    if [ -f "$2" ]
        then
            export SHRT_FL="$(readlink -f "$2")"
            if [ ! -z "$(file "$SHRT_FL"|grep "for MS Windows"|grep -o "executable")" ]
                then
                    export LU_EXE="$SHRT_FL"
                    if [[ ! -z "$ADDTOLU" && "$ADDTOLU" != 0 ]]
                        then
                            add_to_lutris "$LU_EXE"
                        else
                            create_shortcut "$LU_EXE"
                    fi
                else
                    print_error "Unable to create shortcut for this file!"
                    zenity --error --title "Shortcuts Creator" --text "Unable to create shortcut for this file!" --no-wrap &>/dev/null
            fi
        else
            SHRT_EXE="$(zenity --title "Shortcuts Creator" --file-selection --file-filter="*.exe")"
            if [ -f "$SHRT_EXE" ]
                then
                    export SHRT_FL="$(readlink -f "$SHRT_EXE")"
                    if [ ! -z "$(file "$SHRT_FL"|grep "for MS Windows"|grep -o "executable")" ]
                        then
                            export LU_EXE="$SHRT_FL"
                            if [[ ! -z "$ADDTOLU" && "$ADDTOLU" != 0 ]]
                                then
                                    add_to_lutris "$LU_EXE"
                                else
                                    create_shortcut "$LU_EXE"
                            fi
                        else
                            print_error "Unable to create shortcut for this file!"
                            zenity --error --title "Shortcuts Creator" --text "Unable to create shortcut for this file!" --no-wrap &>/dev/null
                    fi
            elif [ -d "$SHRT_EXE" ]
                then
                    print_error "Specify the executable file to create shortcut!"
                    zenity --error --title "Shortcuts Creator" --text "Specify the executable file to create shortcut!" --no-wrap &>/dev/null
            fi
    fi
}

lu_explorer() {
    if [ -z "$(pgrep -fa explorer.exe|grep -v "/desktop"|awk '{print$1}')" ]; then :
        else
            print_error "Explorer already runing!"
            zenity --error --title "Explorer" --text "Explorer already runing!" --no-wrap &>/dev/null
            exit 1
    fi
    UNSET_CMPSTR_SW=1
    unset EXE_ARG
    export DEBUG=0
    lu_run explorer
}

lu_help() {
    if [ -z "$(pgrep -fa zenity|grep "Lutris Wine usage info"|awk '{print$1}')" ]; then :
        else
            print_error "Lutris Wine usage info already runing!"
            zenity --error --title "Lutris Wine usage info" --text "Lutris Wine usage info already runing!" --no-wrap &>/dev/null
            exit 1
    fi
    echo -e "
        ${GREEN}Lutris Wine ${RED}v${LW_VERSION} ${GREEN}by $LW_DEVELOPERS
            ${RED}Usage:
            $RED┌──[$GREEN$USER$YELLOW@$BLUE`uname -a|awk '{print$2}'`$RED]─[$GREEN$PWD$RED]
            $RED└──╼ \$$GREEN lutris-wine $BLUE{lutris-wine argument} ${RED}blabla.exe $YELLOW{exe arguments}

            ${RED}-explorer $GREEN              Wine explorer
            ${RED}-cmd $GREEN                   Open CMD or open file in CMD
            ${RED}-shell $GREEN                 Open SHELL or open file in SHELL
            ${RED}-regedit $GREEN               Registry editor
            ${RED}-control $GREEN               Control panel
            ${RED}-winecfg $GREEN               Wine settings
            ${RED}-winemgr $GREEN               Wine manager
            ${RED}-setwine $GREEN               Set default Wine
            ${RED}-taskmgr $GREEN               Task manager
            ${RED}-themesmgr $GREEN             Themes manager
            ${RED}-uninstaller $GREEN           Add/remove programs
            ${RED}-winetricks $GREEN            Winetricks
            ${RED}-openpfx $GREEN               Open drive C:
            ${RED}-killwine $GREEN              Kill Wine processes
            ${RED}-killtray $GREEN              Kill Lutris Wine tray
            ${RED}-killexe $GREEN               Kill Lutris Wine launch EXE
            ${RED}-killshell $GREEN             Kill Lutris Wine SHELL
            ${RED}-exit $GREEN                  Lutris Wine force exit
            ${RED}-clearpfx $GREEN              Clear prefix
            ${RED}-rmapp $GREEN                 Remove Lutris Wine shortcuts from menu
            ${RED}-shortcut $GREEN              Create shortcut
            ${RED}-addtolu $GREEN               Add to Lutris
            ${RED}-debug $GREEN                 DEBUG
            ${RED}-help $GREEN                  Show this usage info
            ${RED}-version $GREEN               Show version info
            ${RED}-tray $BLUE{noclose}${GREEN}         Open Lutris Wine in tray
            ${RED}-update$BLUE {all} $GREEN          Update runtime$BLUE
            {dx|dxvk} {p7|p7zip} {vkd|vkd3d} {ub1804_8664|ubuntu1804-x86_64}
            {inn|innoextract} {net|network-tools} {d3d|d3d_extras|d3d-extras}
            {dxnv|dxvk-nvapi|dxvk_nvapi} {bat|battleye|battleye_runtime}
            {ga|gamectrlrdb|gamecontrollerdb} {dg|dgvoodoo2} {ub1804_686|ubuntu1804-i686}
        $RESETCOLOR" >&2
        zenity --info --title "Lutris Wine usage info" --text "┌──[$USER@`uname -a|awk '{print$2}'`]─[$PWD]\n└──╼ \$ lutris-wine {lutris-wine argument} blabla.exe {exe arguments} \n\n \
        -explorer                 Wine explorer\n \
        -cmd                          Open CMD or open file in CMD\n \
        -shell                         Open SHELL or open file in SHELL\n \
        -regedit                    Registry editor\n \
        -control                     Control panel\n \
        -winecfg                   Wine settings\n \
        -winemgr                 Wine manager\n \
        -setwine                   Set default Wine\n \
        -taskmgr                  Task manager\n \
        -themesmgr           Themes manager\n \
        -uninstaller              Add/remove programs\n \
        -winetricks               Winetricks\n \
        -openpfx                  Open drive C:\n \
        -killwine                    Kill Wine processes\n \
        -killtray                     Kill Lutris Wine tray\n \
        -killexe                      Kill Lutris Wine launch EXE\n \
        -killshell                    Kill Lutris Wine SHELL\n \
        -exit                           Lutris Wine Force Exit\n \
        -clearpfx                  Clear prefix\n \
        -rmapp                     Remove Lutris Wine shortcuts from menu\n \
        -shortcut                  Create shortcut\n \
        -addtolu                   Add to Lutris\n \
        -debug                      DEBUG\n \
        -help                          Show this usage info\n \
        -version                    Show version info\n \
        -tray {noclose}       Open Lutris Wine in tray\n \
        -update {all}            Update runtime\n \
        {dx|dxvk} {p7|p7zip} {vkd|vkd3d} {ub1804_8664|ubuntu1804-x86_64}\n \
        {inn|innoextract} {net|network-tools} {d3d|d3d_extras|d3d-extras}\n \
        {dxnv|dxvk-nvapi|dxvk_nvapi} {bat|battleye|battleye_runtime}\n \
        {ga|gamectrlrdb|gamecontrollerdb} {dg|dgvoodoo2} {ub1804_686|ubuntu1804-i686}\n \
        \nLutris Wine v${LW_VERSION} by $LW_DEVELOPERS \
        " --no-wrap &>/dev/null &
}

lu_version() {
    if [ -z "$(pgrep -fa zenity|grep "Version info"|awk '{print$1}')" ]; then :
        else
            print_error "Version info already runing!"
            zenity --error --title "Version info" --text "Version info already runing!" --no-wrap &>/dev/null
            exit 1
    fi
    echo -e "${GREEN}Lutris Wine ${RED}v${LW_VERSION} ${GREEN}by $LW_DEVELOPERS $RESETCOLOR"
    if [ ! -z "$version" ]
        then
            export WINE_VER="[ WINE ]       : $version\n"
            echo -en "$WINE_VER"
    fi
    if [ ! -z "$dxvk_version" ]
        then
            export DXVK_VER="[ DXVK ]       : $dxvk_version\n"
            echo -en "$DXVK_VER"
    fi
    if [ ! -z "$vkd3d_version" ]
        then
            export VKD3D_VER="[ VKD3D ]      : $vkd3d_version\n"
            echo -en "$VKD3D_VER"
    fi
    if [ ! -z "$dxvk_nvapi_version" ]
        then
            export DXVK_NVAPI_VER="[ DXVK-NVAPI ] : $dxvk_nvapi_version\n"
            echo -en "$DXVK_NVAPI_VER"
    fi
    if [ ! -z "$d3d_extras_version" ]
        then
            export D3DEXTRAS_VER="[ D3D EXTRAS ] : $d3d_extras_version\n"
            echo -en "$D3DEXTRAS_VER"
    fi
    if [ ! -z "$dgvoodoo2_version" ]
        then
            export DGVOODOO2_VER="[ DGVOODOO2 ]  : $dgvoodoo2_version\n"
            echo -en "$DGVOODOO2_VER"
    fi
    zenity --info --title "Version info" --text "Lutris Wine v${LW_VERSION} by $LW_DEVELOPERS\n\n${WINE_VER}${DXVK_VER}${VKD3D_VER}${DXVK_NVAPI_VER}${D3DEXTRAS_VER}${DGVOODOO2_VER}" --no-wrap &>/dev/null &
}

lu_tray() {
    check_tray
    if [[ -z "$TRAY_PID" && "$NO_TRAY" != 1 ]]
        then
            yad --notification --no-middle --text="Lutris Wine" \
                --window-icon="/usr/share/lutris-wine/icon/default_icon.png" \
                --image="/usr/share/lutris-wine/icon/default_icon.png" \
                --command="$BASH -c lutris-wine" \
                --tooltip="Lutris Wine" \
                --menu="| \
Explorer!$BASH -c 'lutris-wine -explorer'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Task manager!$BASH -c 'lutris-wine -taskmgr'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Open CMD!$BASH -c 'lutris-wine -cmd'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Open SHELL!$BASH -c 'lutris-wine -shell'!"/usr/share/lutris-wine/icon/default_icon.png"| \
DEBUG!$BASH -c 'lutris-wine -debug'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Add/remove programs!$BASH -c 'lutris-wine -uninstaller'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Control panel!$BASH -c 'lutris-wine -control'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Open drive C:\!$BASH -c 'lutris-wine -openpfx'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Registry editor!$BASH -c 'lutris-wine -regedit'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Wine settings!$BASH -c 'lutris-wine -winecfg'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Wine manager!$BASH -c 'lutris-wine -winemgr'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Update runtime!$BASH -c 'lutris-wine -update'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Set default Wine!$BASH -c 'lutris-wine -setwine'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Themes manager!$BASH -c 'lutris-wine -themesmgr'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Winetricks!$BASH -c 'lutris-wine -winetricks'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Create shortcut!$BASH -c 'lutris-wine -shortcut'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Add to Lutris!$BASH -c 'lutris-wine -addtolu'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Remove menu app!$BASH -c 'lutris-wine -rmapp'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Clear prefix!$BASH -c 'lutris-wine -clearpfx'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Usage info!$BASH -c 'lutris-wine -help'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Version info!$BASH -c 'lutris-wine -version'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Kill Wine processes!$BASH -c 'lutris-wine -killwine'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Kill launch EXE!$BASH -c 'lutris-wine -killexe'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Kill SHELL!$BASH -c 'lutris-wine -killshell'!"/usr/share/lutris-wine/icon/default_icon.png"| \
Kill tray!$BASH -c 'lutris-wine -killtray'!"/usr/share/lutris-wine/icon/default_icon.png"| \
FORCE EXIT!$BASH -c 'lutris-wine -exit'!"/usr/share/lutris-wine/icon/default_icon.png"|" &
            noclosetray &
    fi
}

lu_winemgr() {
    if [[ -z "$(pgrep -fa yad|grep "Wine Manager"|awk '{print$1}')" && -z "$(pgrep -fa zenity|grep "Wine Manager"|awk '{print$1}')" ]]; then :
        else
            print_error "Wine Manager already runing!"
            zenity --error --title "Wine Manager" --text "Wine Manager already runing!" --no-wrap &>/dev/null
            exit 1
    fi
    export WGUIDW=$RANDOM
    export ILW_LIST="$(ls -1 "$LU_WINE_DIR")"
    if [[ -z "$PGE_GIT_LIST" || -z  "$PPW_GIT_LIST" || -z  "$PK4_GIT_LIST" ]]
        then
            print_info "Сheck new WINE versions on GitHub..."
            export PLU_GIT="https://api.github.com/repos/lutris/wine/releases"
            export PGE_GIT="https://api.github.com/repos/GloriousEggroll/proton-ge-custom/releases"
            export PPW_GIT="https://api.github.com/repos/Castro-Fidel/wine_builds/releases"
            export PK4_GIT="https://api.github.com/repos/Kron4ek/Wine-Builds/releases"
            curl -s "$PLU_GIT"|grep "browser_download_url.*\.tar\.xz"|cut -d \" -f 4 1> "/tmp/PLUGITLIST$WGUIDW" &
            curl -s "$PGE_GIT"|grep "browser_download_url.*\.tar\.gz"|cut -d \" -f 4 1> "/tmp/PGEGITLIST$WGUIDW" &
            curl -s "$PPW_GIT"|grep "browser_download_url.*\.tar\.xz"|cut -d \" -f 4 1> "/tmp/PPWGITLIST$WGUIDW" &
            curl -s "$PK4_GIT"|grep "browser_download_url.*\.tar\.xz"|cut -d \" -f 4 1> "/tmp/PK4GITLIST$WGUIDW" &
            while true
                do
                    sleep 0.2
                    export GITLISTOK=0
                    for curlgit in $PLU_GIT $PGE_GIT $PPW_GIT $PK4_GIT
                            do
                                sleep 0.2
                                if [ -z "$(pgrep -fa curl|grep -o "$curlgit")" ]
                                    then
                                        GITLISTOK=$(($GITLISTOK + 1))
                                fi
                                if [ "$GITLISTOK" == 4 ]; then break; fi
                        done
                    if [ "$GITLISTOK" == 4 ]; then break; fi
            done|settingbar
            export PLU_GIT_LIST="$(cat /tmp/PLUGITLIST$WGUIDW 2>/dev/null ; try_rm /tmp/PLUGITLIST$WGUIDW)"
            export PGE_GIT_LIST="$(cat /tmp/PGEGITLIST$WGUIDW 2>/dev/null ; try_rm /tmp/PGEGITLIST$WGUIDW)"
            export PPW_GIT_LIST="$(cat /tmp/PPWGITLIST$WGUIDW 2>/dev/null ; try_rm /tmp/PPWGITLIST$WGUIDW)"
            export PK4_GIT_LIST="$(cat /tmp/PK4GITLIST$WGUIDW 2>/dev/null ; try_rm /tmp/PK4GITLIST$WGUIDW)"
    fi
    if [[ ! -z "$PLU_GIT_LIST" || ! -z "$PGE_GIT_LIST" || ! -z  "$PPW_GIT_LIST" || ! -z  "$PK4_GIT_LIST" ]]
        then
            export GITOK="1"
            print_info "Сhecking new WINE versions on GitHub complete!"
        else
            unset GITOK
            print_error "Can't get list of WINE URLs from GitHub!"
            zenity --error --title "Wine Manager" --text "Can't get list of WINE URLs from GitHub!" --no-wrap &>/dev/null
    fi
    if [[ ! -z "$ILW_LIST" && ! -z "$GITOK" ]]
        then
            export PLU_LIST="$(echo -e "$(for PLUGIT in $PLU_GIT_LIST ; do echo $PLUGIT|awk -F/ '{print $NF}'|sed 's/.tar.xz//' ; done)" "\n$ILW_LIST"|sort|uniq -u|grep -v "$ILW_LIST")"
            export PGE_LIST="$(echo -e "$(for PGEGIT in $PGE_GIT_LIST ; do echo $PGEGIT|awk -F/ '{print $NF}'|sed 's/.tar.gz//' ; done|sed '/Proton-6.5-GE-2/,$d'|sed '/github-action/d')" "\n$ILW_LIST"|sort|uniq -u|grep -v "$ILW_LIST")"
            export PPW_LIST="$(echo -e "$(for PPWGIT in $PPW_GIT_LIST ; do echo $PPWGIT|awk -F/ '{print $NF}'|sed 's/.tar.xz//' ; done|sed '/plugins/d')" "\n$ILW_LIST"|sort|uniq -u|grep -v "$ILW_LIST")"
            export PK4_LIST="$(echo -e "$(for PK4GIT in $PK4_GIT_LIST ; do echo $PK4GIT|awk -F/ '{print $NF}'|sed 's/.tar.xz//' ; done|sed '/-x86/d')" "\n$ILW_LIST"|sort|uniq -u|grep -v "$ILW_LIST")"
            echo -e "\n$(echo "$PLU_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=1 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PLUSET$WGUIDW" &
            echo -e "\n$(echo "$PGE_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=2 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PGESET$WGUIDW" &
            echo -e "\n$(echo "$PPW_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=3 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PPWSET$WGUIDW" &
            echo -e "\n$(echo "$PK4_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=4 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PK4SET$WGUIDW" &
            echo -e "\n$(echo "$ILW_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=5 --list --column="" --checklist --separator=" " --column "Select installed WINE for delete:" 1> "/tmp/WDEL_SET$WGUIDW" &
            yad --key=$WGUIDW --notebook --width=500 --height=600 --text-align=center --center \
                --window-icon="/usr/share/lutris-wine/icon/default_icon.png" --title "Wine Manager" --separator="" \
                --tab-pos=top --tab="Lutris" --tab="GloriousEggroll" --tab="PortWine" --tab="Kron4ek" --tab="DELETE" --button="SET DEFAULT WINE:2"  --button="EXIT:1" --button="OK:0"
            if [ "$?" == "2" ]
                then
                    try_rm /tmp/*$WGUIDW
                    export SETDEFWINE="1"
                    check_def_wine
                else
                    export PLU_SET="$(sed 's/TRUE //g' /tmp/PLUSET$WGUIDW 2>/dev/null ; try_rm /tmp/PLUSET$WGUIDW)"
                    export PGE_SET="$(sed 's/TRUE //g' /tmp/PGESET$WGUIDW 2>/dev/null ; try_rm /tmp/PGESET$WGUIDW)"
                    export PPW_SET="$(sed 's/TRUE //g' /tmp/PPWSET$WGUIDW 2>/dev/null ; try_rm /tmp/PPWSET$WGUIDW)"
                    export PK4_SET="$(sed 's/TRUE //g' /tmp/PK4SET$WGUIDW 2>/dev/null ; try_rm /tmp/PK4SET$WGUIDW)"
                    export WDEL_SET="$(sed 's/TRUE //g' /tmp/WDEL_SET$WGUIDW 2>/dev/null ; try_rm /tmp/WDEL_SET$WGUIDW)"
            fi
    elif [[ ! -z "$ILW_LIST" && -z "$GITOK" ]]
        then
            if [[ "$(echo "$ILW_LIST"|sed 's/^ *//g'|wc -l)" == 1 && "$ILW_LIST" == "$WINE_IN_USE" ]]
                then
                    print_error "Lutris has one WINE installed and it selected by default! Can't run Wine Manager!"
                    zenity --error --title "Wine Manager" --text "Lutris has one WINE installed and it selected by default!\nCan't run Wine Manager!" --no-wrap &>/dev/null
                    exit 1
                else
                    echo -e "\n$(echo "$ILW_LIST"|grep -v "$WINE_IN_USE"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=1 --list --column="" --checklist --separator=" " --column "Select installed WINE for delete:" 1> "/tmp/WDEL_SET$WGUIDW" &
            fi
            yad --key=$WGUIDW --notebook --width=500 --height=600 --text-align=center --center \
                --window-icon="/usr/share/lutris-wine/icon/default_icon.png" --title "Wine Manager" --separator="" \
                --tab-pos=top --tab="DELETE" --button="SET DEFAULT WINE:2"  --button="EXIT:1" --button="OK:0"
            if [ "$?" == "2" ]
                then
                    try_rm /tmp/*$WGUIDW
                    export SETDEFWINE="1"
                    check_def_wine
                else
                    export WDEL_SET="$(sed 's/TRUE //g' /tmp/WDEL_SET$WGUIDW 2>/dev/null ; try_rm /tmp/WDEL_SET$WGUIDW)"
            fi
    elif [[ -z "$ILW_LIST" && ! -z "$GITOK" ]]
        then
            export PLU_LIST="$(for PLUGIT in $PLU_GIT_LIST ; do echo $PLUGIT|awk -F/ '{print $NF}'|sed 's/.tar.xz//' ; done)"
            export PGE_LIST="$(for PGEGIT in $PGE_GIT_LIST ; do echo $PGEGIT|awk -F/ '{print $NF}'|sed 's/.tar.gz//' ; done|sed '/Proton-6.5-GE-2/,$d'|sed '/github-action/d')"
            export PPW_LIST="$(for PPWGIT in $PPW_GIT_LIST ; do echo $PPWGIT|awk -F/ '{print $NF}'|sed 's/.tar.xz//' ; done|sed '/plugins/d')"
            export PK4_LIST="$(for PK4GIT in $PK4_GIT_LIST ; do echo $PK4GIT|awk -F/ '{print $NF}'|sed 's/.tar.xz//' ; done|sed '/-x86/d')"
            echo -e "\n$(echo "$PLU_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=1 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PLUSET$WGUIDW" &
            echo -e "\n$(echo "$PGE_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=2 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PGESET$WGUIDW" &
            echo -e "\n$(echo "$PPW_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=3 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PPWSET$WGUIDW" &
            echo -e "\n$(echo "$PK4_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=4 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PK4SET$WGUIDW" &
            yad --key=$WGUIDW --notebook --width=500 --height=600 --text-align=center --center \
                --window-icon="/usr/share/lutris-wine/icon/default_icon.png" --title "Wine Manager" --separator="" \
                --tab-pos=top --tab="Lutris" --tab="GloriousEggroll" --tab="PortWine" --tab="Kron4ek"
            export PLU_SET="$(sed 's/TRUE //g' /tmp/PLUSET$WGUIDW 2>/dev/null ; try_rm /tmp/PLUSET$WGUIDW)"
            export PGE_SET="$(sed 's/TRUE //g' /tmp/PGESET$WGUIDW 2>/dev/null ; try_rm /tmp/PGESET$WGUIDW)"
            export PPW_SET="$(sed 's/TRUE //g' /tmp/PPWSET$WGUIDW 2>/dev/null ; try_rm /tmp/PPWSET$WGUIDW)"
            export PK4_SET="$(sed 's/TRUE //g' /tmp/PK4SET$WGUIDW 2>/dev/null ; try_rm /tmp/PK4SET$WGUIDW)"
    elif [[ -z "$ILW_LIST" && -z "$GITOK" ]]
        then
            print_error "Can't run Wine Manager!"
            zenity --error --title "Wine Manager" --text "Can't run Wine Manager!" --no-wrap &>/dev/null
            exit 1
    fi
    if [ ! -z "$(echo "$PLU_SET"|head -1)" ]
        then
            for PLU_DW in $PLU_SET
                do
                    unset PLU_DW_URL
                    export PLU_DW_URL="$(echo "$PLU_GIT_LIST"|grep $PLU_DW)"
                    if [ ! -z "$PLU_DW_URL" ]
                        then
                            print_info "Download and install $PLU_DW"
                            if try_download "$PLU_DW_URL" "$LU_WINE_DIR/"
                                then
                                    for archive_type in "gz" "xz"
                                        do
                                            if [ -f "$LU_WINE_DIR/${PLU_DW}.tar.${archive_type}" ]
                                                then
                                                    if unpack_tar_${archive_type} "$LU_WINE_DIR/${PLU_DW}.tar.${archive_type}" "$LU_WINE_DIR/"
                                                        then
                                                            export PLU_INST="1"
                                                            try_rm "$LU_WINE_DIR/${PLU_DW}.tar.${archive_type}"
                                                            print_info "Installing $PLU_DW complete!"
                                                        else
                                                            try_rm "$LU_WINE_DIR/${PLU_DW}.tar.${archive_type}"
                                                            try_rm "$LU_WINE_DIR/${PLU_DW}"
                                                            download_error && lu_winemgr
                                                    fi
                                            fi
                                    done
                                else
                                    try_rm "$LU_WINE_DIR/${PLU_DW}.tar.${archive_type}"
                                    download_error && lu_winemgr
                            fi
                    fi
            done
    fi
    if [ ! -z "$(echo "$PGE_SET"|head -1)" ]
        then
            for PGE_DW in $PGE_SET
                do
                    unset PGE_DW_URL
                    export PGE_DW_URL="$(echo "$PGE_GIT_LIST"|grep $PGE_DW)"
                    if [ ! -z "$PGE_DW_URL" ]
                        then
                            print_info "Download and install $PGE_DW..."
                            if try_download "$PGE_DW_URL" "$LU_WINE_DIR/"
                                then
                                    for archive_type in "gz" "xz"
                                        do
                                            if [ -f "$LU_WINE_DIR/${PGE_DW}.tar.${archive_type}" ]
                                                then
                                                    if unpack_tar_${archive_type} "$LU_WINE_DIR/${PGE_DW}.tar.${archive_type}" "$LU_WINE_DIR/"
                                                        then
                                                            export PGE_INST="1"
                                                            try_rm "$LU_WINE_DIR/${PGE_DW}.tar.${archive_type}"
                                                            if [ -d "$LU_WINE_DIR/$PGE_DW/files" ]
                                                                then
                                                                    for clearpge in $(ls -I "version" -I "files" "$LU_WINE_DIR/$PGE_DW")
                                                                        do
                                                                            try_rm "$LU_WINE_DIR/$PGE_DW/$clearpge"
                                                                    done
                                                                    try_mv "$LU_WINE_DIR/$PGE_DW/files/"* "$LU_WINE_DIR/$PGE_DW/"
                                                                    try_rm "$LU_WINE_DIR/$PGE_DW/files"
                                                                    print_info "Installing $PGE_DW complete!"
                                                            fi
                                                        else
                                                            try_rm "$LU_WINE_DIR/${PGE_DW}.tar.${archive_type}"
                                                            try_rm "$LU_WINE_DIR/${PGE_DW}"
                                                            download_error && lu_winemgr
                                                    fi
                                            fi
                                    done
                                else
                                    try_rm "$LU_WINE_DIR/${PGE_DW}.tar.${archive_type}"
                                    download_error && lu_winemgr
                            fi
                    fi
            done
    fi
    if [ ! -z "$(echo "$PPW_SET"|head -1)" ]
        then
            for PPW_DW in $PPW_SET
                do
                    unset PPW_DW_URL
                    export PPW_DW_URL="$(echo "$PPW_GIT_LIST"|grep $PPW_DW)"
                    if [ ! -z "$PPW_DW_URL" ]
                        then
                            print_info "Download and install $PPW_DW..."
                            if try_download "$PPW_DW_URL" "$LU_WINE_DIR/"
                                then
                                    for archive_type in "gz" "xz"
                                        do
                                            if [ -f "$LU_WINE_DIR/${PPW_DW}.tar.${archive_type}" ]
                                                then
                                                    if unpack_tar_${archive_type} "$LU_WINE_DIR/${PPW_DW}.tar.${archive_type}" "$LU_WINE_DIR/"
                                                        then
                                                            export PPW_INST="1"
                                                            try_rm "$LU_WINE_DIR/${PPW_DW}.tar.${archive_type}"
                                                            print_info "Installing $PPW_DW complete!"
                                                        else
                                                            try_rm "$LU_WINE_DIR/${PPW_DW}.tar.${archive_type}"
                                                            try_rm "$LU_WINE_DIR/${PPW_DW}"
                                                            download_error && lu_winemgr
                                                    fi
                                            fi
                                    done
                                else
                                    try_rm "$LU_WINE_DIR/${PPW_DW}.tar.${archive_type}"
                                    download_error && lu_winemgr
                            fi
                    fi
            done
    fi
    if [ ! -z "$(echo "$PK4_SET"|head -1)" ]
        then
            for PK4_DW in $PK4_SET
                do
                    unset PK4_DW_URL
                    export PK4_DW_URL="$(echo "$PK4_GIT_LIST"|grep $PK4_DW)"
                    if [ ! -z "$PK4_DW_URL" ]
                        then
                            print_info "Download and install $PK4_DW..."
                            if try_download "$PK4_DW_URL" "$LU_WINE_DIR/"
                                then
                                    for archive_type in "gz" "xz"
                                        do
                                            if [ -f "$LU_WINE_DIR/${PK4_DW}.tar.${archive_type}" ]
                                                then
                                                    if unpack_tar_${archive_type} "$LU_WINE_DIR/${PK4_DW}.tar.${archive_type}" "$LU_WINE_DIR/"
                                                        then
                                                            export PK4_INST="1"
                                                            try_rm "$LU_WINE_DIR/${PK4_DW}.tar.${archive_type}"
                                                            print_info "Installing $PK4_DW complete!"
                                                        else
                                                            try_rm "$LU_WINE_DIR/${PK4_DW}.tar.${archive_type}"
                                                            try_rm "$LU_WINE_DIR/${PK4_DW}"
                                                            download_error && lu_winemgr
                                                    fi
                                            fi
                                    done
                                else
                                    try_rm "$LU_WINE_DIR/${PK4_DW}.tar.${archive_type}"
                                    download_error && lu_winemgr
                            fi
                    fi
            done
    fi
    if [ ! -z "$(echo "$WDEL_SET"|head -1)" ]
        then
            unset WINEINUSEDEL
            while read winedel
                do
                    print_info "Remove $winedel..."
                    try_rm "$LU_WINE_DIR/$winedel"
                    print_info "Removing $winedel complete!"
                    if [ "$WINE_IN_USE" == "$winedel" ]
                        then
                            export WINEINUSEDEL="1"
                    fi
            done <<< $WDEL_SET
            check_lupid
            if [[ ! -z "$WINEINUSEDEL" && ! -z "$LU_PID" ]]
                then
                    if [ ! -z "$(ls -1 "$LU_WINE_DIR"|head -1)" ]
                        then
                            print_info "Removed WINE which was selected by default!"
                            zenity --info --title "Wine removing completed!" --text "Removed WINE which was selected by default!" --no-wrap &>/dev/null
                            check_def_wine
                            print_info "You need to restart LUTRIS!"
                            zenity --question --title "Wine removing completed!" --text "You need to restart LUTRIS! Press YES to restart" --no-wrap &>/dev/null
                            if [ $? -eq "0" ]
                                then
                                    kill -9 $LU_PID
                                    lutris &
                                    exit 0
                            fi
                        else
                            print_info "Removed WINE which was selected by default! WINE is not installed in Lutris, you must download WINE!"
                            zenity --info --title "Wine removing completed!" --text "Removed WINE which was selected by default!\nWINE is not installed in Lutris, you must download WINE!" --no-wrap &>/dev/null
                            unset WINEINUSEDEL WDEL_SET
                            lu_winemgr
                    fi
            elif [ ! -z "$WINEINUSEDEL" ]
                then
                    if [ ! -z "$(ls -1 "$LU_WINE_DIR"|head -1)" ]
                        then
                            print_info "Removed WINE which was selected by default!"
                            zenity --info --title "Wine removing completed!" --text "Removed WINE which was selected by default!" --no-wrap &>/dev/null
                            check_def_wine
                        else
                            print_info "Removed WINE which was selected by default! WINE is not installed in Lutris, you must download WINE!"
                            zenity --info --title "Wine removing completed!" --text "Removed WINE which was selected by default!\nWINE is not installed in Lutris, you must download WINE!" --no-wrap &>/dev/null
                            unset WINEINUSEDEL WDEL_SET
                            lu_winemgr
                    fi
            elif [ ! -z "$LU_PID" ]
                then
                    zenity --question --title "Wine removing completed!" --text "You need to restart LUTRIS! Press YES to restart" --no-wrap &>/dev/null
                    if [ $? -eq "0" ]
                        then
                            kill -9 $LU_PID
                            lutris &
                            exit 0
                    fi
            else
                zenity --info --title "Wine remove" --text "Wine removing completed!" --no-wrap &>/dev/null
            fi
    fi
    if [[ "$PLU_INST" == 1 || "$PGE_INST" == 1 || "$PPW_INST" == 1 || "$PK4_INST" == 1 ]]
        then
            check_lupid
            if [ ! -z "$LU_PID" ]
                then
                    print_info "You need to restart LUTRIS and select a new WINE in the settings!"
                    zenity --question --title "Wine installation completed!" --text "You need to restart LUTRIS and select a new WINE in the settings!\nPress YES to restart LUTRIS" --no-wrap &>/dev/null
                    if [ $? -eq "0" ]
                        then
                            kill -9 $LU_PID
                            lutris &
                            exit 0
                    fi
                else
                    if [ -z "$WINEINUSEDEL" ]
                        then
                            check_def_wine
                            unset WDEL_SET
                    fi
                    unset PLU_INST PK4_INST PPW_INST PGE_INST
                    zenity --info --title "Wine Manager" --text "Wine installation completed!" --no-wrap &>/dev/null
            fi
    fi
}

lu_themesmgr() {
    if [ ! -z "$(pgrep -fa zenity|grep "Themes Manager"|awk '{print$1}')" ]
        then
            print_error "Themes Manager already runing!"
            zenity --error --title "Themes Manager" --text "Themes Manager already runing!" --no-wrap &>/dev/null
            exit 1
    fi
    if [[ -d "$THEMES_DIR" && ! -z "$(ls -1 "$THEMES_DIR"|head -1)" ]]
        then
            export WINE_THEME="$(echo -e "\n$(echo "$(ls "$THEMES_DIR")"|sed 's/.reg//g'|sed ':a;N;$!ba;s/\n/\n\n/g')"| \
            zenity --title "Themes Manager" --text "Select theme for WINE:" --list --radiolist --separator "\n" --column=1 --column=2 --hide-header --width=300 --height=300  2>/dev/null)"
            if [ ! -z "$WINE_THEME" ]
                then
                    print_info "Change the WINE theme to $WINE_THEME..."
                    $WINE regedit "$THEMES_DIR/$WINE_THEME.reg" 2>&1 |settingbar
                    print_info "Wine theme changed successfully!"
                    zenity --info --title "Themes Manager" --text "Wine theme changed successfully!" --no-wrap &>/dev/null
            fi
        else
            print_error "Wine theme not found!"
            zenity --error --title "Themes Manager" --text "Wine theme not found!" --no-wrap &>/dev/null
    fi
}

us_layout_sw() {
    if [[ ! -z "$use_us_layout" && "$use_us_layout" == true ]]
        then
            if [ ! -z "$(which xkb-switch 2>/dev/null)" ]
                then
                    xkb-switch -s us 2>/dev/null
                else
                    print_error "xkb-switch not found!"
            fi
    fi
}

check_mangohud() {
    if [[ ! -z "$mangohud" || "$USE_MANGOHUD" == 1 ]]
        then
            if [ ! -z "$(which mangohud 2>/dev/null)" ]
                then
                    if [ "$mangohud" == "vk64" ]
                        then
                            export RUN_MANGOHUD="mangohud"
                        else
                            export RUN_MANGOHUD="mangohud --dlsym"
                    fi
                    if [ -z "$MANGOHUD_CONFIG" ]
                        then
export MANGOHUD_CONFIG="no_display,fps_limit=75,toggle_fps_limit=F1,gpu_stats,gpu_temp,gpu_core_clock,gpu_mem_clock,gpu_power,gpu_load_change,gpu_text=GPU,\
cpu_stats,cpu_temp,cpu_load_change,core_load_change,cpu_color=2e97cb,cpu_text=CPU,io_color=a491d3,vram,vram_color=ad64c1,ram,ram_color=c26693,fps,\
engine_version,engine_color=eb5b5b,gpu_name,gpu_color=2e9762,vulkan_driver,wine,wine_color=eb5b5b,frame_timing=1,frametime_color=00ff00,show_fps_limit,\
resolution,vkbasalt,gamemode,background_alpha=0.4,font_size=24,background_color=020202,position=top-left,text_color=ffffff,toggle_hud=Shift_R+F12"
                    fi
                    if [[ "$MANGOHUD_USER_CONF" == 1 ]]
                        then
                            unset MANGOHUD_CONFIG
                    fi
                else
                    print_error "MANGOHUD not found in your system!"
                    export DISABLE_MANGOHUD=1
            fi
        else
            print_info "MANGOHUD disabled!"
            export DISABLE_MANGOHUD=1
    fi
}

check_gamemode() {
    if [[ "$gamemode" == true || "$USE_GAMEMODE" == 1 ]]
        then
            if [ ! -z "$(which gamemoderun 2>/dev/null)" ]
                then
                    export RUN_GAMEMODE="gamemoderun"
                else
                    print_error "GAMEMODE not found in your system!"
                    export RUN_GAMEMODE=""
            fi
        else
            print_info "GAMEMODE disabled!"
            export RUN_GAMEMODE=""
    fi
}

check_gstreamer() {
    if [ "$USE_GSTREAMER" == 1 ]
        then
            if [ -d "$WINEDIR/lib64/gstreamer-1.0" ]
                then
                    export GST_PLUGIN_SYSTEM_PATH_1_0="$WINEDIR/lib64/gstreamer-1.0/:$WINEDIR/lib/gstreamer-1.0/"
                    try_mkdir "$HOME/.cache/gstreamer-1.0"
                    export WINE_GST_REGISTRY_DIR="$HOME/.cache/gstreamer-1.0"
                    export MEDIACONV_AUDIO_DUMP_FILE=$WINE_GST_REGISTRY_DIR/audio.foz
                    export MEDIACONV_AUDIO_TRANSCODED_FILE=$WINE_GST_REGISTRY_DIR/transcoded_audio.foz
                    export MEDIACONV_VIDEO_DUMP_FILE=$WINE_GST_REGISTRY_DIR/video.foz
                    export MEDIACONV_VIDEO_TRANSCODED_FILE=$WINE_GST_REGISTRY_DIR/transcoded_video.foz
                else
                    print_error "WINE GSTREAMER not found!"
                    wdllover_upd "winegstreamer="
            fi
    fi
}

check_dxvk() {
    if [[ ! -z "$dxvk" && "$dxvk" == true ]]
        then
            if [ ! -z "$DXVK_GIT_RELEASE_URL" ]
                then
                    GIT_RELEASE_URL="$DXVK_GIT_RELEASE_URL"
                else
                    GIT_RELEASE_URL="https://github.com/lutris/dxvk/releases"
            fi
            if [[ -f "$LU_RUNTIME/dxvk/$dxvk_version/x64/d3d12.dll" || -f "$LU_RUNTIME/dxvk/$dxvk_version/x32/d3d12.dll" ]]
                then
                    try_rm "$LU_RUNTIME/dxvk/$dxvk_version/x64/d3d12.dll" "$LU_RUNTIME/dxvk/$dxvk_version/x32/d3d12.dll"
            fi
            if dll_manager "dxvk" "$dxvk_version"
                then
                    wdllover_upd "$(echo $check_dlls_slk|sed 's/.dll//g'|tr ' ' ',')=n"
                    try_mkdir "$HOME/.cache/dxvk_cache"
                    export DXVK_STATE_CACHE_PATH=$HOME/.cache/dxvk_cache
                    export DXVK_STATE_CACHE=1
                    export __GL_DXVK_OPTIMIZATIONS=1
                    unset GIT_RELEASE_URL
            fi
    fi
}

check_vkd3d() {
    if [[ ! -z "$vkd3d" && "$vkd3d" == true ]]
        then
            if [ ! -z "$VKD3D_GIT_RELEASE_URL" ]
                then
                    GIT_RELEASE_URL="$VKD3D_GIT_RELEASE_URL"
                else
                    GIT_RELEASE_URL="https://github.com/lutris/vkd3d/releases"
            fi
            if dll_manager "vkd3d" "$vkd3d_version"
                then
                    wdllover_upd "$(echo $check_dlls_slk|sed 's/.dll//g'|tr ' ' ',')=n"
                    unset GIT_RELEASE_URL

            fi
    fi
}

check_dxvk-nvapi() {
    if [[ ! -z "$dxvk_nvapi" && "$dxvk_nvapi" == true && ! -z "$(lspci|grep VGA|grep -o NVIDIA)" ]]
        then
            if [ ! -z "$NVAPI_GIT_RELEASE_URL" ]
                then
                    GIT_RELEASE_URL="$NVAPI_GIT_RELEASE_URL"
                else
                    GIT_RELEASE_URL="https://github.com/lutris/dxvk-nvapi/releases"
            fi
            if dll_manager "dxvk-nvapi" "$dxvk_nvapi_version"
                then
                    if [[ ! -f "$PFX_DLL64_PTH/nvngx.dll" || ! -f "$PFX_DLL64_PTH/_nvngx.dll" ]]
                        then
                            CPNVNGX="$(find /usr/* -type f -name "*nvngx.dll" 2>/dev/null|awk '{print $1}')"
                            if [ ! -z "$CPNVNGX" ]
                                then
                                    for CPNVNGXFLS in $CPNVNGX
                                        do
                                            try_cp "$CPNVNGXFLS" "$PFX_DLL64_PTH/"
                                    done
                                else
                                    print_error "nvngx.dll not found in your system!"
                            fi
                    fi
                    wdllover_upd "$(echo $check_dlls_slk|sed 's/.dll//g'|tr ' ' ',')=n;nvcuda=b"
                    export DXVK_NVAPIHACK="0"
            fi
        else
            wdllover_upd "nvapi,nvapi64,nvml,nvcuda="
    fi
}

check_d3d_extras() {
    if [[ ! -z "$d3d_extras" && "$d3d_extras" == true ]]
        then
            if [ ! -z "$D3D_GIT_RELEASE_URL" ]
                then
                    GIT_RELEASE_URL="$D3D_GIT_RELEASE_URL"
                else
                    GIT_RELEASE_URL="https://github.com/lutris/d3d_extras/releases"
            fi
            if dll_manager "d3d_extras" "$d3d_extras_version"
                then
                    wdllover_upd "$(echo $check_dlls_slk|sed 's/.dll//g'|tr ' ' ',')=n"
            fi
    fi
}

check_dgvoodoo2() {
    if [[ ! -z "$dgvoodoo2" && "$dgvoodoo2" == true ]]
        then
            if [ ! -z "$DGVO_GIT_RELEASE_URL" ]
                then
                    GIT_RELEASE_URL="$DGVO_GIT_RELEASE_URL"
                else
                    GIT_RELEASE_URL="https://github.com/lutris/dgvoodoo2/releases"
            fi
            if dll_manager "dgvoodoo2" "$dgvoodoo2_version"
                then
                    wdllover_upd "$(echo $check_dlls_slk|sed 's/.dll//g'|tr ' ' ',')=n"
            fi
    fi
}

check_battleye() {
    if [[ ! -z "$battleye" && "$battleye" == true ]]
        then
            if runtime_manager "battleye"
                then
                    export PROTON_BATTLEYE_RUNTIME="$LU_RUNTIME/battleye_runtime"
                else
                    unset PROTON_BATTLEYE_RUNTIME
            fi
    fi
}

runtime_manager() {
    if [ "$1" == "winetricks" ]
        then
            GIT_RELEASE_URL="https://github.com/lutris/winetricks/releases"
        else
            GIT_RELEASE_URL="https://github.com/lutris/buildbot/releases"
    fi
    if [ -z "$(find "$LU_RUNTIME/" -type d -name "$1"* -print 2>/dev/null)" ]
        then
            FORCE_UPDATE=1
    fi
    if [[ ! -z "$CHK_UPDATE" && -z "$(find "$LU_RUNTIME/" -type d -name "$1"* -mtime -$CHK_UPDATE -print 2>/dev/null)" ]] || [ ! -z "$FORCE_UPDATE" ]
        then
            try_rm "$(find "$LU_RUNTIME/" -type d -name "$1"* -print 2>/dev/null)" &>/dev/null
            print_info "Checking updates for $1 runtime..."
            if check_git_release "$1"
                then
                    print_info "Download and install $1 runtime..."
                    if try_download "$GIT_RELEASE" "$LU_RUNTIME/"
                        then
                            for archive_type in "gz" "xz" "zst"
                                do
                                    dll_archive="$(ls "$LU_RUNTIME"/"$1"*.tar.${archive_type} 2>/dev/null)"
                                    if [ -f "$dll_archive" ]
                                        then
                                            if unpack_tar_${archive_type} "$dll_archive" "$LU_RUNTIME/"
                                                then
                                                    try_rm "$dll_archive"*
                                                    touch "$(find "$LU_RUNTIME/" -type d -name "$1"* -print 2>/dev/null)"
                                                    unset FORCE_UPDATE
                                                    check_$1 2>/dev/null
                                                else
                                                    try_rm "$dll_archive"*
                                                    try_rm "$(find "$LU_RUNTIME/" -type d -name "$1"* -print 2>/dev/null)"
                                                    download_error && check_$1 2>/dev/null
                                            fi
                                    fi
                            done
                        else
                            download_error && check_$1 2>/dev/null
                    fi
                else
                    print_error "$1 not installed!"
                    unset FORCE_UPDATE
                    return 1
            fi
    fi
}

check_wine_inst() {
    if [ ! -f "$WINE" ]
        then
            print_error "WINE is not installed in Lutris, you must download WINE!"
            zenity --info --title "Wine check" --text "WINE is not installed in Lutris, you must download WINE!" --no-wrap &>/dev/null
            lu_winemgr
    fi
}

check_winearch() {
    if [ -z "$WINEARCH" ]
        then
            export WINEARCH="win64"
    fi
}

check_winepfx() {
    if [ -z "$WINEPREFIX" ]
        then
            export WINEPREFIX="$HOME/.wine"
            export WTRX_LOG="$WINEPREFIX/winetricks.log"
            export PFX_DLL32_PTH=""$WINEPREFIX"/drive_c/windows/syswow64"
            export PFX_DLL64_PTH=""$WINEPREFIX"/drive_c/windows/system32"
        else
            export WTRX_LOG="$WINEPREFIX/winetricks.log"
            export PFX_DLL32_PTH=""$WINEPREFIX"/drive_c/windows/syswow64"
            export PFX_DLL64_PTH=""$WINEPREFIX"/drive_c/windows/system32"
    fi
    try_mkdir "$WINEPREFIX"
    try_mkdir "$PFX_DLL32_PTH"
    try_mkdir "$PFX_DLL64_PTH"
}

check_wdllover() {
    luwine_wdllover="$(echo -n "$(sed -n  '/\(^  overrides\)/,$p' "$LU_WINE_CONF"|grep "    "|sed 's/^ *//g'|tr ':' '='|sed 's/ //g'|sed "s/''//g")"|tr "\n" ";")"
    if [ ! -z "$luwine_wdllover" ]
        then
            wdllover_upd "$luwine_wdllover"
        else
            wdllover_upd "lsteamclient,winemenubuilder,REDEngineErrorReporter.exe=;steam_api,steam_api64,steamclient,steamclient64=n"
    fi
}

check_vulkan_icd() {
    if [ -z "$VK_ICD_FILENAMES" ]
        then
            export VK_ICD_FILENAMES="$vk_icd"
    fi
}

check_sdl_video() {
    if [ -z "$SDL_VIDEO_FULLSCREEN_DISPLAY" ]
        then
            export SDL_VIDEO_FULLSCREEN_DISPLAY="$sdl_video_fullscreen"
    fi
}

check_prime() {
    if [[ ! -z "$prime" && "$prime" == true ]]
        then
            export __GLX_VENDOR_LIBRARY_NAME="nvidia"
            export __NV_PRIME_RENDER_OFFLOAD="1"
        else
            unset __GLX_VENDOR_LIBRARY_NAME __NV_PRIME_RENDER_OFFLOAD
    fi
}

check_esync() {
    if [[ ! -z "$esync" && "$esync" == true ]]
        then
            export WINEESYNC="1"
        else
            unset WINEESYNC
    fi
}

check_fsync() {
    if [[ ! -z "$fsync" && "$fsync" == true ]]
        then
            export WINEFSYNC="1"
            export WINEFSYNC_FUTEX2="1"
        else
            unset WINEFSYNC WINEFSYNC_FUTEX2
    fi
}

check_fsr() {
    if [[ ! -z "$fsr" && "$fsr" == true ]]
        then
            export WINE_FULLSCREEN_FSR="1"
            export WINE_FULLSCREEN_FSR_STRENGTH="1"
        else
            unset WINE_FULLSCREEN_FSR WINE_FULLSCREEN_FSR_STRENGTH
    fi
}

check_runtime() {
    if [[ ! -z "$disable_runtime" && "$disable_runtime" == true ]]
        then
            export LD_LIBRARY_PATH="$LD_LIBRARY_PATH"
        else
            if [[ ! -z "$prefer_libs" && "$prefer_libs" == true ]]
                then
                    export LD_LIBRARY_PATH="$WINEDIR/lib:$WINEDIR/lib64:/usr/lib:/usr/lib32:/opt/cuda/lib64:/usr/lib/openmpi:/opt/cuda/extras/CUPTI/lib64:/opt/cuda/nvvm/lib64:/usr/lib/libfakeroot:/usr/lib64:$LU_RUNTIME/Ubuntu-18.04-i686:$LU_RUNTIME/steam/i386/lib/i386-linux-gnu:$LU_RUNTIME/steam/i386/lib:$LU_RUNTIME/steam/i386/usr/lib/i386-linux-gnu:$LU_RUNTIME/steam/i386/usr/lib:$LU_RUNTIME/Ubuntu-18.04-x86_64:$LU_RUNTIME/steam/amd64/lib/x86_64-linux-gnu:$LU_RUNTIME/steam/amd64/lib:$LU_RUNTIME/steam/amd64/usr/lib/x86_64-linux-gnu:$LU_RUNTIME/steam/amd64/usr/lib::$LD_LIBRARY_PATH"
                else
                    export LD_LIBRARY_PATH="$LU_RUNTIME/Ubuntu-18.04-i686:$LU_RUNTIME/steam/i386/lib/i386-linux-gnu:$LU_RUNTIME/steam/i386/lib:$LU_RUNTIME/steam/i386/usr/lib/i386-linux-gnu:$LU_RUNTIME/steam/i386/usr/lib:$LU_RUNTIME/Ubuntu-18.04-x86_64:$LU_RUNTIME/steam/amd64/lib/x86_64-linux-gnu:$LU_RUNTIME/steam/amd64/lib:$LU_RUNTIME/steam/amd64/usr/lib/x86_64-linux-gnu:$LU_RUNTIME/steam/amd64/usr/lib:$LD_LIBRARY_PATH"
            fi
    fi
}

check_ld_library() {
    if [ ! -z "$LD_LIBRARY_PATH" ]
        then
            if [[ -z "$(echo $LD_LIBRARY_PATH|grep "$WINEDIR/lib64:$WINEDIR/lib")" ]]
                then
                    export LD_LIBRARY_PATH="$WINEDIR/lib64:$WINEDIR/lib:$LD_LIBRARY_PATH"
            fi
        else
            export LD_LIBRARY_PATH="$WINEDIR/lib64:$WINEDIR/lib"
    fi
}

check_path() {
    if [ ! -z "$PATH" ]
        then
            export PATH="$WINEDIR/bin:$PATH"
        else
            export PATH="$WINEDIR/bin"
    fi
}

check_terminal() {
    if [[ ! -z "$terminal" && "$terminal" == true ]]
        then
            export TERMINAL="1"
    fi
    if [[ -z "$terminal_app" ]]
        then
            export terminal_app="xterm"
    fi
}

check_pulse_latency() {
    if [[ ! -z "$pulse_latency" && "$pulse_latency" == true ]]
        then
            export PULSE_LATENCY_MSEC="60"
    fi
}

check_vkbasalt() {
    if [[ "$USE_VKBASALT" == 1 && -f "$VKBASALT_CONFIG_FILE" ]]
        then
            export ENABLE_VKBASALT=1
            if [ -z "$VKBASALT_EFFECTS" ]
                then
                    export VKBASALT_EFFECTS="Tonemap:Colourfulness:FakeHDR:cas"
            fi
            sed -ri "s/effects = .*/effects = $VKBASALT_EFFECTS/g" "$VKBASALT_CONFIG_FILE"
            if [ -z "$VKBASALT_FFX_CAS" ]
                then
                    export VKBASALT_FFX_CAS="0.7"
            fi
            sed -ri "s/casSharpness .*/casSharpness = $VKBASALT_FFX_CAS/g" "$VKBASALT_CONFIG_FILE"
            if [ ! -z "$VK_INSTANCE_LAYERS" ]
                then
                    export VK_INSTANCE_LAYERS="VK_LAYER_VKBASALT_post_processing:$VK_INSTANCE_LAYERS"
                else
                    export VK_INSTANCE_LAYERS="VK_LAYER_VKBASALT_post_processing"
            fi
        else
            export DISABLE_VKBASALT=1
    fi

}

check_reset_pulse() {
    if [[ ! -z "$reset_pulse" && "$reset_pulse" == true ]]
        then
            if [[ ! -z "$(pgrep pulseeffects)" && ! -z "$(pgrep pulseaudio)" ]]
                then
                    pkill -15 pulseeffects
                    pulseaudio -k
                    if [ -z "$(pgrep pulseaudio)" ]
                        then
                            pulseaudio --start
                    fi
                    pulseeffects --gapplication-service
                    print_info "Pulseaudio and Pulseeffects restarted!"
            elif [ ! -z "$(pgrep pulseaudio)" ]
                then
                    pulseaudio -k
                    if [ -z "$(pgrep pulseaudio)" ]
                        then
                            pulseaudio --start
                    fi
                    print_info "Pulseaudio restarted!"
            else
                print_error "Pulseaudio not running!"
            fi
    fi
}

check_win_version() {
    if [ -z "$WIN_VER" ]
        then
            export WIN_VER="10"
    fi
    if [[ -z $(cat "$WINEPREFIX/system.reg" 2>/dev/null|grep "Windows $WIN_VER" 2>/dev/null) ]]
        then
            if [[ ! -z "$WIN_VER" && $(echo "$WIN_VER"|sed 's/.*/\L&/') == "xp" ]]
                then
                    export WIN_VER="xp64"
            fi
            "$WINE" winecfg -v $(echo "win$WIN_VER"|sed 's/.*/\L&/') 2>&1 |settingbar
            print_info "WINDOWS VERSION SET TO WINDOWS $WIN_VER"
    fi
}

check_hold_terminal() {
    if [[ ! -z "$HOLD_TERMINAL" && "$HOLD_TERMINAL" != 0 ]]
        then
            export term_hold="--hold"
    fi
}

check_crash_dialog() {
    if [[ ! -z "$ShowCrashDialog" && "$ShowCrashDialog" == true && "$WINEDBG_DISABLE" != 1 ]]
        then
            wdllover_upd "winedbg.exe=b"
        else
            wdllover_upd "winedbg.exe="
    fi
}

check_debug() {
    if [[ ! -z "$show_debug" && "$show_debug" == "+all" ]]
        then
            export DEBUG="1"
    fi
}

check_single_cpu() {
    if [[ ! -z "$single_cpu" && "$single_cpu" == true ]]
        then
            export SINGLE_CPU="taskset -c 0"
            print_info "Application will run on a single CPU core"
    fi
}

check_vkd3dconfig() {
    if [ -z "$VKD3D_CONFIG" ]
        then
            vkd3dcfg_upd "force_bindless_texel_buffer,multi_queue"
    fi
}

check_dxr() {
    if [[ ! -z "$DXR" && "$DXR" != 0 ]]
        then
            vkd3dcfg_upd "dxr"
    elif [[ ! -z "$DXR11" && "$DXR11" != 0 ]]
        then
            vkd3dcfg_upd "dxr11"
    fi
}

restore_gamma() {
    if [[ ! -z "$restore_gamma" && "$restore_gamma" == true ]]
        then
            if [ ! -z "$(which xgamma 2>/dev/null)" ]
                then
                    xgamma -gamma 1.0
                else
                    print_error "xgamma not found in your system!"
            fi
    fi
}

check_winetricks() {
    runtime_manager "winetricks"
}

check_gamecontrollerdb() {
    runtime_manager "gamecontrollerdb"
}

check_innoextract() {
    runtime_manager "innoextract-1.9-linux"
}

check_network-tools() {
    runtime_manager "network-tools"
}

check_p7zip() {
    runtime_manager "p7zip"
}

check_ubuntu1804-i686() {
    runtime_manager "Ubuntu-18.04-i686"
}

check_ubuntu1804-x86_64() {
    runtime_manager "Ubuntu-18.04-x86_64"
}

upd_battleye() {
    try_rm "$LU_RUNTIME"/battleye_runtime
    check_battleye
}
upd_gamecontrollerdb() {
    try_rm "$LU_RUNTIME"/gamecontrollerdb
    check_gamecontrollerdb
}
upd_innoextract() {
    try_rm "$LU_RUNTIME"/innoextract-1.9-linux
    check_innoextract
}
upd_network-tools() {
    try_rm "$LU_RUNTIME"/network-tools
    check_network-tools
}
upd_p7zip() {
    try_rm "$LU_RUNTIME"/p7zip
    check_p7zip
}
upd_ubuntu1804-i686() {
    try_rm "$LU_RUNTIME"/Ubuntu-18.04-i686
    check_ubuntu1804-i686
}
upd_ubuntu1804-x86_64() {
    try_rm "$LU_RUNTIME"/Ubuntu-18.04-x86_64
    check_ubuntu1804-x86_64
}
upd_d3d_extras() {
    if [[ ! -z "$d3d_extras_version" && "$d3d_extras_version" != "latest" ]]
        then
            sed -i '/d3d_extras_version/d' "$LU_WINE_CONF"
            unset d3d_extras_version
            export d3d_extras="true"
            export NEEDCHKDLL=1
            check_d3d_extras
    fi
}
upd_dgvoodoo2() {
    if [[ ! -z "$dgvoodoo2_version" && "$dgvoodoo2_version" != "latest" ]]
        then
            sed -i '/dgvoodoo2_version/d' "$LU_WINE_CONF"
            unset dgvoodoo2_version
            export dgvoodoo2="true"
            export NEEDCHKDLL=1
            check_dgvoodoo2
    fi
}
upd_dxvk() {
    if [[ ! -z "$dxvk_version" && "$dxvk_version" != "latest" ]]
        then
            sed -i '/dxvk_version/d' "$LU_WINE_CONF"
            unset dxvk_version
            export dxvk="true"
            export NEEDCHKDLL=1
            check_dxvk
    fi
}
upd_dxvk_nvapi() {
    if [[ ! -z "$dxvk_nvapi_version" && "$dxvk_nvapi_version" != "latest" ]]
        then
            sed -i '/dxvk_nvapi_version/d' "$LU_WINE_CONF"
            unset dxvk_nvapi_version
            export dxvk_nvapi="true"
            export NEEDCHKDLL=1
            check_dxvk-nvapi
    fi
}
upd_vkd3d() {
    if [[ ! -z "$vkd3d_version" && "$vkd3d_version" != "latest" ]]
        then
            sed -i '/vkd3d_version/d' "$LU_WINE_CONF"
            unset vkd3d_version
            export vkd3d="true"
            export NEEDCHKDLL=1
            check_vkd3d
    fi
}
upd_all() {
    upd_battleye &
    upd_gamecontrollerdb &
    upd_innoextract &
    upd_network-tools &
    upd_p7zip &
    upd_ubuntu1804-i686 &
    upd_ubuntu1804-x86_64 &
    upd_d3d_extras &
    upd_dgvoodoo2 &
    upd_dxvk &
    upd_dxvk_nvapi &
    upd_vkd3d &
    wait
}

lu_update() {
LWRUNTIMELST="battleye_runtime
gamecontrollerdb
innoextract
network-tools
p7zip
ubuntu1804-i686
ubuntu1804-x86_64
d3d_extras
dxvk
dxvk-nvapi
vkd3d"
    if [ "$2" == "all" ]
        then
            upd_all
    elif [[ -z "$2" || "$2" == "openupdtr" ]]
        then
            if [ -z "$(pgrep -fa yad|grep "Runtime Updater"|awk '{print$1}')" ]; then :
                else
                    print_error "Runtime Updater already runing!"
                    zenity --error --title "Runtime Updater" --text "Runtime Updater already runing!" --no-wrap &>/dev/null
                    exit 1
            fi
            LW_RUN_UPD="$(echo -e "\n$(echo "$LWRUNTIMELST"|sed ':a;N;$!ba;s/\n/\n\n/g')"| \
            yad --title "Runtime Updater" --list --checklist --separator "\n" --column="" --column="Select runtime for update:" \
                --text-align=center --center --window-icon="/usr/share/lutris-wine/icon/default_icon.png" \
                --width=300 --height=500 --button="UPDATE ALL:2"  --button="EXIT:1" --button="OK:0" 2>/dev/null)"
            if [ "$?" == "2" ]
                then
                    upd_all
            elif [ ! -z "$(echo "$LW_RUN_UPD"|head -1)" ]
                then
                    LW_RUN_UPD="$(echo "$LW_RUN_UPD"|sed '/^TRUE$/d'|sed '/^$/d')"
                    (IFS=$'\n' ; for LWRUNUPD in $LW_RUN_UPD
                        do
                            case "$LWRUNUPD" in
                                battleye_runtime) upd_battleye & ;;
                                gamecontrollerdb) upd_gamecontrollerdb & ;;
                                innoextract) upd_innoextract & ;;
                                network-tools) upd_network-tools & ;;
                                p7zip) upd_p7zip & ;;
                                ubuntu1804-i686) upd_ubuntu1804-i686 & ;;
                                ubuntu1804-x86_64) upd_ubuntu1804-x86_64 & ;;
                                d3d_extras) upd_d3d_extras & ;;
                                dgvoodoo2) upd_dgvoodoo2 & ;;
                                dxvk) upd_dxvk & ;;
                                dxvk-nvapi) upd_dxvk_nvapi & ;;
                                vkd3d) upd_vkd3d & ;;
                            esac
                    done
                    wait)
            fi
        else
            while [[ ! -z "$2" ]]
                do
                    case "$2" in
                        bat|battleye|battleye_runtime) upd_battleye & ;;
                        ga|gamecontrollerdb|gamectrlrdb) upd_gamecontrollerdb & ;;
                        inn|innoextract) upd_innoextract & ;;
                        net|network-tools) upd_network-tools & ;;
                        p7|p7zip) upd_p7zip & ;;
                        ub1804_686|ubuntu1804-i686) upd_ubuntu1804-i686 & ;;
                        ub1804_8664|ubuntu1804-x86_64) upd_ubuntu1804-x86_64 & ;;
                        d3d|d3d_extras|d3d-extras) upd_d3d_extras & ;;
                        dg|dgvoodoo2) upd_dgvoodoo2 & ;;
                        dx|dxvk) upd_dxvk & ;;
                        dxnv|dxvk-nvapi|dxvk_nvapi) upd_dxvk_nvapi & ;;
                        vkd|vkd3d) upd_vkd3d & ;;
                        *) print_error "Invalid argument: '$2'" ;;
                    esac
                    shift
            done
            wait
    fi
}

check_other_fixes() {
    if [ ! -z "$(cat "$WINEPREFIX/system.reg" 2>/dev/null|grep -wm 1 "Origin.exe"|awk '{print $1}')" ]
        then
            sysreg_norig=$((($(cat -n "$WINEPREFIX/system.reg" 2>/dev/null|grep 'OriginWebHelperService'|awk '{print $1}') + 3)))
            sed -i "${sysreg_norig}s/dword:0000000[1-2]/dword:00000003/" "$WINEPREFIX/system.reg"
    fi
    for fix_reg in "PnkBstrA.exe" "PnkBstrB.exe"
        do
            if [ ! -z "$(cat "$WINEPREFIX/system.reg" 2>/dev/null|grep -wm 1 "$fix_reg"|awk '{print $1}')" ]
                then
                    sysreg_norig=$((($(cat -n "$WINEPREFIX/system.reg" | grep "$fix_reg" | awk '{print $1}') + 3)))
                    sed -i "${sysreg_norig}s/dword:0000000[1-2]/dword:00000003/" "$WINEPREFIX/system.reg"
            fi
    done
    sed -i '/steam.exe\\" -silent"/d' "$WINEPREFIX/user.reg" 2>/dev/null
    if [[ ! -z "$LARGE_ADDRESS" && "$LARGE_ADDRESS" != 0 ]]
        then
            export WINE_LARGE_ADDRESS_AWARE="1"
        else
            export WINE_LARGE_ADDRESS_AWARE="0"
    fi
    if [[ ! -z "$OLD_GL_STRING" && "$OLD_GL_STRING" != 0 ]]
        then
            export MESA_EXTENSION_MAX_YEAR="2003" #mesa override
            export __GL_ExtensionStringVersion="17700" #nvidia override
    fi
    if [[ ! -z "$NO_WRITE_WATCH" && "$NO_WRITE_WATCH" != 0 ]]
        then
            export WINE_DISABLE_WRITE_WATCH="1"
    fi
    if [[ ! -z "$VULKAN_NO_ASYNC" && "$VULKAN_NO_ASYNC" != 0 ]]
        then
            export RADV_DEBUG="llvm"
            vkd3dcfg_upd "single_queue"
    fi
    if [[ ! -z "$HIDE_NVIDIA_GPU" && "$HIDE_NVIDIA_GPU" != 0 ]]
        then
            export WINE_HIDE_NVIDIA_GPU="1"
    fi
    if [[ ! -z "$HEAP_DELAY_FREE" && "$HEAP_DELAY_FREE" != 0 ]]
        then
            export WINE_HEAP_DELAY_FREE="1"
        else
            export WINE_HEAP_DELAY_FREE="0"
    fi
    if [[ ! -z "$ALLOW_XIM" && "$ALLOW_XIM" != 0 ]]
        then
            export WINE_ALLOW_XIM="1"
        else
            export WINE_ALLOW_XIM="0"
    fi
    if [ -z "$WINE_MONO_OVERRIDES" ]
        then
            export WINE_MONO_OVERRIDES="Microsoft.Xna.Framework.*,Gac=n"
    fi
    if [[ ! -z "$SHARED_MEMORY" && "$SHARED_MEMORY" != 0 ]]
        then
            export STAGING_SHARED_MEMORY="1"
    fi
    if [[ ! -z "$DIS_LAYER_AMD" && "$DIS_LAYER_AMD" != 0 ]]
        then
            export DISABLE_LAYER_AMD_SWITCHABLE_GRAPHICS_1="1"
    fi
    try_mkdir "$HOME/.cache/gl_shader_cache"
    export __GL_SHADER_DISK_CACHE_PATH=$HOME/.cache/gl_shader_cache
    export __GL_SHADER_DISK_CACHE=1
    export __GL_SHADER_DISK_CACHE_SIZE=1000000000
}

check_opengl() {
    if [[ "$dxvk" != "true" || "$vkd3d" != "true" ]]
        then
            print_info "Running in WineD3D mode!"
            try_mkdir "$HOME/.cache/mesa_shader_cache"
            export MESA_GLSL_CACHE_DIR="$HOME/.cache/mesa_shader_cache"
            export GL_YIELD="NOTHING"
            if ! try_ln "$WINEDIR"/lib/wine/fakedlls/dxgi.dll "$PFX_DLL32_PTH/dxgi.dll" &>/dev/null
                then
                    try_ln "$WINEDIR"/lib/wine/i386-windows/dxgi.dll "$PFX_DLL32_PTH/dxgi.dll" &>/dev/null
            fi
            if ! try_ln "$WINEDIR"/lib64/wine/fakedlls/dxgi.dll "$PFX_DLL64_PTH/dxgi.dll" &>/dev/null
                then
                    try_ln "$WINEDIR"/lib64/wine/x86_64-windows/dxgi.dll "$PFX_DLL64_PTH/dxgi.dll" &>/dev/null
            fi
            for wine_build_dll in d3d11 d3d10 d3d10core d3d10_1 d3d9
                do
                    if ! try_ln "$WINEDIR/lib/wine/${wine_build_dll}.dll" "$PFX_DLL32_PTH/${wine_build_dll}.dll" &>/dev/null
                        then
                            try_ln "$WINEDIR/lib/wine/i386-windows/${wine_build_dll}.dll" "$PFX_DLL32_PTH/${wine_build_dll}.dll" &>/dev/null
                    fi
                    if ! try_ln "$WINEDIR/lib64/wine/${wine_build_dll}.dll" "$PFX_DLL64_PTH/${wine_build_dll}.dll" &>/dev/null
                        then
                            try_ln "$WINEDIR/lib64/wine/x86_64-windows/${wine_build_dll}.dll" "$PFX_DLL64_PTH/${wine_build_dll}.dll" &>/dev/null
                    fi
            done
            wdllover_upd "d3d11,d3d10,d3d10core,d3d10_1,d3d9,dxgi=b;d3d12="
    fi
}

export_all_functions() {
    export -f yaml_parser print_var print_error print_info check_lupid check_tray check_wine_pids check_luwine_pid check_vkd3dconfig try_rm \
        check_luwine_sh_pid check_exes noclosetray check_compositor try_mkdir check_symlink check_mono_gecko try_download check_single_cpu \
        download_error unpack_tar_xz unpack_tar_gz unpack_tar settingbar shell_is_death exe_is_death exes_is_death wine_is_death try_cp \
        compositor_sw check_winetricks check_musthave_dll check_other_fixes wdllover_upd reg_edit exe2png add_to_lutris restore_gamma vkd3dcfg_upd \
        create_shortcut lu_debug clear_log dis_debug_msg dis_cmd_msg import_luwine_conf check_def_wine lu_prerun lu_run lu_prestart try_mv \
        lu_start lu_cmd lu_shell lu_regedit lu_control lu_winecfg lu_taskmgr lu_uninstaller winetricks lu_openpfx lu_exit lu_killshell check_dxr \
        lu_killtray lu_killwine lu_killexe lu_clearpfx lu_rmapp lu_shortcut lu_explorer lu_help lu_version lu_tray lu_winemgr lu_themesmgr \
        us_layout_sw check_mangohud check_gamemode check_gstreamer check_dxvk check_vkd3d check_dxvk-nvapi check_d3d_extras check_dgvoodoo2 \
        check_battleye check_wine_inst check_winearch check_winepfx check_wdllover check_vulkan_icd check_sdl_video check_crash_dialog lu_update \
        check_prime check_esync check_fsync check_fsr check_runtime check_ld_library check_path check_terminal check_pulse_latency check_debug \
        check_reset_pulse export_all_functions check_win_version check_hold_terminal dll_manager check_dll_symlink try_ln check_git_release \
        runtime_manager check_gamecontrollerdb check_innoextract check_network-tools check_p7zip check_ubuntu1804-i686 upd_battleye upd_gamecontrollerdb \
        upd_innoextract upd_network-tools upd_p7zip upd_d3d_extras upd_dgvoodoo2 upd_dxvk upd_dxvk_nvapi upd_vkd3d upd_all check_ubuntu1804-x86_64 \
        upd_ubuntu1804-x86_64 upd_ubuntu1804-i686 check_opengl check_vkbasalt
}

if [ $(id -u) -eq 0 ]
    then
        print_error "Don't run Lutris Wine as root!"
        zenity --error --text "Don't run Lutris Wine as root!" --no-wrap &>/dev/null &
        exit 1
    else
        if [[ -f "$LU_WINE_CONF" && -d "$LU_DIR" ]]
            then
                try_mkdir "$LU_WINE_DIR"
                import_luwine_conf
                check_wine_inst
                check_def_wine
                check_winearch
                check_winepfx
                check_compositor
                check_mono_gecko
                check_wdllover
                check_other_fixes
                check_vulkan_icd
                check_sdl_video
                check_mangohud
                check_gamemode
                check_gstreamer
                check_vkbasalt
                check_vkd3dconfig
                check_dxr
                check_dxvk
                check_vkd3d
                check_dxvk-nvapi
                check_d3d_extras
                check_dgvoodoo2
                check_battleye
                check_opengl
                check_gamecontrollerdb
                check_innoextract
                check_network-tools
                check_p7zip
                check_ubuntu1804-i686
                check_ubuntu1804-x86_64
                check_winetricks
                check_prime
                check_esync
                check_fsync
                check_fsr
                check_runtime
                check_ld_library
                check_path
                check_terminal
                check_pulse_latency
                check_reset_pulse
                export_all_functions
                check_musthave_dll
                check_win_version
                check_hold_terminal
                check_crash_dialog
                check_debug
                check_single_cpu
                case $1 in
                    -cmd) lu_cmd "$@" ;;
                    -shell) lu_shell "$@" ;;
                    -regedit) lu_regedit ;;
                    -control) lu_control ;;
                    -winecfg) lu_winecfg ;;
                    -taskmgr) lu_taskmgr ;;
                    -winemgr) lu_winemgr ;;
                    -themesmgr) lu_themesmgr ;;
                    -uninstaller) lu_uninstaller ;;
                    -winetricks) winetricks ;;
                    -openpfx) lu_openpfx ;;
                    -killwine) lu_killwine ;;
                    -killtray) lu_killtray ;;
                    -killexe) lu_killexe ;;
                    -killshell) lu_killshell ;;
                    -exit) lu_exit ;;
                    -clearpfx) lu_clearpfx ;;
                    -rmapp) lu_rmapp ;;
                    -shortcut) lu_shortcut "$@" ;;
                    -addtolu) export ADDTOLU="1" ; lu_shortcut "$@" ;;
                    -explorer) lu_explorer ;;
                    -debug) export DEBUG="1" ; lu_start "$@" ;;
                    -help) lu_help ;;
                    -version) lu_version ;;
                    -tray) lu_tray ;;
                    -setwine) export SETDEFWINE="1" ; check_def_wine ;;
                    -update) lu_update "$@" ;;
                    -*) lu_help ;;
                    *) lu_start "$@" ;;
                esac
            else
                print_error "First you need to configure Wine in Lutris!"
                zenity --error --text "First you need to configure Wine in Lutris!" --no-wrap &>/dev/null &
                exit 1
        fi
fi
