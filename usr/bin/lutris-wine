#!/bin/bash
###VHSgunzo
export LW_VERSION=0.45

export BLUE='\033[1;94m'
export RED='\033[1;91m'
export GREEN='\033[1;92m'
export YELLOW='\033[1;33m'
export RESETCOLOR='\033[1;00m'

#export LOG=1
#export DEBUG=1
#export NO_TRAY=1
#export TERMINAL=1
#export HOLD_TERMINAL=1
#export UNSET_CMPSTR_SW=1
#export EXE_ARG=""
export MUST_HAVE_DLL="mfc42 vcrun2019 dotnet46"

export LU_WINE_CONF="$HOME/.config/lutris/runners/wine.yml"
export LU_DIR="$HOME/.local/share/lutris"
export THEMES_DIR="/usr/share/lutris-wine/themes"
export LU_WINE_DIR="$LU_DIR/runners/wine"
export LU_RUNTIME="$HOME/.local/share/lutris/runtime"
export LU_DB="$LU_DIR/pga.db"
export LU_APP="${HOME}/.local/share/applications/LutrisWineApp"

yaml_parser() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("~")}
         printf("%s%s%s=%s\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

print_var() {
    for varp in $@
        do
            echo -e "[SET] $varp=\"${!varp}\""
    done
}

print_error() {
    echo -e "${RED}ERROR: $@ $RESETCOLOR"
}

print_info() {
    echo -e "${GREEN}INFO: $@ $RESETCOLOR"
}

check_lupid() {
    unset LU_PID
    export LU_PID="$(pgrep -fa python|grep lutris|awk '{print$1}')"
}

check_tray() {
    unset TRAY_PID FORCE_TRAY CHK_TRAY_PID CHK_FORCE_TRAY
    CHK_TRAY_PID="$(pgrep -fa yad|grep "\-\-notification"|grep -iF "Lutris Wine"|awk '{print $1}')"
    CHK_FORCE_TRAY="$(pgrep -fa "lutris-wine"|grep -o "noclose")"
    if [ ! -z "$CHK_TRAY_PID" ]
        then
            export TRAY_PID="$CHK_TRAY_PID"
    fi
    if [ ! -z "$CHK_FORCE_TRAY" ]
        then
            export FORCE_TRAY="$CHK_FORCE_TRAY"
    fi
}

check_wine_pids() {
    unset WINE_PIDS CHK_WINE_PIDS
    export CHK_WINE_PIDS="$(ls -l /proc/*/exe 2>/dev/null|grep -ie "$WINE_IN_USE"|grep -E 'wine(64)?-preloader|wineserver'|awk -F/ '{print $3}')"
    if [ ! -z "$CHK_WINE_PIDS" ]
        then
            export WINE_PIDS="$CHK_WINE_PIDS"
    fi
}

check_luwine_pid() {
    unset LU_WINE_PID CHK_LU_WINE_PID
    CHK_LU_WINE_PID="$(pgrep lutris-wine)"
    if [ ! -z "$CHK_LU_WINE_PID" ]
        then
            export LU_WINE_PID="$CHK_LU_WINE_PID"
    fi
}

check_luwine_sh_pid() {
    unset LW_SH_PID CHK_LW_SH_PID CHK_LW_SH_PIDS
    export CHK_LW_SH_PIDS="$(pgrep -fa lutris-wine|grep "\-shell"|awk '{print$1}' 2>/dev/null)"
    for lwshpid in $CHK_LW_SH_PIDS
        do
            export CHK_LW_SH_PID="$(pgrep -faP "$lwshpid"|grep "$terminal_app"|awk '{print$1}' 2>/dev/null)"
            if [ ! -z "$CHK_LW_SH_PID" ]
                then
                    export LW_SH_PID="$CHK_LW_SH_PID"
            fi
    done
}

check_exes() {
    unset EXE_PIDS CHK_EXES RUN_EXES RUN_EXE
    CHK_EXES="$(ps -ef|grep "$(ps -eo args|grep -iF ".exe"|rev|cut -d"\\" -f1|rev)"|grep -v windows|grep ":\\\\")"
    if [ ! -z "$CHK_EXES" ]
        then
            export EXE_PIDS="$(echo "$CHK_EXES"|awk '{print$2}')"
            export RUN_EXES="$(while read exepid ; do ps -p $exepid -o args|cut -d":" -f2|sed '/COMMAND/d'|sed 'y#\\#/#' ; done <<< "$EXE_PIDS")"
            export RUN_EXE=$(echo "$RUN_EXES"|grep -o "$EXE_DIR" 2>/dev/null)
        else
            unset RUN_EXE
    fi
}

noclosetray() {
    if [[ ! -z "$FORCE_TRAY" ]]
        then
            while : ; do sleep 60 ; done
    fi
}

check_compositor() {
    if [[ "$DESKTOP_SESSION" == "plasma" ]]
        then
            export CMPSTR_PLASMA="qdbus org.kde.KWin /Compositor active"
            export CMPSTR_ON="qdbus org.kde.KWin /Compositor resume"
            export CMPSTR_OFF="qdbus org.kde.KWin /Compositor suspend"
            export CMPSTR_PLASMA_CHECK="$(eval $CMPSTR_PLASMA)"
    elif [[ "$DESKTOP_SESSION" == "mate" ]]
        then
            export CMPSTR_MATE="gsettings get org.mate.Marco.general compositing-manager"
            export CMPSTR_ON="gsettings set org.mate.Marco.general compositing-manager true"
            export CMPSTR_OFF="gsettings set org.mate.Marco.general compositing-manager false"
            export CMPSTR_MATE_CHECK="$(eval $CMPSTR_MATE)"
    elif [[ "$DESKTOP_SESSION" == "xfce" ]]
        then
            export CMPSTR_XFCE="xfconf-query --channel=xfwm4 --property=/general/use_compositing"
            export CMPSTR_ON="xfconf-query --channel=xfwm4 --property=/general/use_compositing --set=true"
            export CMPSTR_OFF="xfconf-query --channel=xfwm4 --property=/general/use_compositing --set=false"
            export CMPSTR_XFCE_CHECK="$(eval $CMPSTR_XFCE)"
    elif [[ "$DESKTOP_SESSION" == "deepin" ]]
        then
            export CMPSTR_ON="dbus-send --session --dest=com.deepin.WMSwitcher --type=method_call /com/deepin/WMSwitcher com.deepin.WMSwitcher.RequestSwitchWM"
            export CMPSTR_OFF="$CMPSTR_ON"
            export CMPSTR_DEEPIN="dbus-send --session --dest=com.deepin.WMSwitcher --type=method_call --print-reply=literal /com/deepin/WMSwitcher com.deepin.WMSwitcher.CurrentWM"
            export CMPSTR_DEEPIN_CHECK="$(eval $CMPSTR_DEEPIN)"
    else
        export CMPSTR_NULL=""
    fi
}

create_new_dir() {
    if [ ! -d "$1" ]
        then
            mkdir -p "$1"
    fi
}

check_symlink() {
    CHK_SLK_FILE="$(file "$1")"
    if [ ! -z "$(echo "$CHK_SLK_FILE"|grep -v "broken"|grep "symbolic link to"|awk '{print $1}')" ]
        then
            return 0
    elif [ ! -z "$(echo "$CHK_SLK_FILE"|grep "broken symbolic link to"|awk '{print $1}')" ]
        then
            print_error "remove broken symlink: $CHK_SLK_FILE"
            rm -rf "$CHK_SLK_FILE"
            return 1
    else
        return 1
    fi
}

check_mono_gecko() {
    create_new_dir "$LU_RUNTIME/gecko"
    create_new_dir "$LU_RUNTIME/mono"
    for mono_gecko in "mono" "gecko"
        do
            if [ ! -d "$WINEDIR/share/wine/$mono_gecko" ]
                then
                    rm -rf "$WINEDIR/share/wine/$mono_gecko"
                    ln -sf "$LU_RUNTIME/$mono_gecko" "$WINEDIR/share/wine/"
            elif ! check_symlink "$WINEDIR/share/wine/$mono_gecko" && [[ -d "$WINEDIR/share/wine/$mono_gecko" ]]
                then
                    cp -rf "$WINEDIR/share/wine/$mono_gecko" "$LU_RUNTIME"
                    rm -rf "$WINEDIR/share/wine/$mono_gecko"
                    ln -sf "$LU_RUNTIME/$mono_gecko" "$WINEDIR/share/wine/"
            fi
    done
}

try_download() {
    set -o pipefail
    wget --no-check-certificate --content-disposition -t 3 -T 5 "$1" --directory-prefix="$2" 2>&1 | \
    tr '\r' '\n' | sed -u 's/.* \([0-9]\+%\)\ \+\([0-9,.]\+.\) \(.*\)/\1\n#Downloading at \1\/, \2\/s, ETA \3/; s/^20[0-9][0-9].*/#Done./' | \
    zenity --progress --percentage=0 --title="Download $(basename $1)" --text=Starting... --auto-close --auto-kill --width=500 --height=90
    if [ "${PIPESTATUS[0]}" != 0 ]
        then
            print_error "Failed to download $1. Skipping."
            return 1
        else
            return 0
    fi
}

download_error() {
    zenity --error --title "Error..." --text "You will need to check internet connettion!\nPress OK to repeet downloading" --no-wrap
    [ "$?" != 0 ] && exit 1 || return 0
}

unpack_tar_xz() {
    set -o pipefail
    tar -Jxvf "$1" -C "$2"|settingbar
    [ "${PIPESTATUS[0]}" != 0 ] && print_error "File unpacking error." && return 1 || return 0
}

unpack_tar_gz() {
    set -o pipefail
    tar -xzvf "$1" -C "$2"|settingbar
    [ "${PIPESTATUS[0]}" != 0 ] && print_error "File unpacking error." && return 1 || return 0
}

unpack_tar() {
    set -o pipefail
    tar -xvf "$1" -C "$2"|settingbar
    [ "${PIPESTATUS[0]}" != 0 ] && print_error "File unpacking error." && return 1 || return 0
}

settingbar() {
    zenity --progress --title="Settings..." --text="Updating parameters" --pulsate --auto-close --width=500 --height=90 --no-cancel
}

shell_is_death() {
    while true
        do
            check_luwine_sh_pid
            if  [ ! -z "$LW_SH_PID" ]
                then
                    #echo LW_SH_PID=$LW_SH_PID
                    sleep 1
                    continue
                else
                    break
            fi
    done
}

exe_is_death() {
    while true
        do
            check_exes
            if  [ ! -z "$RUN_EXE" ]
                then
                    #echo RUN_EXE=$RUN_EXE
                    sleep 1
                    continue
                else
                    break
            fi
    done
}

exes_is_death() {
    while true
        do
            check_exes
            if  [ ! -z "$RUN_EXES" ]
                then
                    #echo RUN_EXES=$RUN_EXES
                    sleep 1
                    continue
                else
                    break
            fi
    done
}

wine_is_death() {
    while true
        do
            check_wine_pids
            if  [ ! -z "$WINE_PIDS" ]
                then
                    #echo WINE_PIDS=$WINE_PIDS
                    sleep 1
                    continue
                else
                    break
            fi
    done
}

compositor_sw() {
    if [[ ! -z "$disable_compositor" && "$disable_compositor" == true && -z "$CMPSTR_NULL" && "$UNSET_CMPSTR_SW" != 1 ]]
        then
            if [ ! -z "$CMPSTR_PLASMA_CHECK" ]
                then
                    if [[ "$(eval $CMPSTR_PLASMA)" == true && "$CMPSTR_PLASMA_CHECK" == true ]]
                        then
                            $CMPSTR_OFF
                    elif [[ "$(eval $CMPSTR_PLASMA)" == false && "$CMPSTR_PLASMA_CHECK" == true ]]
                        then
                            if exes_is_death
                                then
                                    $CMPSTR_ON
                            fi
                    fi
            elif [ ! -z "$CMPSTR_MATE_CHECK" ]
                then
                    if [[ "$(eval $CMPSTR_MATE)" == true && "$CMPSTR_MATE_CHECK" == true ]]
                        then
                            $CMPSTR_OFF
                    elif [[ "$(eval $CMPSTR_MATE)" == false && "$CMPSTR_MATE_CHECK" == true ]]
                        then
                            if exes_is_death
                                then
                                    $CMPSTR_ON
                            fi
                    fi
            elif [ ! -z "$CMPSTR_XFCE_CHECK" ]
                then
                    if [[ "$(eval $CMPSTR_XFCE)" == true && "$CMPSTR_XFCE_CHECK" == true ]]
                        then
                            $CMPSTR_OFF
                    elif [[ "$(eval $CMPSTR_XFCE)" == false && "$CMPSTR_XFCE_CHECK" == true ]]
                        then
                            if exes_is_death
                                then
                                    $CMPSTR_ON
                            fi
                    fi
            elif [ ! -z "$CMPSTR_DEEPIN_CHECK" ]
                then
                    if [[ "$(eval $CMPSTR_DEEPIN)" == "deepin wm" && "$CMPSTR_DEEPIN_CHECK" == "deepin wm" ]]
                        then
                            $CMPSTR_OFF
                    elif [[ "$(eval $CMPSTR_DEEPIN)" == "deepin metacity" && "$CMPSTR_DEEPIN_CHECK" == "deepin wm" ]]
                        then
                            if exes_is_death
                                then
                                    $CMPSTR_ON
                            fi
                    fi
            fi
    fi
}

update_winetricks() {
    export WTRX_DIR="$LU_RUNTIME/winetricks"
    WTRX_URL="https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks"
    WTRX_EXT_VER="$(curl -s --list-only $WTRX_URL|grep -i 'WINETRICKS_VERSION='|sed 's/WINETRICKS_VERSION=//')"
    print_info "Version winetricks on server: $WTRX_EXT_VER"
    WTRX_INT_VER="$(cat "$WTRX_DIR/winetricks"|grep -i 'WINETRICKS_VERSION='|sed 's/WINETRICKS_VERSION=//')"
    print_info "Version winetricks in LUTRIS $WTRX_EXT_VER"
    if [[ ! -f "$WTRX_DIR/winetricks" && ! -z "$WTRX_EXT_VER" ]] || [[ "$WTRX_INT_VER" != "$WTRX_EXT_VER" && ! -z "$WTRX_EXT_VER" ]]
        then
            if try_download "$WTRX_URL" "$WTRX_DIR/winetricks_new"
                then
                    mv -f "$WTRX_DIR/winetricks_new" "$WTRX_DIR/winetricks"
                    WTRX_INT_VER="$(cat "$WTRX_DIR/winetricks"|grep -i 'WINETRICKS_VERSION='|sed 's/WINETRICKS_VERSION=//')" && print_info "Winetricks version in LUTRIS has been updated ($WTRX_EXT_VER)"
                    chmod u+x "$WTRX_DIR/winetricks"
            fi
    fi
    if  [ -f "$WTRX_DIR/winetricks" ]
        then
            sed -i 's/w_metadata vcrun2015 dlls \\/w_metadata !dont_use_2015! dlls \\/' "$WTRX_DIR/winetricks"
            sed -i 's/w_metadata vcrun2017 dlls \\/w_metadata !dont_use_2017! dlls \\/' "$WTRX_DIR/winetricks"
            #HOTFIX SHA256SUM FOR VC_RUN2019
            sed -i 's/vc_redist.x86.exe 1acd8d5ea1cdc3eb2eb4c87be3ab28722d0825c15449e5c9ceef95d897de52fa/vc_redist.x86.exe 80c7969f4e05002a0cd820b746e0acb7406d4b85e52ef096707315b390927824/g' "$WTRX_DIR/winetricks"
            sed -i 's/vc_redist.x64.exe 003063723b2131da23f40e2063fb79867bae275f7b5c099dbd1792e25845872b/vc_redist.x64.exe 9b9dd72c27ab1db081de56bb7b73bee9a00f60d14ed8e6fde45dab3e619b5f04/g' "$WTRX_DIR/winetricks"

    fi
}

check_musthave_dll() {
    if [ ! -z "$MUST_HAVE_DLL" ]
        then
            export DLL_INSTALL="$MUST_HAVE_DLL $DLL_INSTALL"
    fi
    if [ ! -z "$DLL_INSTALL" ]
        then
            export DLL_NEED_INSTALL=""
            export USE_WT_FROM_DB=0
            if [ ! -f "$WTRX_LOG" ]
                then
                    touch "$WTRX_LOG"
            fi
            for need_install_dll_to_pfx in $DLL_INSTALL
                do
                    if [[ "$need_install_dll_to_pfx" == "vcrun2015" || "$need_install_dll_to_pfx" == "vcrun2017" ]]
                        then
                            need_install_dll_to_pfx="vcrun2019"
                            sed -i '/vcrun2015/d' "$WTRX_LOG"
                            sed -i '/vcrun2017/d' "$WTRX_LOG"
                    elif [ "$need_install_dll_to_pfx" == "vcrun2019" ]
                        then
                            sed -i '/vcrun2015/d' "$WTRX_LOG"
                            sed -i '/vcrun2017/d' "$WTRX_LOG"
                    fi
                    grep "$need_install_dll_to_pfx" "$WTRX_LOG" &>/dev/null
                    if [ "$?" == "1" ]
                        then
                            if [ -z "$DLL_NEED_INSTALL" ]
                                then
                                    export DLL_NEED_INSTALL="$need_install_dll_to_pfx"
                                else
                                    export DLL_NEED_INSTALL="$need_install_dll_to_pfx $DLL_NEED_INSTALL"
                            fi
                            export USE_WT_FROM_DB=1
                    fi
            done
            if [ "$USE_WT_FROM_DB" == "1" ]
                then
                    export UPDPFX_LOG="$WINEPREFIX/update_pfx.log"
                    echo "Try to install DLL in prefix: $DLL_NEED_INSTALL" >> "$UPDPFX_LOG"
                    print_info "Try to install DLL in prefix: $DLL_NEED_INSTALL"
                    $terminal_app $term_hold -e $SHELL -c "winetricks -q -f -r $DLL_NEED_INSTALL|& tee -a '$UPDPFX_LOG'"
            fi
    fi
}

other_fixes() {
#fix after installation Origin, for disabled OriginWebHelperService by default
if [ ! -z "$(cat "$WINEPREFIX/system.reg"|grep -wm 1 "Origin.exe"|awk '{print $1}')" ]
    then
        sysreg_norig=$((($(cat -n "$WINEPREFIX/system.reg"|grep 'OriginWebHelperService'|awk '{print $1}') + 3)))
        sed -i "${sysreg_norig}s/dword:0000000[1-2]/dword:00000003/" "$WINEPREFIX/system.reg"
fi
#fix after installation PnkBstr*, for disabled PnkBstr* by default
for fix_reg in "PnkBstrA.exe" "PnkBstrB.exe"
    do
        if [ ! -z "$(cat "$WINEPREFIX/system.reg"|grep -wm 1 "$fix_reg"|awk '{print $1}')" ]
            then
                sysreg_norig=$((($(cat -n "$WINEPREFIX/system.reg" | grep "$fix_reg" | awk '{print $1}') + 3)))
                sed -i "${sysreg_norig}s/dword:0000000[1-2]/dword:00000003/" "$WINEPREFIX/system.reg"
        fi
done
#disabled silent autostart steam
sed -i '/steam.exe\\" -silent"/d' "$WINEPREFIX/user.reg"
}

wdllover_upd() {
    if [ ! -z "${WINEDLLOVERRIDES}" ]
        then
            export WINEDLLOVERRIDES="${1};${WINEDLLOVERRIDES}"
        else
            export WINEDLLOVERRIDES="${1}"
    fi
}

reg_edit() {
    zenity --question --title "Lutris Wine Registry Editor" --text "Adding information can unintentionally change or delete values and cause components to stop working correctly.\nIf you do not trust the source of this information in "$1" do not add it to the registry.\nAre you sure you want to continue?" --no-wrap &>/dev/null
    if [ $? -eq "0" ]
        then
            REG_BC_DIR="$WINEPREFIX/registry_$(date +'%Y-%m-%d_%T')"
            echo "Registry backup to '$REG_BC_DIR'"
            mkdir "$REG_BC_DIR" 2>/dev/null
            for regbc in $(ls "$WINEPREFIX"/*.reg) ; do cp -rfv "$regbc" "$REG_BC_DIR/" ; done
            $WINE regedit "$1" >/dev/null 2>&1
            print_info "Data from "$1" has been successfully added to Lutris Wine registry!"
            zenity --info --title "Lutris Wine Registry Editor" --text "Registry backup to $REG_BC_DIR\nData from "$1" has been successfully added to Lutris Wine registry!" --no-wrap &>/dev/null
    fi
}

exe2png() {
    if [[ ! -z "$(which wrestool 2>/dev/null)" && ! -z "$(which convert 2>/dev/null)" ]]
        then
            export SHRT_NAME="$(basename "$1"|sed 's/.exe//')"
            export SHRT_PATH="$(cd "$(dirname "$1")" >/dev/null 2>&1 && pwd)"
            export LUJPG="$SHRT_PATH/${SHRT_NAME}.jpg"
            export LUPNG="$SHRT_PATH/${SHRT_NAME}.png"
            if [[ -f "$LUJPG" && -f "$LUPNG" ]]
                then
                    print_info "Converting ico already complete!"
                else
                    cd "$SHRT_PATH"
                    wrestool -x --output=./ -t14 "$1" 2>/dev/null
                    if [ ! -z "$(ls "${SHRT_NAME}"*.ico 2>/dev/null|head -1)" ]
                        then
                            (IFS=$'\n' ; for ico in $(ls "${SHRT_NAME}"*.ico 2>/dev/null)
                                do
                                    echo -en "${GREEN}Found ${RED}"$ico" ${GREEN}and converting to PNG and JPG...\n$RESETCOLOR"
                                    icotool -x --output=./ "$ico" 2>/dev/null
                            done)
                            cp -rf "$(ls -S -1 "${SHRT_NAME}"*_*.png|head -1)" "${SHRT_NAME}".png 2>/dev/null
                            convert "${SHRT_NAME}".png "${SHRT_NAME}".jpg 2>/dev/null
                            echo -en "${RED}$(ls "${SHRT_NAME}".png 2>/dev/null)\n$RESETCOLOR"
                            echo -en "${RED}$(ls "${SHRT_NAME}".jpg 2>/dev/null)\n$RESETCOLOR"
                            print_info "CLEANUP..."
                            rm -rf "${SHRT_NAME}"*.ico *_*_*.png
                            print_info "Converting complete!"
                        else
                            print_error "Failed to get ico from executable file!"
                            zenity --error --text "Failed to get ico from executable file!" --no-wrap &>/dev/null
                    fi
            fi
        else
            print_error "You must install icoutils and imagemagick!"
            zenity --error --text "You must install icoutils and imagemagick!" --no-wrap &>/dev/null
            exit 1
    fi
}

add_to_lutris() {
    if [ ! -z "$LU_EXE" ]
        then
            exe2png "$LU_EXE"
            export YMLTOLU="${SHRT_PATH}/${SHRT_NAME}.yaml"
            if [ -z "$ADD_APP_NAME" ]
                then
                    zenity --question --title "Creating shortcut" --text "Change application name [ $SHRT_NAME ] ?" --no-wrap &>/dev/null
                    if [ $? -eq "0" ]
                        then
                            ADD_APP_NAME="$(zenity --entry --title "Enter name"  --text "Enter name for application")"
                    fi
            fi
            if [ ! -z "$ADD_APP_NAME" ]
                then
                    export SHRT_NAME="$ADD_APP_NAME"
                    cp -rf "$LUJPG" "$LU_DIR"/banners/"$ADD_APP_NAME".jpg
                else
                    cp -rf "$LUJPG" "$LU_DIR"/banners/
            fi
            echo "name: \"${SHRT_NAME}\"" > "$YMLTOLU"
            echo "game_slug: \"${SHRT_NAME}\"" >> "$YMLTOLU"
            echo "version: \"${SHRT_NAME}\"" >> "$YMLTOLU"
            echo "slug: \"${SHRT_NAME}\"" >> "$YMLTOLU"
            echo -e "runner: wine\n" >> "$YMLTOLU"
            echo "script:" >> "$YMLTOLU"
            echo "  game:" >> "$YMLTOLU"
            echo "    exe: \"$LU_EXE\"" >> "$YMLTOLU"
            if [ -z "$ADD_EXE_ARG" ]
                then
                    sleep 0.3
                    zenity --question --title "Creating shortcut" --text "Add launch arguments for EXE?" --no-wrap &>/dev/null
                    if [ $? -eq "0" ]
                        then
                            sleep 0.3
                            ADD_EXE_ARG="$(zenity --entry --title "Enter EXE arguments" --text "Specify additional launch arguments for EXE:")"
                    fi
            fi
            if [ ! -z "$ADD_EXE_ARG" ]
                then
                    echo "    args: "$ADD_EXE_ARG"" >> "$YMLTOLU"
            fi
            echo "  system: {}" >> "$YMLTOLU"
            echo "  wine: {}" >> "$YMLTOLU"
            LUTRIS_SKIP_INIT=1 lutris -i "$YMLTOLU" 2>/dev/null &
            ludb_md5sum1=$(md5sum "$LU_DB")
            timewait=15
            (IFS=$'\n' ; while true
                do
                    timesleep=$(($timesleep + 1))
                    if [ "$timesleep" != "$(($timewait + 1))" ]
                        then
                            sleep 1
                            ludb_md5sum2=$(md5sum "$LU_DB")
                            if [ "$ludb_md5sum1" != "$ludb_md5sum2" ]
                                then
                                    LUNEWAPP="$(ls $HOME/.config/lutris/games/"$SHRT_NAME"-*.yml 2>/dev/null)"
                                    sed -i 's/wine:\{1,\}$/wine: {}/' "$LUNEWAPP" 2>/dev/null
                                    sed -i '/  version: /d' "$LUNEWAPP" 2>/dev/null
                                    LUADDPID="$(ps -ef|grep "lutris -i"|grep -iF "$(basename "$YMLTOLU")"|grep -v grep|awk '{print$2}')"
                                    if [ ! -z "$LUADDPID" ]
                                        then
                                            zenity --question --title "Creating shortcut" --text "Application successfully added to Lutris!\nDo you want to close Lutris?" --no-wrap &>/dev/null
                                            if [ $? -eq "0" ]
                                                then
                                                    kill -9 "$LUADDPID" 2>/dev/null
                                            fi
                                    fi
                                    break
                            fi
                        else
                            LUADDPID="$(ps -ef|grep "lutris -i"|grep -iF "$(basename "$YMLTOLU")"|grep -v grep|awk '{print$2}')"
                            if [ ! -z "$LUADDPID" ]
                                then
                                    zenity --question --title "Creating shortcut" --text "The Lutris database hasn't changed, you may have canceled the app add to Lutris or are waiting for something else.\nDo you want to close Lutris?" --no-wrap &>/dev/null
                                    if [ $? -eq "0" ]
                                        then
                                            kill "$LUADDPID" 2>/dev/null
                                    fi
                            fi
                            break
                    fi
            done)
    fi
}

create_shortcut() {
    if [ ! -z "$LU_EXE" ]
        then
            exe2png "$LU_EXE"
            export DESKF="${SHRT_PATH}/${SHRT_NAME}.desktop"
            echo "[Desktop Entry]" > "$DESKF"
            zenity --question --title "Creating shortcut" --text "Change application name [ $SHRT_NAME ] ?" --no-wrap &>/dev/null
            if [ $? -eq "0" ]
                then
                    ADD_APP_NAME="$(zenity --entry --title "Enter name"  --text "Enter name for application")"
                    if [ ! -z "$ADD_APP_NAME" ]
                        then
                            export SHRT_NAME="$ADD_APP_NAME"
                    fi
            fi
            echo "Name=${SHRT_NAME}" >> "$DESKF"
            sleep 0.3
            zenity --question --title "Creating shortcut" --text "Add launch arguments for EXE?" --no-wrap &>/dev/null
            if [ $? -eq "0" ]
                then
                    sleep 0.3
                    ADD_EXE_ARG="$(zenity --entry --title "Enter EXE arguments" --text "Specify additional launch arguments for EXE:")"
                    if [ ! -z "$ADD_EXE_ARG" ]
                        then
                            echo "Exec=EXE_ARG=\"$ADD_EXE_ARG\" lutris-wine \"$LU_EXE\"" >> "$DESKF"
                        else
                            echo "Exec=lutris-wine \"$LU_EXE\"" >> "$DESKF"
                    fi
                else
                    echo "Exec=lutris-wine \"$LU_EXE\"" >> "$DESKF"
            fi
            sleep 0.3
            zenity --question --title "Creating shortcut" --text "Change advanced startup options for EXE?" --no-wrap &>/dev/null
            if [ $? -eq "0" ]
                then
                    sleep 0.3
                    SHRT_PARAM="$(echo -e "\nTERMINAL\n\nHOLD_TERMINAL\n\nLOG\n\nDEBUG\n\nUNSET_CMPSTR_SW\n\nNO_TRAY"| \
                    zenity --title "Creating shortcut" --text "Additional launch options:" --list --checklist --multiple --separator "\n" --column=1 --column=2 --hide-header --width=300 --height=500 2>/dev/null)"
                    if [ ! -z "$SHRT_PARAM" ]
                        then
                            (IFS=$'\n' ; for shrt_item in $SHRT_PARAM
                                do
                                    if [[ "$shrt_item" == "TERMINAL" ]]
                                        then
                                            sed -i 's/Exec=/Exec=TERMINAL=1  /g' "$DESKF"
                                    fi
                                    if [[ "$shrt_item" == "HOLD_TERMINAL" ]]
                                        then
                                            sed -i 's/Exec=/Exec=HOLD_TERMINAL=1 /g' "$DESKF"
                                    fi
                                    if [[ "$shrt_item" == "LOG" ]]
                                        then
                                            sed -i 's/Exec=/Exec=LOG=1 /g' "$DESKF"
                                    fi
                                    if [[ "$shrt_item" == "DEBUG" ]]
                                        then
                                            sed -i 's/\<TERMINAL=1\> //g' "$DESKF"
                                            sed -i 's/\<LOG=1\> //g' "$DESKF"
                                            sed -i 's/Exec=/Exec=DEBUG=1 /g' "$DESKF"
                                    fi
                                    if [[ "$shrt_item" == "UNSET_CMPSTR_SW" ]]
                                        then
                                            sed -i 's/Exec=/Exec=UNSET_CMPSTR_SW=1 /g' "$DESKF"
                                    fi
                                    if [[ "$shrt_item" == "NO_TRAY" ]]
                                        then
                                            sed -i 's/Exec=/Exec=NO_TRAY=1 /g' "$DESKF"
                                    fi
                            done)
                    fi
            fi
            echo "Type=Application" >> "$DESKF"
            echo "Categories=Lutris Wine App" >> "$DESKF"
            echo "StartupNotify=true" >> "$DESKF"
            echo "Path="$SHRT_PATH"" >> "$DESKF"
            echo "Icon="$LUPNG"" >> "$DESKF"
            chmod u+x "$DESKF"
            sleep 0.3
            echo -en "${GREEN}Creating ${RED}$(basename "$DESKF") ${GREEN}complete!\n$RESETCOLOR"
            zenity --question --title "Creating shortcut" --text "Shortcut [$(basename "$DESKF")] successfully created in the directory with the executable file.\nDo you want to add it to application menu?" --no-wrap &>/dev/null
            if [ $? -eq "0" ]
                then
                    if [ ! -d "$LU_APP" ]
                        then
                            mkdir -p "$LU_APP"
                    fi
                    cp -rf "$DESKF" ${LU_APP}/
                    update-desktop-database -q "${HOME}/.local/share/applications"
                    sleep 0.3
                    zenity --info --title "Creating shortcut" --text "Shortcut successfully added to application menu!" --no-wrap &>/dev/null
            fi
            zenity --question --title "Creating shortcut" --text "Do you want to add it to Lutris?" --no-wrap &>/dev/null
            if [ $? -eq "0" ]
                then
                    add_to_lutris
            fi
    fi
}

lu_debug() {
    if [[ ! -z "$DEBUG" && "$DEBUG" != 0 ]]
        then
            export LOG=1
            export TERMINAL=1
            lu_prerun
            UNSET_CMPSTR_SW=1
            #export VKD3D_LOG_FILE="$EXE_PATH/$(basename "$LU_EXE"|sed 's/.exe//')_vkd3d.log"
            #export VKBASALT_LOG_FILE="$EXE_PATH/$(basename "$LU_EXE"|sed 's/.exe//')_vkbasalt.log"
            export WINEDEBUG="fixme-all,err+loaddll,err+dll,err+file,err+reg"
            export DXVK_LOG_LEVEL="info"
            export DXVK_NVAPI_LOG_LEVEL="info"
            export DXVK_HUD="full"
            export VKD3D_DEBUG="warn"
            export WINE_MONO_TRACE="E:System.NotImplementedException"
            export VKBASALT_LOG_LEVEL="debug"
            export TMP_DEB="/tmp/${WINE_IN_USE}_$(date +'%Y-%m-%d_%T').debug"
            export PRINT_VARS="$(print_var "WINE_IN_USE" "WINEDIR" "WINE" "WINEARCH" "WINEPREFIX" "WIN_VER" "WINEDLLOVERRIDES" \
                "WINE_MONO_OVERRIDES" "EXE_PATH" "LU_EXE" "VKD3D_CONFIG" "LD_LIBRARY_PATH" "PATH" "WINEDEBUG" "DXVK_STATE_CACHE_PATH" \
                "VKD3D_DEBUG" "WINE_MONO_TRACE" "VKBASALT_LOG_LEVEL" "DXVK_LOG_LEVEL" "EXE_ARG" "PULSE_LATENCY_MSEC" \
                "LU_DIR" "LU_WINE_CONF" "GST_PLUGIN_SYSTEM_PATH_1_0" "WINE_GST_REGISTRY_DIR" "WINEESYNC" "VKBASALT_LOG_FILE" \
                "WINEFSYNC" "WINEFSYNC_FUTEX2" "WINE_FULLSCREEN_FSR" "WINE_FULLSCREEN_FSR_STRENGTH" "STAGING_SHARED_MEMORY" \
                "LOG_FILE" "WINE_LARGE_ADDRESS_AWARE" "terminal_app" "DXVK_NVAPIHACK" "RUN_MANGOHUD" "RUN_GAMEMODE" "VKD3D_LOG_FILE" \
                "VK_ICD_FILENAMES" "SDL_VIDEO_FULLSCREEN_DISPLAY" "DXVK_STATE_CACHE_PATH" "__GLX_VENDOR_LIBRARY_NAME" "__NV_PRIME_RENDER_OFFLOAD" \
                "DXVK_STATE_CACHE" "__GL_DXVK_OPTIMIZATIONS" "__GL_SHADER_DISK_CACHE_PATH" "__GL_SHADER_DISK_CACHE" "__GL_SHADER_DISK_CACHE_SIZE" \
                "MEDIACONV_AUDIO_DUMP_FILE" "MEDIACONV_AUDIO_TRANSCODED_FILE" "MEDIACONV_VIDEO_DUMP_FILE" "MEDIACONV_VIDEO_TRANSCODED_FILE")"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Date and time of start debug ] : $(date)" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ WINE version in LUTRIS ] : $WINE_IN_USE" >> "$TMP_DEB"
            [ -f "$WINEDIR/version" ] && cat "$WINEDIR/version" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Debug for program ] : $LU_EXE" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Operating system ] : $(lsb_release -d|sed 's/Description://g')" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ GLIBC version ] : $(ldd --version|grep -m1 ldd|awk '{print $NF}')" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Desktop Environment ] : $XDG_CURRENT_DESKTOP - $DESKTOP_SESSION" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Kernel ] : $(uname -r)" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ CPU ] :$(cat /proc/cpuinfo|grep "cpu cores"|sort -u|cut -d":" -f2)-physical $(cat /proc/cpuinfo| \
            grep "processor"|wc -l)-logical cores$(cat /proc/cpuinfo|grep "model name"|sort -u|cut -d":" -f2)" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Memory ] :" >> "$TMP_DEB"
            free -m >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            export DiskMP="$(mount|grep -w "on $(stat -c %m -- "$LU_EXE")")"
            echo "[ Disk info ] : $(echo $DiskMP|awk -F'type ' '{print $2}') " >> "$TMP_DEB"
            echo -en "$(df -h|head -1)\n$(df -h|grep "$(echo $DiskMP|awk '{print$1}')")\n" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo "[ Graphic cards and drivers ] :" >> "$TMP_DEB"
            echo $(lspci|grep -iF VGA) >> "$TMP_DEB"
            if [ ! -x "$(which glxinfo 2>/dev/null)" ]
                then
                    echo "[!]glxinfo not found[!]"  >> "$TMP_DEB"
                else
                    glxinfo -B >> "$TMP_DEB"
            fi
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            if [ ! -x "$(which vulkaninfo 2>/dev/null)" ]
                then
                    echo "[!]vulkaninfo not found[!]"  >> "$TMP_DEB"
                else
                    echo "[ Vulkan info device name ] : $(vulkaninfo|grep deviceName|cut -d"=" -f2)" >> "$TMP_DEB"
            fi
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            if [ ! -x "$(which vkcube 2>/dev/null)" ]
                then
                    echo "[!]vkcube not found[!]"  >> "$TMP_DEB"
                else
                    vkcube --c 50
                    if [ $? -eq 0 ]
                        then
                            echo "[ Vulkan cube test ] : Passed successfully!" >> "$TMP_DEB"
                        else
                            echo "[!] Vkcube test completed with error [!]" >> "$TMP_DEB"
                    fi
            fi
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            if [ ! -x "$(which gamemoderun 2>/dev/null)" ]
                then
                    echo "[!]gamemod not found[!]"  >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ -f "$WTRX_LOG" ]
                then
                    echo "[ Winetricks log ] :" >> "$TMP_DEB"
                    cat "$WTRX_LOG" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [[ ! -z "$dxvk" && "$dxvk" == true ]]
                then
                    echo "[ DXVK ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ DXVK ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ ! -z "$dxvk_version" ]
                then
                    echo "[ DXVK version ] : $dxvk_version" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [[ ! -z "$vkd3d" && "$vkd3d" == true ]]
                then
                    echo "[ VKD3D ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ VKD3D ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ ! -z "$vkd3d_version" ]
                then
                    echo "[ VKD3D version ] : $vkd3d_version" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [[ ! -z "$dxvk_nvapi" && "$dxvk_nvapi" == true ]]
                then
                    echo "[ DXVK-NVAPI ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ DXVK-NVAPI ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ ! -z "$dxvk_nvapi_version" ]
                then
                    echo "[ DXVK-NVAPI version ] : $dxvk_nvapi_version" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [[ ! -z "$d3d_extras" && "$d3d_extras" == true ]]
                then
                    echo "[ D3D EXTRAS ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ D3D EXTRAS ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ ! -z "$d3d_extras_version" ]
                then
                    echo "[ D3D EXTRAS version ] : $d3d_extras_version" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [[ ! -z "$dgvoodoo2" && "$dgvoodoo2" == true ]]
                then
                    echo "[ DGVOODOO2 ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ DGVOODOO2 ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [ ! -z "$dgvoodoo2_version" ]
                then
                    echo "[ DGVOODOO2 version ] : $dgvoodoo2_version" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            if [[ ! -z "$battleye" && "$battleye" == true ]]
                then
                    echo "[ PROTON BATTLEYE ] : ON" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
                else
                    echo "[ PROTON BATTLEYE ] : OFF" >> "$TMP_DEB"
                    echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            fi
            echo "[ Network status ] : $(ping -4 -q -c1 -W0.5 google.com &>/dev/null && echo ONLINE || echo OFFLINE)" >> "$TMP_DEB"
            echo "---------------------------------------------------------------------------------------" >> "$TMP_DEB"
            echo " -------------------------------------------" >> "$TMP_DEB"
            echo "|[             Starting logging            ]|" >> "$TMP_DEB"
            echo " -------------------------------------------" >> "$TMP_DEB"
        else
            lu_prerun
            export WINEDEBUG="-all"
            export DXVK_LOG_LEVEL="none"
            export VKD3D_DEBUG="none"
            export DXVK_LOG_PATH="none"
            export VKBASALT_LOG_LEVEL="error"
            wdllover_upd "winedbg.exe="
    fi
}

clear_log() {
    sed -i '/gstreamer-1.0/d' "$LOG_FILE"
    sed -i '/winemenubuilder.exe/d' "$LOG_FILE"
    sed -i '/.fx$/d' "$LOG_FILE"
    sed -i '/HACK_does_openvr_work/d' "$LOG_FILE"
    sed -i '/dlopen failed - libgamemode.so/d' "$LOG_FILE"
    sed -i '/Uploading is disabled/d' "$LOG_FILE"
    sed -i '/gamemodeauto: /d' "$LOG_FILE"
    sed -i '/\[MANGOHUD\] \[info\] \[config.cpp:114\] skipping config:/d' "$LOG_FILE"
}

dis_debug_msg() {
    if [[ ! -z "$DEBUG" && "$DEBUG" != 0 ]]
        then
            print_error "Unable to start DEBUG for this file!"
            zenity --error --text "Unable to start DEBUG for this file!" --no-wrap &>/dev/null
            exit 1
    fi
}

dis_cmd_msg() {
    if [[ ! -z "$TERMINAL" && "$TERMINAL" != 0 ]]
        then
            print_error "Unable to start TERMINAL for this file!"
            zenity --error --text "Unable to start TERMINAL for this file!" --no-wrap &>/dev/null
            exit 1
    fi
}

expluwineconf() {
    export $(yaml_parser "$LU_WINE_CONF"|sed "s/wine~//g"|sed "s/system~//g"|sed "s/env~//g")
    export WINE_IN_USE="$version"
    export WINEDIR="$LU_DIR/runners/wine/$WINE_IN_USE"
    export WINE="$WINEDIR/bin/wine"
}

setwine() {
    if [[ ! -d "$WINEDIR" && "$(ls -1 "$LU_WINE_DIR"|sed 's/^ *//g'|wc -l)" != 1 ]]
        then
            print_error "Default WINE not selected!"
            SETWINE="$(echo -e "\n$(echo "$(ls "$LU_WINE_DIR")"|sed ':a;N;$!ba;s/\n/\n\n/g')"| \
            zenity --title "Wine Manager" --text "Select default WINE:" --list --radiolist --separator "\n" --column=1 --column=2 --hide-header --width=300 --height=500  2>/dev/null)"
            if [ ! -z "$SETWINE" ]
                then
                    sed -i 's/^  version: .*/  version: '$SETWINE'/g' "$LU_WINE_CONF"
                    print_info "WINE $SETWINE select as default!"
                    expluwineconf
                else
                    setwine
            fi
    elif [[ ! -d "$WINEDIR" && "$(ls -1 "$LU_WINE_DIR"|sed 's/^ *//g'|wc -l)" != 1 ]] && [[ "$PGE_INST" == 1 || "$PPW_INST" == 1 || "$PK4_INST" == 1 ]]
        then
            print_error "Default WINE not selected!"
            SETWINE="$(echo -e "\n$(echo "$(ls "$LU_WINE_DIR")"|sed ':a;N;$!ba;s/\n/\n\n/g')"| \
            zenity --title "Wine Manager" --text "Select default WINE:" --list --radiolist --separator "\n" --column=1 --column=2 --hide-header --width=300 --height=500  2>/dev/null)"
            if [ ! -z "$SETWINE" ]
                then
                    sed -i 's/^  version: .*/  version: '$SETWINE'/g' "$LU_WINE_CONF"
                    print_info "WINE $SETWINE select as default!"
                    expluwineconf
                else
                    setwine
            fi
    elif [[ ! -d "$WINEDIR" && "$(ls -1 "$LU_WINE_DIR"|sed 's/^ *//g'|wc -l)" == 1 ]] && [[ "$PGE_INST" == 1 || "$PPW_INST" == 1 || "$PK4_INST" == 1 ]]
        then
            export SETWINE="$(ls -1 "$LU_WINE_DIR"|head -1)"
            sed -i 's/^  version: .*/  version: '$SETWINE'/g' "$LU_WINE_CONF"
            print_info "WINE $SETWINE select as default!"
            expluwineconf
            zenity --info --title "Wine Manager" --text "WINE $SETWINE select as default!" --no-wrap &>/dev/null
    elif [[ "$PGE_INST" == 1 || "$PPW_INST" == 1 || "$PK4_INST" == 1 || "$SETWINE" == 1 ]]
        then
            print_info "Selecting default WINE..."
            SETWINE="$(echo -e "\n$(echo "$(ls "$LU_WINE_DIR")"|sed ':a;N;$!ba;s/\n/\n\n/g')"| \
            zenity --title "Wine Manager" --text "Select default WINE:" --list --radiolist --separator "\n" --column=1 --column=2 --hide-header --width=300 --height=500  2>/dev/null)"
            if [ ! -z "$SETWINE" ]
                then
                    sed -i 's/^  version: .*/  version: '$SETWINE'/g' "$LU_WINE_CONF"
                    print_info "WINE $SETWINE select as default!"
                    expluwineconf
            fi
    elif [[ ! -d "$WINEDIR" && "$(ls -1 "$LU_WINE_DIR"|sed 's/^ *//g'|wc -l)" == 1 ]]
        then
            export SETWINE="$(ls -1 "$LU_WINE_DIR"|head -1)"
            sed -i 's/^  version: .*/  version: '$SETWINE'/g' "$LU_WINE_CONF"
            print_info "WINE $SETWINE select as default!"
            expluwineconf
            zenity --info --title "Wine Manager" --text "WINE $SETWINE select as default!" --no-wrap &>/dev/null
    fi
}

lu_prerun() {
    if [ ! -z "$LU_EXE" ]
        then
            if [ -z "$EXE_PATH" ]
                then
                    export EXE_PATH="$(cd "$(dirname "$LU_EXE")" >/dev/null 2>&1 && pwd)"
                    export EXE_DIR="$(grep -o '[^/]*$' <<< "$EXE_PATH")"
                    cd "$EXE_PATH"
                    if [ "$LOG" == 1 ]
                        then
                            export LOG_FILE="$EXE_PATH/$(basename "$LU_EXE")_$(date +"%Y-%m-%d_%T").log"
                    fi
                else
                    cd "$EXE_PATH"
                    if [ "$LOG" == 1 ]
                        then
                            export LOG_FILE="$EXE_PATH/$(basename "$LU_EXE")_$(date +"%Y-%m-%d_%T").log"
                    fi
            fi
    elif [ ! -z "$LU_SHELL_EXE" ]
        then
            if [ -z "$LU_SHELL_EXE_PTH" ]
                then
                    export LU_SHELL_EXE_PTH="$(cd "$(dirname "$LU_SHELL_EXE")" >/dev/null 2>&1 && pwd)"
                    cd "$LU_SHELL_EXE_PTH"
                    if [ "$LOG" == 1 ]
                        then
                            export LOG_FILE="$LU_SHELL_EXE_PTH/$(basename "$LU_SHELL_EXE")_$(date +"%Y-%m-%d_%T").log"
                    fi
                else
                    cd "$LU_SHELL_EXE_PTH"
                    if [ "$LOG" == 1 ]
                        then
                            export LOG_FILE="$LU_SHELL_EXE_PTH/$(basename "$LU_SHELL_EXE")_$(date +"%Y-%m-%d_%T").log"
                    fi
            fi
    elif [ ! -z "$LU_PTH" ]
        then
            cd "$LU_PTH"
    elif [ ! -z "$LU_SHELL_PTH" ]
        then
            cd "$LU_SHELL_PTH"
    else
        cd "$WINEPREFIX/drive_c"
    fi
}

lu_run() {
    lu_tray
    check_mono_gecko
    if [[ ! -z "$HOLD_TERMINAL" && "$HOLD_TERMINAL" != 0 ]]
        then
            export term_hold="--hold"
    fi
    lu_debug 2>/dev/null
    compositor_sw 2>/dev/null
    if [[ "$LOG" == 1 && "$TERMINAL" == 1 ]]
        then
            if [ ! -z "$LU_SHELL_EXE" ]
                then
                    $terminal_app $term_hold -e $SHELL -c "echo -en '$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n\n'|& tee -a '$LOG_FILE' ; '$@'|& tee -a '$LOG_FILE'"
                    clear_log  2>/dev/null
                    xdg-open "$LOG_FILE" 2>/dev/null
            elif [ ! -z "$LU_SHELL_PTH" ]
                then
                    $terminal_app $term_hold -e $SHELL
            else
                $terminal_app $term_hold -e $SHELL -c "echo -en '$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n\n'|& tee -a '$LOG_FILE' ; $RUN_GAMEMODE $RUN_MANGOHUD '$WINE' '$@' $EXE_ARG|& tee -a '$LOG_FILE'"
                compositor_sw 2>/dev/null
                clear_log  2>/dev/null
                xdg-open "$LOG_FILE" 2>/dev/null
            fi
    elif [ "$LOG" == 1 ]
        then
            echo -en "$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n"
            $RUN_GAMEMODE $RUN_MANGOHUD "$WINE" "$@" $EXE_ARG|& tee -a "$LOG_FILE"
            compositor_sw 2>/dev/null
            clear_log  2>/dev/null
            xdg-open "$LOG_FILE" 2>/dev/null
    elif [ "$TERMINAL" == 1 ]
        then
            if [ ! -z "$LU_SHELL_EXE" ]
                then
                    if [ "$LOG" == 1 ]
                        then
                            $terminal_app $term_hold -e $SHELL -c "echo -en '$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n\n'|& tee -a '$LOG_FILE' ; '$@'|& tee -a '$LOG_FILE'"
                            clear_log  2>/dev/null
                            xdg-open "$LOG_FILE" 2>/dev/null
                        else
                            $terminal_app $term_hold -e $SHELL -c "$@"
                    fi
            elif [ ! -z "$LU_SHELL_PTH" ]
                then
                    $terminal_app $term_hold -e $SHELL
            else
                if [ ! -z "$LU_LNK" ]
                    then
                        export TMP_OUT="/tmp/${WINE_IN_USE}_$(date +'%Y-%m-%d_%T').out"
                        $terminal_app $term_hold -e $SHELL -c "echo -en '$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n' ; $RUN_GAMEMODE $RUN_MANGOHUD '$WINE' '$@' $EXE_ARG|& tee -a '$TMP_OUT'"
                    else
                        $terminal_app $term_hold -e $SHELL -c "echo -en '$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n' ; $RUN_GAMEMODE $RUN_MANGOHUD '$WINE' '$@' $EXE_ARG"
                fi
                compositor_sw 2>/dev/null
            fi
    else
        echo -en "$(cat "$TMP_DEB" 2>/dev/null)\n$PRINT_VARS\n"
        $RUN_GAMEMODE $RUN_MANGOHUD "$WINE" "$@" $EXE_ARG
        compositor_sw 2>/dev/null
    fi
    rm -rf "$TMP_DEB" "$TMP_OUT" /tmp/*$BASHPID
    if wine_is_death && shell_is_death
        then
            check_tray
            check_wine_pids
            check_luwine_sh_pid
            if [[ -z "$WINE_PIDS" && -z "$FORCE_TRAY" && -z "$LW_SH_PID" && ! -z "$TRAY_PID" ]]
                then
                    lu_killtray
            fi
    fi
}

lu_prestart() {
    export LU_EXE="$(readlink -f "$LU_START")"
    export LU_MSI="$(basename "$LU_EXE"|grep -iF ".msi")"
    export LU_BAT="$(basename "$LU_EXE"|grep -iF ".bat")"
    export LU_REG="$(basename "$LU_EXE"|grep -iF ".reg")"
    export LU_LNK="$(basename "$LU_EXE"|grep -iF ".lnk")"
    if [[ ! -z "$LU_MSI" && ! -z "$(file "$LU_EXE"|grep "Os: Windows"|grep -o "MSI Installer")" ]]
        then
            dis_debug_msg
            UNSET_CMPSTR_SW=1
            lu_run "$LU_EXE"
    elif [ ! -z "$LU_BAT" ]
        then
            dis_debug_msg
            TERMINAL=1
            UNSET_CMPSTR_SW=1
            lu_run "$LU_EXE"
    elif [ ! -z "$LU_REG" ]
        then
            dis_debug_msg
            dis_cmd_msg
            reg_edit "$LU_EXE"
    else
        if [[ ! -z "$(file "$LU_EXE"|grep "for MS Windows"|grep -o "executable")" || ! -z "$(file "$LU_EXE"|grep "MS Windows"|grep -o "shortcut")" ]]
            then
                lu_run "$LU_EXE"
            else
                print_error "Unable to start Lutris Wine for this file!"
                zenity --error --text "Unable to start Lutris Wine for this file!" --no-wrap &>/dev/null
        fi
    fi
}

lu_start() {
    if [ -f "$1" ]
        then
            LU_START="$1"
            if [ -z "$EXE_ARG" ]
                then
                    export EXE_ARG="${*:2}"
            fi
    elif [ -f "$2" ]
        then
            LU_START="$2"
            if [ -z "$EXE_ARG" ]
                then
                    export EXE_ARG="${*:3}"
            fi
    fi
    if [ ! -z "$LU_START" ]
        then
            lu_prestart
        else
            if [[ ! -z "$DEBUG" && "$DEBUG" != 0 ]]
                then
                    export DEBUG_EXE="$(zenity --title "Select an application to start DEBUG" --file-selection --file-filter="*.exe")"
                    if [ -f "$DEBUG_EXE" ]
                        then
                            export DEBUG_FL="$(readlink -f "$DEBUG_EXE")"
                            if [ ! -z "$(file "$DEBUG_FL"|grep "for MS Windows"|grep -o "executable")" ]
                                then
                                    export LU_EXE="$DEBUG_FL"
                                    lu_run "$LU_EXE"
                                else
                                    print_error "Unable to start DEBUG for this file!"
                                    zenity --error --text "Unable to start DEBUG for this file!" --no-wrap &>/dev/null
                            fi
                    elif [ -d "$DEBUG_EXE" ]
                        then
                            print_error "Specify the executable file to start DEBUG!"
                            zenity --error --text "Specify the executable file to start DEBUG!" --no-wrap &>/dev/null
                            lu_start
                    fi
                else
                    export LU_START="$(zenity --title "Select an application to run in Lutris Wine" --file-selection --file-filter="*.exe *.lnk *.bat *.msi *.reg")"
                    if [ -f "$LU_START" ]
                        then
                            lu_prestart
                    elif [ -d "$LU_START" ]
                        then
                            print_error "Specify the executable file to start Lutris Wine!"
                            zenity --error --text "Specify the executable file to start Lutris Wine!" --no-wrap &>/dev/null
                            unset LU_START
                            lu_start
                    fi
            fi
    fi
}

lu_cmd() {
    UNSET_CMPSTR_SW=1
    TERMINAL=1
    export DEBUG=0
    if [ -f "$2" ]
       then
           lu_start "$@"
    elif [ -d "$2" ]
       then
           export LU_PTH="$(readlink -f "$2")"
           lu_run cmd
    else
       lu_run cmd
    fi
}

lu_shell() {
    UNSET_CMPSTR_SW=1
    TERMINAL=1
    export DEBUG=0
    if [ -f "$2" ]
        then
            if [[ ! -z "$(file "$2"|grep "script"|grep -o "executable")" || ! -z "$(file "$2"|grep "ELF"|grep -o "executable")" ]]
                then
                    export LU_SHELL_EXE="$(readlink -f "$2")"
                    lu_run "$LU_SHELL_EXE"
                else
                    print_error "Unable to start Lutris Wine for this file!"
                    zenity --error --text "Unable to start Lutris Wine for this file!" --no-wrap &>/dev/null
            fi
        elif [ -d "$2" ]
            then
                export LU_SHELL_PTH="$(readlink -f "$2")"
                lu_run
        else
            export LU_SHELL_PTH="$HOME"
            lu_run
    fi
}

lu_regedit() {
    UNSET_CMPSTR_SW=1
    export DEBUG=0
    unset EXE_ARG
    lu_run regedit
}

lu_control() {
    UNSET_CMPSTR_SW=1
    export DEBUG=0
    unset EXE_ARG
    lu_run control
}

lu_winecfg() {
    UNSET_CMPSTR_SW=1
    export DEBUG=0
    unset EXE_ARG
    lu_run winecfg
}

lu_taskmgr() {
    UNSET_CMPSTR_SW=1
    export DEBUG=0
    unset EXE_ARG
    lu_run taskmgr
}

lu_uninstaller() {
    UNSET_CMPSTR_SW=1
    export DEBUG=0
    unset EXE_ARG
    lu_run uninstaller
}

winetricks() {
    if [[ ! -z "$system_winetricks" && "$system_winetricks" == true ]]
        then
            if [ ! -z "$(which winetricks 2>/dev/null)" ]
                then
                    print_info "Using SYSTEM winetricks!"
                    "$(which winetricks)" "$@"
                else
                    print_error "Winetricks not found in you system!"
                    print_info "LUTRIS winetricks!"
                    update_winetricks
                    "$WTRX_DIR/winetricks" "$@"
            fi
        else
            print_info "Using LUTRIS winetricks!"
            update_winetricks
            "$WTRX_DIR/winetricks" "$@"
    fi
}

lu_openpfx() {
    xdg-open "$WINEPREFIX/drive_c/" 2>/dev/null
}

lu_exit() {
    check_tray; check_wine_pids; check_exes; check_luwine_sh_pid
    if [[ ! -z "$WINE_PIDS" || ! -z "$EXE_PIDS" || ! -z "$TRAY_PID" || ! -z "$LW_SH_PID" ]]
        then
            FORCE_EXIT=1
            lu_killtray
            lu_killshell
            lu_killexe
            lu_killwine
            print_info "Lutris Wine successfully killed!"
            zenity --info --title "Lutris Wine Killer" --text "Lutris Wine successfully killed!" --no-wrap &>/dev/null &
            sleep 2
            pkill lutris-wine
        else
            print_error "Lutris Wine not runing!"
            zenity --error --title "Lutris Wine Killer" --text "Lutris Wine not runing!" --no-wrap &>/dev/null &
    fi
}

lu_killshell() {
    check_luwine_sh_pid
    if [ ! -z "$FORCE_EXIT" ]
        then
            while true
                do
                    check_luwine_sh_pid
                    if  [ ! -z "$LW_SH_PID" ]
                        then
                            kill -9 "$LW_SH_PID" 2>/dev/null
                        else
                            break
                    fi
            done
    elif [ ! -z "$LW_SH_PID" ]
        then
            while true
                do
                    check_luwine_sh_pid
                    if  [ ! -z "$LW_SH_PID" ]
                        then
                            kill -9 "$LW_SH_PID" 2>/dev/null
                        else
                            break
                    fi
            done
            print_info "Lutris Wine SHELL processes successfully killed!"
            zenity --info --title "SHELL Killer" --text "Lutris Wine SHELL processes successfully killed!" --no-wrap &>/dev/null &
    else
        print_error "Lutris Wine SHELL processes not found!"
        zenity --error --title "SHELL Killer" --text "Lutris Wine SHELL processes not found!" --no-wrap &>/dev/null &
    fi
}

lu_killtray() {
    check_tray
    check_exes
    check_wine_pids
    check_luwine_sh_pid
    if [ ! -z "$FORCE_EXIT" ]
        then
            kill -9 "$TRAY_PID" 2>/dev/null
    elif [ ! -z "$TRAY_PID" ]
        then
            if [[ ! -z "$EXE_PIDS" || ! -z "$WINE_PIDS" || ! -z "$LW_SH_PID" ]]
                then
                    zenity --question --title "Tray Killer" --text "Incomplete processes found! \nClosing the tray will likely kill them or cause operational errors.\nAre you sure you want to close the tray?" --no-wrap &>/dev/null
                    if [ $? -eq "0" ]
                        then
                            kill -9 "$TRAY_PID" 2>/dev/null
                            pkill lutris-wine
                    fi
                else
                    kill -9 "$TRAY_PID" 2>/dev/null
                    pkill lutris-wine
            fi
    else
        print_error "Lutris Wine not runing in tray!"
        zenity --error --title "Tray Killer" --text "Lutris Wine not runing in tray!" --no-wrap &>/dev/null &
    fi
}

lu_killwine() {
    check_wine_pids
    if [ ! -z "$FORCE_EXIT" ]
        then
            kill -9 $WINE_PIDS 2>/dev/null
    elif [[ ! -z "$WINE_PIDS" ]]
        then
            kill -9 $WINE_PIDS 2>/dev/null
            print_info "Wine processes successfully killed!"
            zenity --info --title "Wine Killer" --text "Wine processes successfully killed!" --no-wrap &>/dev/null &
    else
        print_error "Wine processes not found!"
        zenity --error --title "Wine Killer" --text "Wine processes not found!" --no-wrap &>/dev/null &
    fi
}

lu_killexe() {
    check_exes
    if [ ! -z "$FORCE_EXIT" ]
        then
            kill -9 $EXE_PIDS 2>/dev/null
    elif [ ! -z "$EXE_PIDS" ]
        then
            kill -9 $EXE_PIDS 2>/dev/null
            print_info "Wine EXE processes successfully killed!"
            zenity --info --title "EXE Killer" --text "Wine EXE processes successfully killed!" --no-wrap &>/dev/null &
    else
        print_error "Wine EXE processes not found!"
        zenity --error --title "EXE Killer" --text "Wine EXE processes not found!" --no-wrap &>/dev/null &
    fi
}

lu_clearpfx() {
    zenity --question --title "Clearing prefix" --text "Do you really want to clear prefix ["$WINEPREFIX"] ?" --no-wrap &>/dev/null
    if [ $? -eq "0" ]
        then
            rm -rfv "$WINEPREFIX/registry_*"
            rm -rfv "$WINEPREFIX/*.reg"
            rm -rfv "$WINEPREFIX/*.log"
            rm -rfv "$WINEPREFIX/.update-timestamp"
            rm -rfv "$WINEPREFIX/drive_c/.windows-serial"
            rm -rfv "$WINEPREFIX/drive_c/windows/"
            rm -rfv "$WINEPREFIX/drive_c/ProgramData/Setup"
            rm -rfv "$WINEPREFIX/drive_c/ProgramData/Windows"
            rm -rfv "$WINEPREFIX/drive_c/ProgramData/WindowsTask"
            rm -rfv "$WINEPREFIX/drive_c/ProgramData/Package Cache"
            rm -rfv "$WINEPREFIX/drive_c/users/Public/Local Settings/Application Data/Microsoft"
            rm -rfv "$WINEPREFIX/drive_c/users/Public/Local Settings/Application Data/Temp"
            rm -rfv "$WINEPREFIX/drive_c/users/Public/Local Settings/Temporary Internet Files"
            rm -rfv "$WINEPREFIX/drive_c/users/Public/Application Data/Microsoft"
            rm -rfv "$WINEPREFIX/drive_c/users/Public/Application Data/wine_gecko"
            rm -rfv "$WINEPREFIX/drive_c/users/Public/Temp"
            rm -rfv "$WINEPREFIX/drive_c/users/user/Local Settings/Application Data/Microsoft"
            rm -rfv "$WINEPREFIX/drive_c/users/user/Local Settings/Application Data/Temp"
            rm -rfv "$WINEPREFIX/drive_c/users/user/Local Settings/Temporary Internet Files"
            rm -rfv "$WINEPREFIX/drive_c/users/user/Application Data/Microsoft"
            rm -rfv "$WINEPREFIX/drive_c/users/user/Application Data/wine_gecko"
            rm -rfv "$WINEPREFIX/drive_c/users/user/Temp"
            rm -rfv "$WINEPREFIX/drive_c/Program Files/Internet Explorer"
            rm -rfv "$WINEPREFIX/drive_c/Program Files/Windows Media Player"
            rm -rfv "$WINEPREFIX/drive_c/Program Files/Windows NT"
            rm -rfv "$WINEPREFIX/drive_c/Program Files/Common Files"
            rm -rfv "$WINEPREFIX/drive_c/Program Files (x86)/Internet Explorer"
            rm -rfv "$WINEPREFIX/drive_c/Program Files (x86)/Common Files"
            rm -rfv "$WINEPREFIX/drive_c/Program Files (x86)/Windows Media Player"
            rm -rfv "$WINEPREFIX/drive_c/Program Files (x86)/Windows NT"
            rm -rfv "$__GL_SHADER_DISK_CACHE_PATH"/*
            rm -rfv "$DXVK_STATE_CACHE_PATH"/*
            rm -rfv "$WINE_GST_REGISTRY_DIR"/*
            rm -rfv "$HOME/.cache/mesa_shader_cache/*"
            print_info "Prefix cleared successfully!"
            zenity --info --title "Clearing prefix" --text "Prefix "$WINEPREFIX" cleared successfully!" --no-wrap &>/dev/null
    fi
}

lu_rmapp() {
    if [[ -d "$LU_APP" && ! -z "$(ls -1 "$LU_APP"|head -1)" ]]
        then
            SHRT_RM="$(echo -e "\nALL SHORTCUTS\n\n$(echo "$(ls "$LU_APP")"|sed ':a;N;$!ba;s/\n/\n\n/g')"| \
            zenity --title "Removing shortcuts" --text "Select shortcuts to remove:" --list --checklist --multiple --separator "\n" --column=1 --column=2 --hide-header --width=300 --height=500  2>/dev/null)"
            if [ ! -z "$SHRT_RM" ]
                then
                    (IFS=$'\n' ; for shrt_rm in $SHRT_RM
                        do
                            if [[ "$shrt_rm" == "ALL SHORTCUTS" ]]
                                then
                                    sleep 0.3
                                    zenity --question --title "Removing shortcuts" --text "Are you sure you want to remove all Lutris Wine applications from menu?" --no-wrap &>/dev/null
                                    if [ $? -eq "0" ]
                                        then
                                            rm -rfv "$LU_APP"
                                    fi
                                    break
                                else
                                    rm -rfv "$LU_APP"/"$shrt_rm"
                            fi
                    done)
                    update-desktop-database -q "${HOME}/.local/share/applications"
                    sleep 0.3
                    zenity --info --title "Removing shortcuts" --text "Lutris Wine applications deleted from menu!" --no-wrap &>/dev/null
            fi
        else
            zenity --error --title "Removing shortcuts" --text "Lutris Wine applications not found in menu!" --no-wrap &>/dev/null
    fi
}

lu_shortcut() {
    if [ -f "$2" ]
        then
            export SHRT_FL="$(readlink -f "$2")"
            if [ ! -z "$(file "$SHRT_FL"|grep "for MS Windows"|grep -o "executable (GUI)")" ]
                then
                    export LU_EXE="$SHRT_FL"
                    if [[ ! -z "$ADDTOLU" && "$ADDTOLU" != 0 ]]
                        then
                            add_to_lutris "$LU_EXE"
                        else
                            create_shortcut "$LU_EXE"
                    fi
                else
                    print_error "Unable to create shortcut for this file!"
                    zenity --error --text "Unable to create shortcut for this file!" --no-wrap &>/dev/null
            fi
        else
            SHRT_EXE="$(zenity --file-selection --file-filter="*.exe")"
            if [ -f "$SHRT_EXE" ]
                then
                    export SHRT_FL="$(readlink -f "$SHRT_EXE")"
                    if [ ! -z "$(file "$SHRT_FL"|grep "for MS Windows"|grep -o "executable (GUI)")" ]
                        then
                            export LU_EXE="$SHRT_FL"
                            if [[ ! -z "$ADDTOLU" && "$ADDTOLU" != 0 ]]
                                then
                                    add_to_lutris "$LU_EXE"
                                else
                                    create_shortcut "$LU_EXE"
                            fi
                        else
                            print_error "Unable to create shortcut for this file!"
                            zenity --error --text "Unable to create shortcut for this file!" --no-wrap &>/dev/null
                    fi
            elif [ -d "$SHRT_EXE" ]
                then
                    print_error "Specify the executable file to create shortcut!"
                    zenity --error --text "Specify the executable file to create shortcut!" --no-wrap &>/dev/null
            fi
    fi
}

lu_explorer() {
    UNSET_CMPSTR_SW=1
    unset EXE_ARG
    export DEBUG=0
    lu_run explorer
}

lu_help() {
    echo -e "
        ${GREEN}Lutris Wine ${RED}v${LW_VERSION} ${GREEN}by VHSgunzo
            ${RED}Usage:
            $RED┌──[$GREEN$USER$YELLOW@$BLUE`uname -a|awk '{print$2}'`$RED]─[$GREEN$PWD$RED]
            $RED└──╼ \$$GREEN lutris-wine $BLUE{lutris-wine argument} ${RED}blabla.exe $BLUE{exe arguments}

            ${RED}-explorer $GREEN          Wine Explorer
            ${RED}-cmd $GREEN               Open CMD or open file in CMD
            ${RED}-shell $GREEN             Open SHELL or open file in SHELL
            ${RED}-regedit $GREEN           Registry editor
            ${RED}-control $GREEN           Control Panel
            ${RED}-winecfg $GREEN           Wine settings
            ${RED}-winemgr $GREEN           Wine manager
            ${RED}-setwine $GREEN           Set default WINE
            ${RED}-taskmgr $GREEN           Task manager
            ${RED}-themesmgr $GREEN         Themes manager
            ${RED}-uninstaller $GREEN       Add/Remove Programs
            ${RED}-winetricks $GREEN        Winetricks
            ${RED}-openpfx $GREEN           Open drive C:
            ${RED}-killwine $GREEN          Kill Wine processes
            ${RED}-killtray $GREEN          Kill Lutris Wine tray
            ${RED}-killexe $GREEN           Kill Lutris Wine launch EXE
            ${RED}-killshell $GREEN         Kill Lutris Wine SHELL
            ${RED}-exit $GREEN              Lutris Wine Force Exit
            ${RED}-clearpfx $GREEN          Clear prefix
            ${RED}-rmapp $GREEN             Remove Lutris Wine shortcuts from menu
            ${RED}-shortcut $GREEN          Create shortcut
            ${RED}-addtolu $GREEN           Add to Lutris
            ${RED}-debug $GREEN             DEBUG
            ${RED}-tray {noclose}$GREEN     Open Lutris Wine in tray
            ${RED}-help $GREEN              Show this usage info
            ${RED}-version $GREEN           Show version info
        $RESETCOLOR" >&2
        zenity --info --title "Lutris Wine usage info" --text "┌──[$USER@`uname -a|awk '{print$2}'`]─[$PWD]\n└──╼ \$ lutris-wine {lutris-wine argument} blabla.exe {exe arguments} \n\n \
        -explorer                 Wine Explorer\n \
        -cmd                          Open CMD or open file in CMD\n \
        -shell                         Open SHELL or open file in SHELL\n \
        -regedit                    Registry editor\n \
        -control                     Control Panel\n \
        -winecfg                   Wine settings\n \
        -winemgr                 Wine manager\n \
        -setwine                   Set default Wine\n \
        -taskmgr                  Task Manager\n \
        -themesmgr           Themes Manager\n \
        -uninstaller              Add/Remove Programs\n \
        -winetricks               Winetricks\n \
        -openpfx                  Open drive C:\n \
        -killwine                    Kill Wine processes\n \
        -killtray                     Kill Lutris Wine tray\n \
        -killexe                      Kill Lutris Wine launch EXE\n \
        -killshell                    Kill Lutris Wine SHELL\n \
        -exit                           Lutris Wine Force Exit\n \
        -clearpfx                  Clear prefix\n \
        -rmapp                     Remove Lutris Wine shortcuts from menu\n \
        -shortcut                  Create shortcut\n \
        -addtolu                   Add to Lutris\n \
        -debug                      DEBUG\n \
        -tray {noclose}       Open Lutris Wine in tray\n \
        -help                          Show this usage info\n \
        -version                    Show version info\n\n \
        Lutris Wine v${LW_VERSION} by VHSgunzo \
        " --no-wrap &>/dev/null &
}

lu_version() {
    echo -e "${GREEN}Lutris Wine ${RED}v${LW_VERSION} ${GREEN}by VHSgunzo$RESETCOLOR"
    if [ ! -z "$version" ]
        then
            export WINE_VER="[ WINE ]       : $version\n"
            echo -en "$WINE_VER"
    fi
    if [ ! -z "$dxvk_version" ]
        then
            export DXVK_VER="[ DXVK ]       : $dxvk_version\n"
            echo -en "$DXVK_VER"
    fi
    if [ ! -z "$vkd3d_version" ]
        then
            export VKD3D_VER="[ VKD3D ]      : $vkd3d_version\n"
            echo -en "$VKD3D_VER"
    fi
    if [ ! -z "$dxvk_nvapi_version" ]
        then
            export DXVK_NVAPI_VER="[ DXVK-NVAPI ] : $dxvk_nvapi_version\n"
            echo -en "$DXVK_NVAPI_VER"
    fi
    if [ ! -z "$d3d_extras_version" ]
        then
            export D3DEXTRAS_VER="[ D3D EXTRAS ] : $d3d_extras_version\n"
            echo -en "$D3DEXTRAS_VER"
    fi
    if [ ! -z "$dgvoodoo2_version" ]
        then
            export DGVOODOO2_VER="[ DGVOODOO2 ]  : $dgvoodoo2_version\n"
            echo -en "$DGVOODOO2_VER"
    fi
    zenity --info --title "Version info" --text "Lutris Wine v${LW_VERSION} by VHSgunzo\n\n${WINE_VER}${DXVK_VER}${VKD3D_VER}${DXVK_NVAPI_VER}${D3DEXTRAS_VER}${DGVOODOO2_VER}" --no-wrap &>/dev/null &
}

lu_tray() {
    check_tray
    if [[ -z "$TRAY_PID" && "$NO_TRAY" != 1 ]]
        then
            yad --notification --no-middle --text="Lutris Wine" \
                --window-icon="/usr/share/lutris/media/default_icon.png" \
                --image="/usr/share/lutris/media/default_icon.png" \
                --command="$BASH -c lutris-wine" \
                --tooltip="Lutris Wine" \
                --menu="| \
Explorer!$BASH -c 'lutris-wine -explorer'!"/usr/share/lutris/media/default_icon.png"| \
Task Manager!$BASH -c 'lutris-wine -taskmgr'!"/usr/share/lutris/media/default_icon.png"| \
Open CMD!$BASH -c 'lutris-wine -cmd'!"/usr/share/lutris/media/default_icon.png"| \
Open SHELL!$BASH -c 'lutris-wine -shell'!"/usr/share/lutris/media/default_icon.png"| \
DEBUG!$BASH -c 'lutris-wine -debug'!"/usr/share/lutris/media/default_icon.png"| \
Add/Remove Programs!$BASH -c 'lutris-wine -uninstaller'!"/usr/share/lutris/media/default_icon.png"| \
Control Panel!$BASH -c 'lutris-wine -control'!"/usr/share/lutris/media/default_icon.png"| \
Open drive C:\!$BASH -c 'lutris-wine -openpfx'!"/usr/share/lutris/media/default_icon.png"| \
Registry editor!$BASH -c 'lutris-wine -regedit'!"/usr/share/lutris/media/default_icon.png"| \
Wine settings!$BASH -c 'lutris-wine -winecfg'!"/usr/share/lutris/media/default_icon.png"| \
Wine manager!$BASH -c 'lutris-wine -winemgr'!"/usr/share/lutris/media/default_icon.png"| \
Set default Wine!$BASH -c 'lutris-wine -setwine'!"/usr/share/lutris/media/default_icon.png"| \
Themes manager!$BASH -c 'lutris-wine -themesmgr'!"/usr/share/lutris/media/default_icon.png"| \
Winetricks!$BASH -c 'lutris-wine -winetricks'!"/usr/share/lutris/media/default_icon.png"| \
Create shortcut!$BASH -c 'lutris-wine -shortcut'!"/usr/share/lutris/media/default_icon.png"| \
Add to Lutris!$BASH -c 'lutris-wine -addtolu'!"/usr/share/lutris/media/default_icon.png"| \
Remove menu app!$BASH -c 'lutris-wine -rmapp'!"/usr/share/lutris/media/default_icon.png"| \
Clear prefix!$BASH -c 'lutris-wine -clearpfx'!"/usr/share/lutris/media/default_icon.png"| \
Kill Wine processes!$BASH -c 'lutris-wine -killwine'!"/usr/share/lutris/media/default_icon.png"| \
Kill launch EXE!$BASH -c 'lutris-wine -killexe'!"/usr/share/lutris/media/default_icon.png"| \
Kill SHELL!$BASH -c 'lutris-wine -killshell'!"/usr/share/lutris/media/default_icon.png"| \
Kill tray!$BASH -c 'lutris-wine -killtray'!"/usr/share/lutris/media/default_icon.png"| \
FORCE EXIT!$BASH -c 'lutris-wine -exit'!"/usr/share/lutris/media/default_icon.png"|" &
            noclosetray &
    fi
}

lu_winemgr() {
    export WGUIDW=$RANDOM
    export ILW_LIST="$(ls -1 "$LU_WINE_DIR")"
    if [[ -z "$PGE_GIT" || -z  "$PPW_GIT" || -z  "$PK4_GIT" ]]
        then
            print_info "Сheck new WINE versions on GitHub..."
            export PGE_GIT="$(curl -s "https://api.github.com/repos/GloriousEggroll/proton-ge-custom/releases"|grep "browser_download_url.*\.tar\.gz"|cut -d \" -f 4)"
            export PPW_GIT="$(curl -s "https://api.github.com/repos/Castro-Fidel/wine_builds/releases"|grep "browser_download_url.*\.tar\.xz"|cut -d \" -f 4)"
            export PK4_GIT="$(curl -s "https://api.github.com/repos/Kron4ek/Wine-Builds/releases"|grep "browser_download_url.*\.tar\.xz"|cut -d \" -f 4)"
    fi
    if [[ ! -z "$PGE_GIT" || ! -z  "$PPW_GIT" || ! -z  "$PK4_GIT" ]]
        then
            export GITOK="1"
            print_info "Сhecking new WINE versions on GitHub complete!"
        else
            unset GITOK
            print_error "Can't get list of WINE URLs from GitHub!"
            zenity --error --title "Wine Manager" --text "Can't get list of WINE URLs from GitHub!" --no-wrap &>/dev/null
    fi
    if [[ ! -z "$ILW_LIST" && ! -z "$GITOK" ]]
        then
            export PGE_LIST="$(echo -e "$(for PGEGIT in $PGE_GIT ; do echo $PGEGIT|awk -F/ '{print $NF}'|sed 's/.tar.gz//' ; done|sed '/Proton-6.5-GE-2/,$d'|sed '/github-action/d')" "\n$ILW_LIST"|sort|uniq -u|grep -v "$ILW_LIST")"
            export PPW_LIST="$(echo -e "$(for PPWGIT in $PPW_GIT ; do echo $PPWGIT|awk -F/ '{print $NF}'|sed 's/.tar.xz//' ; done|sed '/plugins/d')" "\n$ILW_LIST"|sort|uniq -u|grep -v "$ILW_LIST")"
            export PK4_LIST="$(echo -e "$(for PK4GIT in $PK4_GIT ; do echo $PK4GIT|awk -F/ '{print $NF}'|sed 's/.tar.xz//' ; done|sed '/-x86/d')" "\n$ILW_LIST"|sort|uniq -u|grep -v "$ILW_LIST")"
            echo -e "\n$(echo "$PGE_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=1 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PGE_SET$WGUIDW" &
            echo -e "\n$(echo "$PPW_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=2 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PPW_SET$WGUIDW" &
            echo -e "\n$(echo "$PK4_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=3 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PK4_SET$WGUIDW" &
            echo -e "\n$(echo "$ILW_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=4 --list --column="" --checklist --separator=" " --column "Select installed WINE for delete:" 1> "/tmp/WDEL_SET$WGUIDW" &
            yad --key=$WGUIDW --notebook --width=500 --height=600 --text-align=center --center \
                --window-icon="/usr/share/lutris/media/default_icon.png" --title "Wine Manager" --separator="" \
                --tab-pos=top --tab="GloriousEggroll" --tab="PortWine" --tab="Kron4ek" --tab="DELETE" --button="SET DEFAULT WINE:2"  --button="EXIT:1" --button="OK:0"
            if [ "$?" == "2" ]
                then
                    rm -rf /tmp/*$WGUIDW
                    export SETWINE="1"
                    setwine
            fi
            export PGE_SET="$(sed 's/TRUE //g' /tmp/PGE_SET$WGUIDW 2>/dev/null ; rm -rf /tmp/PGE_SET$WGUIDW)"
            export PPW_SET="$(sed 's/TRUE //g' /tmp/PPW_SET$WGUIDW 2>/dev/null ; rm -rf /tmp/PPW_SET$WGUIDW)"
            export PK4_SET="$(sed 's/TRUE //g' /tmp/PK4_SET$WGUIDW 2>/dev/null ; rm -rf /tmp/PK4_SET$WGUIDW)"
            export WDEL_SET="$(sed 's/TRUE //g' /tmp/WDEL_SET$WGUIDW 2>/dev/null ; rm -rf /tmp/WDEL_SET$WGUIDW)"
    elif [[ ! -z "$ILW_LIST" && -z "$GITOK" ]]
        then
            if [[ "$(echo "$ILW_LIST"|sed 's/^ *//g'|wc -l)" == 1 && "$ILW_LIST" == "$WINE_IN_USE" ]]
                then
                    print_error "Lutris has one WINE installed and it selected by default! Can't run Wine Manager!"
                    zenity --error --title "Wine Manager" --text "Lutris has one WINE installed and it selected by default!\nCan't run Wine Manager!" --no-wrap &>/dev/null
                    exit 1
                else
                    echo -e "\n$(echo "$ILW_LIST"|grep -v "$WINE_IN_USE"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=1 --list --column="" --checklist --separator=" " --column "Select installed WINE for delete:" 1> "/tmp/WDEL_SET$WGUIDW" &
            fi
            export -f lu_themesmgr
            yad --key=$WGUIDW --notebook --width=500 --height=600 --text-align=center --center \
                --window-icon="/usr/share/lutris/media/default_icon.png" --title "Wine Manager" --separator="" \
                --tab-pos=top --tab="DELETE" --button="SET DEFAULT WINE:2"  --button="EXIT:1" --button="OK:0"
            if [ "$?" == "2" ]
                then
                    rm -rf /tmp/*$WGUIDW
                    export SETWINE="1"
                    setwine
            fi
            export WDEL_SET="$(sed 's/TRUE //g' /tmp/WDEL_SET$WGUIDW 2>/dev/null ; rm -rf /tmp/WDEL_SET$WGUIDW)"
    elif [[ -z "$ILW_LIST" && ! -z "$GITOK" ]]
        then
            export PGE_LIST="$(for PGEGIT in $PGE_GIT ; do echo $PGEGIT|awk -F/ '{print $NF}'|sed 's/.tar.gz//' ; done|sed '/Proton-6.5-GE-2/,$d'|sed '/github-action/d')"
            export PPW_LIST="$(for PPWGIT in $PPW_GIT ; do echo $PPWGIT|awk -F/ '{print $NF}'|sed 's/.tar.xz//' ; done|sed '/plugins/d')"
            export PK4_LIST="$(for PK4GIT in $PK4_GIT ; do echo $PK4GIT|awk -F/ '{print $NF}'|sed 's/.tar.xz//' ; done|sed '/-x86/d')"
            echo -e "\n$(echo "$PGE_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=1 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PGE_SET$WGUIDW" &
            echo -e "\n$(echo "$PPW_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=2 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PPW_SET$WGUIDW" &
            echo -e "\n$(echo "$PK4_LIST"|sed ':a;N;$!ba;s/\n/\n\n/g')"|yad --plug=$WGUIDW --tabnum=3 --list --column="" --checklist --separator=" " --column "Select WINE for download:" 1> "/tmp/PK4_SET$WGUIDW" &
            yad --key=$WGUIDW --notebook --width=500 --height=600 --text-align=center --center \
                --window-icon="/usr/share/lutris/media/default_icon.png" --title "Wine Manager" --separator="" \
                --tab-pos=top --tab="GloriousEggroll" --tab="PortWine" --tab="Kron4ek"
            export PGE_SET="$(sed 's/TRUE //g' /tmp/PGE_SET$WGUIDW 2>/dev/null ; rm -rf /tmp/PGE_SET$WGUIDW)"
            export PPW_SET="$(sed 's/TRUE //g' /tmp/PPW_SET$WGUIDW 2>/dev/null ; rm -rf /tmp/PPW_SET$WGUIDW)"
            export PK4_SET="$(sed 's/TRUE //g' /tmp/PK4_SET$WGUIDW 2>/dev/null ; rm -rf /tmp/PK4_SET$WGUIDW)"
    elif [[ -z "$ILW_LIST" && -z "$GITOK" ]]
        then
            print_error "Can't run Wine Manager!"
            zenity --error --title "Wine Manager" --text "Can't run Wine Manager!" --no-wrap &>/dev/null
            exit 1
    fi
    if [ ! -z "$(echo "$PGE_SET"|head -1)" ]
        then
            for PGE_DW in $PGE_SET
                do
                    unset PGE_DW_URL
                    export PGE_DW_URL="$(echo "$PGE_GIT"|grep $PGE_DW)"
                    if [ ! -z "$PGE_DW_URL" ]
                        then
                            print_info "Download and install $PGE_DW..."
                            if try_download "$PGE_DW_URL" "$LU_WINE_DIR/"
                                then
                                    for archive_type in "gz" "xz"
                                        do
                                            if [ -f "$LU_WINE_DIR/${PGE_DW}.tar.${archive_type}" ]
                                                then
                                                    if unpack_tar_${archive_type} "$LU_WINE_DIR/${PGE_DW}.tar.${archive_type}" "$LU_WINE_DIR/"
                                                        then
                                                            export PGE_INST="1"
                                                            rm -rf "$LU_WINE_DIR/${PGE_DW}.tar.${archive_type}"
                                                            if [ -d "$LU_WINE_DIR/$PGE_DW/files" ]
                                                                then
                                                                    for clearpge in $(ls -I "version" -I "files" "$LU_WINE_DIR/$PGE_DW")
                                                                        do
                                                                            rm -rf "$LU_WINE_DIR/$PGE_DW/$clearpge"
                                                                    done
                                                                    mv -f "$LU_WINE_DIR/$PGE_DW/files"/* "$LU_WINE_DIR/$PGE_DW/"
                                                                    rm -rf "$LU_WINE_DIR/$PGE_DW/files"
                                                                    print_info "Installing $PGE_DW complete!"
                                                            fi
                                                        else
                                                            rm -rf "$LU_WINE_DIR/${PGE_DW}.tar.${archive_type}"
                                                            rm -rf "$LU_WINE_DIR/${PGE_DW}"
                                                            download_error && lu_winemgr
                                                    fi
                                            fi
                                    done
                                else
                                    download_error && lu_winemgr
                            fi
                    fi
            done
    fi
    if [ ! -z "$(echo "$PPW_SET"|head -1)" ]
        then
            for PPW_DW in $PPW_SET
                do
                    unset PPW_DW_URL
                    export PPW_DW_URL="$(echo "$PPW_GIT"|grep $PPW_DW)"
                    if [ ! -z "$PPW_DW_URL" ]
                        then
                            print_info "Download and install $PPW_DW..."
                            if try_download "$PPW_DW_URL" "$LU_WINE_DIR/"
                                then
                                    for archive_type in "gz" "xz"
                                        do
                                            if [ -f "$LU_WINE_DIR/${PPW_DW}.tar.${archive_type}" ]
                                                then
                                                    if unpack_tar_${archive_type} "$LU_WINE_DIR/${PPW_DW}.tar.${archive_type}" "$LU_WINE_DIR/"
                                                        then
                                                            export PPW_INST="1"
                                                            rm -rf "$LU_WINE_DIR/${PPW_DW}.tar.${archive_type}"
                                                            print_info "Installing $PPW_DW complete!"
                                                        else
                                                            rm -rf "$LU_WINE_DIR/${PPW_DW}.tar.${archive_type}"
                                                            rm -rf "$LU_WINE_DIR/${PPW_DW}"
                                                            download_error && lu_winemgr
                                                    fi
                                            fi
                                    done
                                else
                                    download_error && lu_winemgr
                            fi
                    fi
            done
    fi
    if [ ! -z "$(echo "$PK4_SET"|head -1)" ]
        then
            for PK4_DW in $PK4_SET
                do
                    unset PK4_DW_URL
                    export PK4_DW_URL="$(echo "$PK4_GIT"|grep $PK4_DW)"
                    if [ ! -z "$PK4_DW_URL" ]
                        then
                            print_info "Download and install $PK4_DW..."
                            if try_download "$PK4_DW_URL" "$LU_WINE_DIR/"
                                then
                                    for archive_type in "gz" "xz"
                                        do
                                            if [ -f "$LU_WINE_DIR/${PK4_DW}.tar.${archive_type}" ]
                                                then
                                                    if unpack_tar_${archive_type} "$LU_WINE_DIR/${PK4_DW}.tar.${archive_type}" "$LU_WINE_DIR/"
                                                        then
                                                            export PK4_INST="1"
                                                            rm -rf "$LU_WINE_DIR/${PK4_DW}.tar.${archive_type}"
                                                            print_info "Installing $PK4_DW complete!"
                                                        else
                                                            rm -rf "$LU_WINE_DIR/${PK4_DW}.tar.${archive_type}"
                                                            rm -rf "$LU_WINE_DIR/${PK4_DW}"
                                                            download_error && lu_winemgr
                                                    fi
                                            fi
                                    done
                                else
                                    download_error && lu_winemgr
                            fi
                    fi
            done
    fi
    if [ ! -z "$(echo "$WDEL_SET"|head -1)" ]
        then
            unset WINEINUSEDEL
            while read winedel
                do
                    print_info "Remove $winedel..."
                    rm -rf "$LU_WINE_DIR/$winedel"
                    print_info "Removing $winedel complete!"
                    if [ "$WINE_IN_USE" == "$winedel" ]
                        then
                            export WINEINUSEDEL="1"
                    fi
            done <<< $WDEL_SET
            check_lupid
            if [[ ! -z "$WINEINUSEDEL" && ! -z "$LU_PID" ]]
                then
                    if [ ! -z "$(ls -1 "$LU_WINE_DIR"|head -1)" ]
                        then
                            print_info "Removed WINE which was selected by default!"
                            zenity --info --title "Wine removing completed!" --text "Removed WINE which was selected by default!" --no-wrap &>/dev/null
                            setwine
                            print_info "You need to restart LUTRIS!"
                            zenity --question --title "Wine removing completed!" --text "You need to restart LUTRIS! Press YES to restart" --no-wrap &>/dev/null
                            if [ $? -eq "0" ]
                                then
                                    kill -9 $LU_PID
                                    lutris &
                                    exit 0
                            fi
                        else
                            print_info "Removed WINE which was selected by default! WINE is not installed in Lutris, you must download WINE!"
                            zenity --info --title "Wine removing completed!" --text "Removed WINE which was selected by default!\nWINE is not installed in Lutris, you must download WINE!" --no-wrap &>/dev/null
                            unset WINEINUSEDEL WDEL_SET
                            lu_winemgr
                    fi
            elif [ ! -z "$WINEINUSEDEL" ]
                then
                    if [ ! -z "$(ls -1 "$LU_WINE_DIR"|head -1)" ]
                        then
                            print_info "Removed WINE which was selected by default!"
                            zenity --info --title "Wine removing completed!" --text "Removed WINE which was selected by default!" --no-wrap &>/dev/null
                            setwine
                        else
                            print_info "Removed WINE which was selected by default! WINE is not installed in Lutris, you must download WINE!"
                            zenity --info --title "Wine removing completed!" --text "Removed WINE which was selected by default!\nWINE is not installed in Lutris, you must download WINE!" --no-wrap &>/dev/null
                            unset WINEINUSEDEL WDEL_SET
                            lu_winemgr
                    fi
            elif [ ! -z "$LU_PID" ]
                then
                    zenity --question --title "Wine removing completed!" --text "You need to restart LUTRIS! Press YES to restart" --no-wrap &>/dev/null
                    if [ $? -eq "0" ]
                        then
                            kill -9 $LU_PID
                            lutris &
                            exit 0
                    fi
            else
                zenity --info --title "Wine remove" --text "Wine removing completed!" --no-wrap &>/dev/null
            fi
    fi
    if [[ "$PGE_INST" == 1 || "$PPW_INST" == 1 || "$PK4_INST" == 1 ]]
        then
            check_lupid
            if [ ! -z "$LU_PID" ]
                then
                    print_info "You need to restart LUTRIS and select a new WINE in the settings!"
                    zenity --question --title "Wine installation completed!" --text "You need to restart LUTRIS and select a new WINE in the settings!\nPress YES to restart LUTRIS" --no-wrap &>/dev/null
                    if [ $? -eq "0" ]
                        then
                            kill -9 $LU_PID
                            lutris &
                            exit 0
                    fi
                else
                    if [ -z "$WINEINUSEDEL" ]
                        then
                            setwine
                            unset WDEL_SET
                    fi
                    unset PK4_INST PPW_INST PGE_INST
                    zenity --info --title "Wine Manager" --text "Wine installation completed!" --no-wrap &>/dev/null
            fi
    fi
}

lu_themesmgr() {
    if [[ -d "$THEMES_DIR" && ! -z "$(ls -1 "$THEMES_DIR"|head -1)" ]]
        then
            export WINE_THEME="$(echo -e "\n$(echo "$(ls "$THEMES_DIR")"|sed 's/.reg//g'|sed ':a;N;$!ba;s/\n/\n\n/g')"| \
            zenity --title "Themes Manager" --text "Select theme for WINE:" --list --radiolist --separator "\n" --column=1 --column=2 --hide-header --width=300 --height=300  2>/dev/null)"
            if [ ! -z "$WINE_THEME" ]
                then
                    print_info "Change the WINE theme to $WINE_THEME..."
                    $WINE regedit "$THEMES_DIR/$WINE_THEME.reg" >/dev/null 2>&1
                    print_info "Wine theme changed successfully!"
                    zenity --info --title "Themes Manager" --text "Wine theme changed successfully!" --no-wrap &>/dev/null
            fi
        else
            print_error "Wine theme not found!"
            zenity --error --title "Themes Manager" --text "Wine theme not found!" --no-wrap &>/dev/null
    fi
}

if [ $(id -u) -eq 0 ] ; then
    print_error "Don't run Lutris Wine as root!"
    zenity --error --text "Don't run Lutris Wine as root!" --no-wrap &>/dev/null &
    exit 1
fi
create_new_dir "$LU_WINE_DIR"
if [[ -f "$LU_WINE_CONF" && -d "$LU_DIR" ]]
    then
        unset WINEINUSEDEL WDEL_SET PK4_INST PPW_INST PGE_INST
        expluwineconf
        if [[ ! -f "$WINE" && -z "$(ls -1 "$LU_WINE_DIR"|head -1)" ]]
            then
                print_error "WINE is not installed in Lutris, you must download WINE!"
                zenity --info --title "Wine check" --text "WINE is not installed in Lutris, you must download WINE!" --no-wrap &>/dev/null
                lu_winemgr
        fi
        setwine
        if [ -z "$WINEARCH" ]
            then
                export WINEARCH="win64"
        fi
        if [ -z "$WINEPREFIX" ]
            then
                export WINEPREFIX="$HOME/.wine"
        fi
        if [ -z "$SHELL" ]
            then
                export SHELL="/usr/bin/bash"
        fi
        check_compositor 2>/dev/null
        wdllover_upd "$(echo -n "$(sed -n  '/\(^  overrides\)/,$p' "$LU_WINE_CONF"|grep "    "|sed 's/^ *//g'|tr ':' '='|sed 's/ //g'|sed "s/''//g")"|tr "\n" ";")"
        export WINE_MONO_OVERRIDES="Microsoft.Xna.Framework.*,Gac=n"
        export STAGING_SHARED_MEMORY="1"
        export WINE_LARGE_ADDRESS_AWARE="1"
        export VK_ICD_FILENAMES="$vk_icd"
        export SDL_VIDEO_FULLSCREEN_DISPLAY="$sdl_video_fullscreen"
        export WTRX_LOG="$WINEPREFIX/winetricks.log"
        if [[ ! -z "$mangohud" && ! -z "$(which mangohud 2>/dev/null)" ]]
            then
                if [ "$mangohud" == "vk64" ]
                    then
                        export RUN_MANGOHUD="mangohud"
                    else
                        export RUN_MANGOHUD="mangohud --dlsym"
                fi
            else
                print_error "MANGOHUD not found in you system or disabled in Lutris!"
                export DISABLE_MANGOHUD=1
        fi
        if [[ ! -z "$gamemode" && "$gamemode" == true && ! -z "$(which gamemoderun 2>/dev/null)" ]]
            then
                export RUN_GAMEMODE="gamemoderun"
            else
                print_error "GAMEMODE not found in you system or disabled in Lutris!"
                export RUN_GAMEMODE=""
        fi
        if [ -d "$WINEDIR/lib64/gstreamer-1.0" ]
            then
                export GST_PLUGIN_SYSTEM_PATH_1_0="$WINEDIR/lib64/gstreamer-1.0/:$WINEDIR/lib/gstreamer-1.0/"
                create_new_dir HOME/.cache/gstreamer-1.0
                export WINE_GST_REGISTRY_DIR=$HOME/.cache/gstreamer-1.0
                export MEDIACONV_AUDIO_DUMP_FILE=$HOME/.cache/gstreamer-1.0/audio.foz
                export MEDIACONV_AUDIO_TRANSCODED_FILE=$HOME/.cache/gstreamer-1.0/transcoded_audio.foz
                export MEDIACONV_VIDEO_DUMP_FILE=$HOME/.cache/gstreamer-1.0/video.foz
                export MEDIACONV_VIDEO_TRANSCODED_FILE=$HOME/.cache/gstreamer-1.0/transcoded_video.foz
            else
                wdllover_upd "winegstreamer="
        fi
        if [[ ! -z "$dxvk" && "$dxvk" == true ]]
            then
                create_new_dir $HOME/.cache/dxvk_cache
                create_new_dir $HOME/.cache/gl_shader_cache
                export DXVK_STATE_CACHE_PATH=$HOME/.cache/dxvk_cache
                export DXVK_STATE_CACHE=1
                export __GL_DXVK_OPTIMIZATIONS=1
                export __GL_SHADER_DISK_CACHE_PATH=$HOME/.cache/gl_shader_cache
                export __GL_SHADER_DISK_CACHE=1
                export __GL_SHADER_DISK_CACHE_SIZE=1000000000
                wdllover_upd "d3d11,d3d10,d3d10core,d3d10_1,d3d9,dxgi=n"
        fi
        if [[ ! -z "$vkd3d" && "$vkd3d" == true ]]
            then
                wdllover_upd "d3d12=n"
        fi
        if [[ ! -z "$dxvk_nvapi" && "$dxvk_nvapi" == true ]]
            then
                wdllover_upd "nvapi,nvapi64,nvml=n;nvcuda=b"
                export DXVK_NVAPIHACK="0"

        fi
        if [[ ! -z "$d3d_extras" && "$d3d_extras" == true ]]
            then
                wdllover_upd "d3dcompiler_42,d3dcompiler_43,d3dcompiler_46,d3dcompiler_47,d3dx10_33,d3dx10_34,d3dx10_35,d3dx10_36,d3dx10_37,d3dx10_38,d3dx10_39,d3dx10_40,d3dx10_41,d3dx10_42,d3dx10_43,d3dx10,d3dx11_42,d3dx11_43,d3dx9_24,d3dx9_25,d3dx9_26,d3dx9_27,d3dx9_28,d3dx9_29,d3dx9_30,d3dx9_31,d3dx9_32,d3dx9_33,d3dx9_34,d3dx9_35,d3dx9_36,d3dx9_37,d3dx9_38,d3dx9_39,d3dx9_40,d3dx9_41,d3dx9_42,d3dx9_43=n"
        fi
        if [[ ! -z "$dgvoodoo2" && "$dgvoodoo2" == true ]]
            then
                true
        fi
        if [[ ! -z "$battleye" && "$battleye" == true ]]
            then
                export PROTON_BATTLEYE_RUNTIME="$LU_RUNTIME/battleye_runtime"
            else
                unset PROTON_BATTLEYE_RUNTIME

        fi
        if [[ ! -z "$prime" && "$prime" == true ]]
            then
                export __GLX_VENDOR_LIBRARY_NAME=nvidia
                export __NV_PRIME_RENDER_OFFLOAD=1
            else
                unset __GLX_VENDOR_LIBRARY_NAME __NV_PRIME_RENDER_OFFLOAD

        fi
        if [[ ! -z "$esync" && "$esync" == true ]]
            then
                export WINEESYNC="1"
            else
                unset WINEESYNC
        fi
        if [[ ! -z "$fsync" && "$fsync" == true ]]
            then
                export WINEFSYNC="1"
                export WINEFSYNC_FUTEX2="1"
            else
                unset WINEFSYNC WINEFSYNC_FUTEX2
        fi
        if [[ ! -z "$fsr" && "$fsr" == true ]]
            then
                export WINE_FULLSCREEN_FSR="1"
                export WINE_FULLSCREEN_FSR_STRENGTH="1"
            else
                unset WINE_FULLSCREEN_FSR WINE_FULLSCREEN_FSR_STRENGTH
        fi
        if [[ ! -z "$use_us_layout" && "$use_us_layout" == true ]]
            then
                export SYS_LYT="setxkbmap -query|grep layout|awk '"'{print$2}'"'"
                export SYS_OTHLYT="$(eval $SYS_LYT|sed 's/us//g'|sed 's/,//g')"
                export CHK_US="$SYS_LYT|cut -d',' -f1"
                export CHK_LYT="xset -q|grep LED|grep -o '00000002'"
                if [ "$(echo "$SYS_OTHLYT"|wc -m)" == "3" ]
                    then
                        if [[ "$(eval $CHK_US)" == "us" && ! -z "$(eval $CHK_LYT)" ]]
                            then :
                        elif [[ "$(eval $CHK_US)" != "us" && ! -z "$(eval $CHK_LYT)" ]]
                            then
                                setxkbmap us,$SYS_OTHLYT
                        elif [[ "$(eval $CHK_US)" == "us" && -z "$(eval $CHK_LYT)" ]]
                            then
                                setxkbmap $SYS_OTHLYT,us
                        fi
                fi
            else
                unset SYS_LYT SYS_OTHLYT CHK_US CHK_LYT
        fi
        if [[ ! -z "$disable_runtime" && "$disable_runtime" == true ]]
            then
                export LD_LIBRARY_PATH=$LD_LIBRARY_PATH
            else
                if [[ ! -z "$prefer_libs" && "$prefer_libs" == true ]]
                    then
                        export LD_LIBRARY_PATH="$WINEDIR/lib:$WINEDIR/lib64:/usr/lib:/usr/lib32:/opt/cuda/lib64:/usr/lib/openmpi:/opt/cuda/extras/CUPTI/lib64:/opt/cuda/nvvm/lib64:/usr/lib/libfakeroot:/usr/lib64:$LU_RUNTIME/Ubuntu-18.04-i686:$LU_RUNTIME/steam/i386/lib/i386-linux-gnu:$LU_RUNTIME/steam/i386/lib:$LU_RUNTIME/steam/i386/usr/lib/i386-linux-gnu:$LU_RUNTIME/steam/i386/usr/lib:$LU_RUNTIME/Ubuntu-18.04-x86_64:$LU_RUNTIME/steam/amd64/lib/x86_64-linux-gnu:$LU_RUNTIME/steam/amd64/lib:$LU_RUNTIME/steam/amd64/usr/lib/x86_64-linux-gnu:$LU_RUNTIME/steam/amd64/usr/lib::$LD_LIBRARY_PATH"
                    else
                        export LD_LIBRARY_PATH="$LU_RUNTIME/Ubuntu-18.04-i686:$LU_RUNTIME/steam/i386/lib/i386-linux-gnu:$LU_RUNTIME/steam/i386/lib:$LU_RUNTIME/steam/i386/usr/lib/i386-linux-gnu:$LU_RUNTIME/steam/i386/usr/lib:$LU_RUNTIME/Ubuntu-18.04-x86_64:$LU_RUNTIME/steam/amd64/lib/x86_64-linux-gnu:$LU_RUNTIME/steam/amd64/lib:$LU_RUNTIME/steam/amd64/usr/lib/x86_64-linux-gnu:$LU_RUNTIME/steam/amd64/usr/lib:$LD_LIBRARY_PATH"
                fi
        fi
        if [ ! -z "$LD_LIBRARY_PATH" ]
            then
                if [[ -z "$(echo $LD_LIBRARY_PATH|grep "$WINEDIR/lib64:$WINEDIR/lib")" ]]
                    then
                        export LD_LIBRARY_PATH="$WINEDIR/lib64:$WINEDIR/lib:$LD_LIBRARY_PATH"
                fi
            else
                export LD_LIBRARY_PATH="$WINEDIR/lib64:$WINEDIR/lib"
        fi
        if [ ! -z "$PATH" ]
            then
                export PATH="$WINEDIR/bin:$PATH"
            else
                export PATH="$WINEDIR/bin"
        fi
        if [[ ! -z "$terminal" && "$terminal" == true ]]
            then
                export TERMINAL=1
            else
                unset TERMINAL

        fi
        if [[ ! -z "$pulse_latency" && "$pulse_latency" == true ]]
            then
                export PULSE_LATENCY_MSEC="60"
            else
                unset PULSE_LATENCY_MSEC

        fi
        if [[ ! -z "$reset_pulse" && "$reset_pulse" == true ]]
            then
                if [[ ! -z "$(pgrep pulseeffects)" && ! -z "$(pgrep pulseaudio)" ]]
                    then
                        pkill -15 pulseeffects
                        pulseaudio -k
                        if [ -z "$(pgrep pulseaudio)" ]
                            then
                                pulseaudio -D
                        fi
                        pulseeffects --gapplication-service
                elif [ ! -z "$(pgrep pulseaudio)" ]
                    then
                        pulseaudio -k
                        if [ -z "$(pgrep pulseaudio)" ]
                            then
                                pulseaudio -D
                        fi
                fi
        fi
        export -f yaml_parser print_var print_error print_info check_lupid check_tray check_wine_pids check_luwine_pid \
        check_luwine_sh_pid check_exes noclosetray check_compositor create_new_dir check_symlink check_mono_gecko other_fixes \
        try_download download_error unpack_tar_xz unpack_tar_gz unpack_tar settingbar shell_is_death exe_is_death \
        exes_is_death wine_is_death compositor_sw update_winetricks wdllover_upd reg_edit exe2png add_to_lutris create_shortcut \
        lu_debug clear_log dis_debug_msg dis_cmd_msg expluwineconf setwine lu_prerun lu_run lu_prestart lu_start lu_cmd lu_shell \
        lu_regedit lu_control lu_winecfg lu_taskmgr lu_uninstaller winetricks lu_openpfx lu_exit lu_killshell lu_killtray lu_killwine \
        lu_killexe lu_clearpfx lu_rmapp lu_shortcut lu_explorer lu_help lu_version lu_tray lu_winemgr lu_themesmgr check_musthave_dll
        check_musthave_dll
        if [ -z "$WIN_VER" ]
            then
                export WIN_VER="10"
        fi
        if [[ -z $(cat "$WINEPREFIX/system.reg"|grep "Windows $WIN_VER") ]]
            then
                if [[ ! -z "$WIN_VER" && $(echo "$WIN_VER"|sed 's/.*/\L&/') == "xp" ]]
                    then
                        export WIN_VER="xp64"
                fi
                "$WINE" winecfg -v $(echo "win$WIN_VER"|sed 's/.*/\L&/')
                echo "WINDOWS VERSION SET TO WINDOWS $WIN_VER"
        fi
        other_fixes
        case $1 in
            -cmd) lu_cmd "$@" ;;
            -shell) lu_shell "$@" ;;
            -regedit) lu_regedit ;;
            -control) lu_control ;;
            -winecfg) lu_winecfg ;;
            -taskmgr) lu_taskmgr ;;
            -winemgr) lu_winemgr ;;
            -themesmgr) lu_themesmgr ;;
            -uninstaller) lu_uninstaller ;;
            -winetricks) winetricks ;;
            -openpfx) lu_openpfx ;;
            -killwine) lu_killwine ;;
            -killtray) lu_killtray ;;
            -killexe) lu_killexe ;;
            -killshell) lu_killshell ;;
            -exit) lu_exit ;;
            -clearpfx) lu_clearpfx ;;
            -rmapp) lu_rmapp ;;
            -shortcut) lu_shortcut "$@" ;;
            -addtolu) export ADDTOLU=1 ; lu_shortcut "$@" ;;
            -explorer) lu_explorer ;;
            -debug) export DEBUG=1 ; lu_start "$@" ;;
            -help) lu_help ;;
            -version) lu_version ;;
            -tray) lu_tray ;;
            -setwine) export SETWINE="1" ; setwine ;;
            -*) lu_help ;;
            *) lu_start "$@" ;;
        esac
    else
        print_error "First you need to configure Wine in Lutris!"
        zenity --error --text "First you need to configure Wine in Lutris!" --no-wrap &>/dev/null &
        exit 1
fi
